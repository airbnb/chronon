# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/helpers/context.sky", "get_env", "get_cluster", "is_bin_packing_enabled", "get_target_shard")
load("config/kubernetes/helpers/shards_list.sky", "ENV_CLUSTER_SHARDS")

"""
Functions that apply to generic k8s resources instead of any particular type
"""


def set_shared_msp(resource):
    """
    Mark the resource to be run on shared MSP

    Args:
      resource: a resource definition
    """
    resource["shared_msp"] = True


def is_shared_msp(ctx, resource):
    """
    Condition for running the plugin for deployments to shared MSP

    Args:
      ctx: a skycfg context
      resource: a resource definition
    Returns:
      True iff the resource has been marked to run on shared MSP
    """
    return resource.get("shared_msp", False)


def is_dedicated_msp(ctx, resource):
    """
    Condition for running the plugin for deployments to dedicated MSP

    Args:
      ctx: a skycfg context
      resource: a resource definition
    Returns:
      True iff the resource has not been marked to run on shared MSP
    """
    return not is_shared_msp(ctx, resource)


def get_shared_msp_label(ctx, resource):
    """
    Checks whether the resource has the shared-msp label and returns it.

    `is_shared_msp` has a misleading name since it's used to enable some default plugins for shared msp
    which horizon doesn't use, so they set it to False.

    We should instead rely on the label since that's correctly set for all services.

    Args:
      ctx: a skycfg context
      resource: a resource definition
    Returns:
      True iff the resource has been marked to run on shared MSP
    """
    md = resource.get('metadata')
    if md == None:
        return False
    labels = md.get("labels", {}) if type(md) == 'dict' else md.labels
    return bool(labels.get("stripe.io/shared-msp", "false"))


def _get_account_for_shard(ctx, shard):
    # We have to implement this here to avoid a circular dependency between msp_shard and generic.sky
    local_shards = ENV_CLUSTER_SHARDS.get(get_env(ctx), {}).get(get_cluster(ctx), [])
    for s in local_shards:
        if s.name == shard:
            return s.account
    return "mainland"

def is_security_group_policy_enabled(ctx, resource):
    """
    Get whether security group policy is enabled. We will only allow this in shared msp

        Args:
        ctx: The context containing henson and the Centralized service config
        resource: a resource definition
    Returns:
        security group policy enabled or not
    """
    return (get_shared_msp_label(ctx, resource) and ctx.vars.get("msp.use_sgp", False)) or is_bin_packing_enabled(ctx) or (_get_account_for_shard(ctx, get_target_shard(ctx)) != "mainland")
