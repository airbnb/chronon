# DO NOT EDIT: http://go/vendor-skycfg
"""
Plugin for adding additional environment variables to a container.
"""

load("config/kubernetes/helpers/context.sky", "get_env", "get_name", "get_cluster", "get_henson_git_commit", "get_availability_tier", "get_target_shard")
load("config/kubernetes/helpers/msp_shard.sky", "get_account_for_shard", "get_account_id")
load("config/kubernetes/plugins/types.sky", "container_plugin", "all_container_plugin")
load("config/kubernetes/helpers/proto_or_yaml.sky", "EnvVar", "EnvVarSource", "ObjectFieldSelector")
load("config/kubernetes/networking/internal/common.sky", "POD_NETWORKING_BASEDIR")

def container_env_vars(vars = {}, from_fields = {}, container_name = None):
    """
    Set additional environment variables in a container.

    Args:
        vars: A dictionary of environment variables to set in the container.
        from_fields: A dictionary of environment variables to set from fields set in the pod.
        container_name: Optional name of the container to add the variables to.
            Defaults to the main container of the pod.

    Returns:
        A plugin that adds the new environment variables to the container.
    """
    return container_plugin(
        _add_env_vars,
        container_name = container_name,
        vars = vars,
        from_fields = from_fields,
    )

def all_containers_env_vars(vars = {}, from_fields = {}, container_name = None):
    """
    Set additional environment variables in all the container(s).

    Args:
        vars: A dictionary of environment variables to set in the container.
        from_fields: A dictionary of environment variables to set from fields set in the pod.
        container_name: Optional name of the container to add the variables to.
            Defaults to the main container of the pod.

    Returns:
        A plugin that adds the new environment variables to the container.
    """
    return all_container_plugin(
        _add_env_vars,
        container_name = container_name,
        vars = vars,
        from_fields = from_fields,
    )

def render_env_vars(ctx, container):
    env_vars = {}
    env_vars_from_fields = {}
    if container.include_default_env:
        env_vars.update(_default_env_vars(ctx, container))
        env_vars_from_fields.update(_default_env_vars_from_fields(ctx))
    env_vars.update(container.env)
    env_vars_from_fields.update(container.env_from_fields)

    env_var_list = []
    # The sequence in which these variables are declared is now significant.
    # Environment variables derived from fields must precede regular environment variables, as some regular environment variables rely on these 'from fields' environment variables for their values.
    for name, field in env_vars_from_fields.items():
        env_var_list.append(
            EnvVar(
                ctx,
                name = name,
                valueFrom = EnvVarSource(
                    ctx,
                    fieldRef = ObjectFieldSelector(
                        ctx,
                        fieldPath = field,
                    ),
                ),
            ),
        )
    for name, value in env_vars.items():
        env_var_list.append(
            EnvVar(ctx, name = name, value = value),
        )

    return env_var_list

def default_env_vars(ctx):
    return render_env_vars(ctx, struct(
        env = {},
        env_from_fields = {},
        include_default_env = True,
    ))

def _add_env_vars(ctx, plugin, container_def):
    # NB: `plugin.vars` and `plugin.from_fields` can sometimes be the default values from
    # the arguments of the plugin calls to `container_env_vars` or `all_containers_env_vars`.
    # When that is the case, those default value dictionaries are frozen which prevents
    # future updates to them. In order to avoid that problems we always create a default
    # dictionary if one doesn't exist and update its contents with the values of `plugin.vars`
    # or `plugin.from_fields` rather than using those values directly. This prevents setting
    # those value to a frozen dictionary.
    #
    # Avoid doing something like the following:
    #  container_def["env"] = plugin.vars # container_def["env"] can potentially be a frozen dict
    #
    # Instead by copying the contents into a default dictionary it prevents value from being forzen:
    #  container_env = container_def.get("env", {})
    #  container_env.update(plugin.vars)
    #  container_def["env"] = container_env
    #
    # Docs with explanation:
    # https://github.com/google/starlark-go/blob/f86470692795f8abcf9f837a3c53cf031c5a3d7e/doc/spec.md#L1065-L1085

    container_env = container_def.get("env", {})
    container_env.update(plugin.vars)
    container_def["env"] = container_env

    container_env_from_fields = container_def.get("env_from_fields", {})
    container_env_from_fields.update(plugin.from_fields)
    container_def["env_from_fields"] = container_env_from_fields

def _default_env_vars(ctx, container):
    env_var_dict = {}

    env_name = get_env(ctx)

    if env_name == "prod":
        env_name = "production"

    if get_name(ctx).startswith("edge-"):
        env_var_dict["STRIPE_EDGE"] = "true"

        if env_name == "production":
            env_name = "edge"
        elif env_name == "qa":
            env_name = "qa-edge"

    env_var_dict["STRIPE_ENVIRONMENT"] = env_name
    env_var_dict["STRIPE_CLUSTER"] = get_cluster(ctx)
    env_var_dict["STRIPE_SERVICE"] = get_name(ctx)
    env_var_dict["HENSON_SERVICE"] = get_name(ctx)
    env_var_dict["STRIPE_DOMAIN"] = "stripe.io"
    env_var_dict["AWS_ACCOUNT_NAME"] = get_account_for_shard(ctx, get_target_shard(ctx))
    env_var_dict["AWS_ACCOUNT_ID"] = get_account_id(ctx, env_var_dict["AWS_ACCOUNT_NAME"])
    env_var_dict["GIT_COMMIT"] = get_henson_git_commit(ctx)
    env_var_dict["NETWORK_LOG_DIR"] = POD_NETWORKING_BASEDIR
    if hasattr(container, 'name'):
        env_var_dict["STRIPE_CONTAINER_NAME"] = container.name
    env_var_dict["STRIPE_AVAILABILITY_TIER"] = get_availability_tier(ctx)

    # this ensures compatibility in tracing headers between various versions of opentelemetry
    # https://jira.corp.stripe.com/browse/OBSD-1092
    env_var_dict["OTEL_SEMCONV_STABILITY_OPT_IN"] = "http/dup"

    return env_var_dict

def _default_env_vars_from_fields(ctx):
    return {
        "STRIPE_NODE_NAME": "spec.nodeName",
        "STRIPE_POD_NAME": "metadata.name",
        "STRIPE_POD_NAMESPACE": "metadata.namespace",
        "STRIPE_HOST_IP": "status.hostIP",
        "STRIPE_POD_IP": "status.podIP",
    }
