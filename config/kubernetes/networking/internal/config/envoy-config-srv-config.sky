# DO NOT EDIT: http://go/vendor-skycfg
"""
[Service Networking Internal] Default schema and config value generation rules
for `envoy-config-srv` sidecar in Shared MSP. Config values are computed from
deploy-time context of the current workload and covers:
- commandline arguments
- sidecar.json configuration
- (TODO) sidecar image versioning

Service owners may override default values by calling the `networking_config`.
"""

load("config/kubernetes/networking/internal/common.sky", "POD_NETWORKING_BASEDIR")
load(
    "config/kubernetes/networking/internal/config/override.sky",
    "match",
    "populate_config",
    "when",
)

LDS_PORT = 10092
CDS_PORT = 10097
DEBUG_PORT = 10093
XDS_DEBUG_BASEDIR = "/pay/tmp/envoy-xds/pods"  # go/jira/SN-852
UNPRIVILEGED_ENVOY_PORT = 1643
ENVOY_LOGS_DIR = "%s/envoy" % POD_NETWORKING_BASEDIR
ENVOY_EGRESS_SOCKETS_DIR = "/var/run/envoy/egress"
ENVOY_OUTBOUND_UNIX_SOCKETS_DIR = "/var/run/envoy/outbound"
ENVOY_RUNTIME_DIR = "/run/stripe/envoy"
ENVOY_SYSTEM_FLAGS_PATH = "%s/envoy_file_system_flags" % ENVOY_RUNTIME_DIR
ENVOY_CONFIG_SRV_RUNTIME_DIR = "/run/stripe/envoy-config-srv"
ENVOY_CONFIG_SRV_PERSISTENT_DRAIN_FILE = "%s/draining" % ENVOY_CONFIG_SRV_RUNTIME_DIR
ENVOY_CONFIG_SRV_SERVICE_REGISTRATIONS_DIR = "/etc/serviceregistry/services"
DEFAULT_CROSS_DOMAIN_SERVICES_BY_ENV = {
    "qa": ["pandoradecrypt"],
    "preprod": ["pandoradecrypt"],
    "prod": ["pandoradecrypt"],
}

def _fallback_sidecar_version(target):
    """
    This is the fallback sidecar version for envoy-config-srv-image.
    Specifies the version to use for envoy-config-srv-image.
    The version should be a sha256 digest for a particular image that we want to use.
    The digest can be found in the container images artifact section of a CI build (for a particular git commit).

    Note that all master branch commits will be pushed to the stripe/traffic/ path, while non-master branch commits will be pushed to the stripe-qa/traffic/ path.
    This means that if we want to test a digest from a test branch, we will specify it here, then hardcode the stripe-qa/traffic/ path in _envoy_config_srv_image(...).
    """

    # QA & Prod sha256 digest
    #
    # CI Build  : https://cibot.corp.stripe.com/builds/kube-tools--bui_NF7aSpZwOgACKi
    # Git Commit: 7428ac49f597062a838ca0b645dcf6a5eb0a4ab2
    # Summary   : 1/26/2023: Replace deprecated exact header matcher field (#3700)
    fallback_digest = "5e00c9bded192677209746bfbee39001bc63554a990635d3c1e6be8f13246719"

    return {
        "version": fallback_digest
    }

def _default_sidecar_cli_args(target):
    """
    Args:
        target: deploy-time properties about the current workload. Used to match
            against config generation rules to synthesize the correct values for
            the workload.

    Returns:
        A dictionary used to configure the commandline options passed to per-pod
        `envoy-config-srv`.
    """
    return {
        "mproxy_tier": "non-bapi",
        "egress_proxy_tier": "",
        "enable_inbound_websockets": False,
        # The enable_grpc_web option is technically enabled 100% of the time today at the envoy-config-srv
        # level, because the envoy-config-srv binary sets the option as default true, and the value is only
        # set to false if the --no-enable-grpc-web flag is used. We will keep the skycfg option below as
        # default false to match the behavior in puppet hiera, but we will later update the flag generation
        # logic in both puppet and skycfg to explicitly pass --no-enable-grpc-web to envoy-config-srv if
        # the config is set to false.
        "enable_grpc_web": False,
        "cluster_watch_addr": _designated_envoy_control_srv_addr(target.availability_tier, target.env),
        "allowed_machine_orgs": [
            "stripe.io",
        ],
        "envoy_rlimit_nofile": 262144,
    }

def _default_sidecar_config(target):
    """
    This configuration is DEPRECATED.

    Note to Service Networking:
    Please use envoy-config-srv.yaml in gocode instead, found at:
    https://git.corp.stripe.com/stripe-internal/gocode/blob/master/kube-tools/envoy-config-srv/config/envoy-config-srv.yaml

    Args:
        target: deploy-time properties about the current workload. Used to match
            against config generation rules to synthesize the correct values for
            the workload.

    Returns:
        A dictionary specifying the default sidecar.json configuration for per-pod
        `envoy-config-srv`. The config values are computed from deploy-time context
        of the current workload.

        Where possible, these defaults are skycfg equivalents to those in
        go/kube-tools/blob/master/envoy-config-srv/config/envoy-config-srv.yaml
    """
    return {
        "enable_global_ratelimiter": False,
        "local_rate_limit": None,
        "persistent_drain_file": ENVOY_CONFIG_SRV_PERSISTENT_DRAIN_FILE,
        "remove_consul_health_source": True,
        "mproxy_local_rate_limit": None,
        "enable_cross_domain_services": [],
        "enable_envoy_http_tap_filter": match(
            target,
            False,
            when(env = "qa", value = True),
        ),
        "enable_latency_checkpoints": match(
            target,
            False,
            when(env="qa", role="envoy-shape", value = True)
        ),
        "egress_proxy": match(
            target,
            egress_proxy(tier="", enable_unix_socket=True),
            when(role="monobapibox", availability_tier="A100", value=egress_proxy(tier="p0", enable_unix_socket=True)),
            when(role="monobapibox", availability_tier="A110", value=egress_proxy(tier="p0", enable_unix_socket=True)),
            when(role="workflow-work-banking-platform", value=egress_proxy(tier="p0", enable_unix_socket=True)),
            when(role="issuingauth", value=egress_proxy(tier="p0", enable_unix_socket=True)),
            # TODO(jakewang): configure egress-proxy-prober-ruby.sky p0 workloads to use p0 egress-proxy.
        ),
        # NOTE(mattkipps): please add new configuration options to gocode in envoy-config-srv.yaml
    }

def egress_proxy(*, tier, enable_unix_socket):
    if tier == "p0":
        return {
            "tier": "P0",
            "enable_unix_socket": enable_unix_socket,
        }
    else:
        return {
            "tier": "DEFAULT",
            "enable_unix_socket": enable_unix_socket,
        }

# Used by config/kubernetes/networking/public/config.sky
def local_rate_limit(
        max_capacity,
        tokens_per_interval,
        fill_interval_duration,
        unavailable_status_code):
    if (type(max_capacity) != "int" or
        type(tokens_per_interval) != "int" or
        type(fill_interval_duration) != "string" or
        type(unavailable_status_code) != "bool"):
        fail("Unexpected argument type. See definition in https://git.corp.stripe.com/stripe-internal/kube-tools/blob/master/envoy-config-srv/proto/config/config.proto#L288")

    conf = {
        "max_capacity": max_capacity,
        "tokens_per_interval": tokens_per_interval,
        "fill_interval_duration": fill_interval_duration,
    }
    if unavailable_status_code:
        conf.update({"status_unavailable": True})

    return conf

# Used by config/kubernetes/networking/public/config.sky
def mproxy_local_rate_limit(
        max_capacity,
        tokens_per_interval,
        fill_interval_duration):
    if (type(max_capacity) != "int" or
        type(tokens_per_interval) != "int" or
        type(fill_interval_duration) != "string"):
        fail("Unexpected argument type. See definition in https://git.corp.stripe.com/stripe-internal/kube-tools/blob/master/envoy-config-srv/proto/config/config.proto")

    conf = {
        "max_capacity": max_capacity,
        "tokens_per_interval": tokens_per_interval,
        "fill_interval_duration": fill_interval_duration,
    }

    return conf

def access_log_filter(
        enabled,
        success_sample_percent,
        error_sample_percent):
    return {
        "enabled": enabled,
        "success_sample_percent": success_sample_percent,
        "error_sample_percent": error_sample_percent,
    }

def generate_sidecar_version(target, user_overrides):
    cfg = _fallback_sidecar_version(target)
    fallback_version = cfg["version"]
    # update version if it was overriden by break_glass
    cfg = populate_config(cfg, user_overrides, "_update_envoy_config_srv_version")
    cfg["is_version_overriden"] = cfg["version"]!=fallback_version # set bool to indicate if version was overriden
    return cfg

def _default_sidecar_container_config():
    return {
        # Set this to true to use envoy-config-srv-debug-image as container image which contains
        # non-stripped Envoy binary with debug symbols for perf analysis.
        "enable_debug_sidecar_container": False,
    }

def generate_sidecar_container_config(user_overrides):
    cfg = _default_sidecar_container_config()
    return populate_config(cfg, user_overrides, "_update_envoy_config_srv_container_config")

def generate_sidecar_cli_args(target, user_overrides):
    cfg = _default_sidecar_cli_args(target)
    return populate_config(cfg, user_overrides, "_update_envoy_config_srv_cli_args")

def generate_sidecar_config(target, user_overrides):
    cfg = _default_sidecar_config(target)
    return populate_config(cfg, user_overrides, "_update_envoy_config_srv_config")

def apply_user_config_ratchets(config_target, user_overrides):
    # Placeholder for logic/validation of changes to envoy-config-srv-config changes.
    return

# Returns the addr in the format of <consul_domain_name>:<port> for envoy-config-srv to use
# as the --cluster-watch-addr command line argument. This flag determines which envoy-control-srv
# that envoy-config-srv will try to talk to for snapshot data.
def _designated_envoy_control_srv_addr(tier, env):
    if tier in ["A100", "A110", "A120", "A130", "A140", "A150"]:
        return "envoy-control-srv-a100.service.consul:8083"
    elif tier in ["A200"]:
        return "envoy-control-srv-a200.service.consul:8083"
    elif tier in ["A300", "A400"]:
        return "envoy-control-srv-a300.service.consul:8083"

    fail("Unexpected availability tier %s. Unable to determine corresponding envoy-control-srv host set" % tier)

