# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/core/container.sky", "container_port", "resource_requirements", "sidecar_container")
load("config/kubernetes/core/generic.sky", "is_dedicated_msp", "is_shared_msp")
load("config/kubernetes/core/env_var.sky", "default_env_vars")
load("config/kubernetes/core/lifecycle.sky", "render_lifecycle")
load("config/kubernetes/core/probe.sky", "http_probe", "probes")
load("config/kubernetes/core/volume.sky", "host_volume", "render_volume_mount", "volume_mount")
load("config/kubernetes/helpers/constants.sky", "HOST_HEALTH_AGENT_SIDECAR_NAME")
load("config/kubernetes/helpers/images.sky", "image", "sidecar_image")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/conditional.sky", "conditional_plugin")
load("config/kubernetes/plugins/types.sky", "container_plugin", "pod_plugin")
load("config/kubernetes/sidecars/variables.sky", "HOST_HEALTH_AGENT_CONTAINER_FALLBACK_DIGEST", "HOST_HEALTH_AGENT_FALLBACK_ENV")
load("config/kubernetes/sidecars/config_file.sky", "config_file")
load("config/kubernetes/networking/public/consul.sky", "register_service")
load("config/kubernetes/helpers/proto_or_yaml.sky", "Container", "Quantity")
load("config/kubernetes/helpers/security.sky", "mount_credentials_proxy", "mount_host_stripe_ca_certs", "use_credentials_proxy")
load("config/kubernetes/networking/internal/proxyless.sky", "proxyless_service_registration")

def add_proxyless_registration(ctx, registerd_services, k8s_workload_name):
    consul_agent_services = [s["service"] for s in registerd_services]
    proxyless_services = proxyless_service_registration(ctx, consul_agent_services, k8s_workload_name)
    consul_agent_services += proxyless_services
    return [{"service": s} for s in consul_agent_services]

def host_health_agent(ctx, registered_services, k8s_workload_name):
    registered_services_no_plugins = [{"service": s["service"]} for s in registered_services]
    registered_services_no_plugins = add_proxyless_registration(ctx, registered_services_no_plugins, k8s_workload_name)
    return compose_plugins(
        use_credentials_proxy(),
        mount_host_stripe_ca_certs(container_name = HOST_HEALTH_AGENT_SIDECAR_NAME),
        sidecar_container(
            name = HOST_HEALTH_AGENT_SIDECAR_NAME,
            container_image = "stripe/operating-systems/health-agent-container",
            fallback_label = HOST_HEALTH_AGENT_CONTAINER_FALLBACK_DIGEST,
            fallback_env = HOST_HEALTH_AGENT_FALLBACK_ENV,
            plugins = [
                mount_credentials_proxy(),
            ],
            command = [
                "/pay/deploy/gocode/current/host-health-agent/health-agent-bin",
                "--registered-services=" + json.marshal(registered_services_no_plugins),
            ],
            limits = {
                "cpu": Quantity(ctx, string = "0.05"),  # 50 millicores
                "memory": Quantity(ctx, string = "50Mi"),
            },
            requests = { # Set the requests to 0 manually, otherwise k8s will use the values from the limits
                "cpu": Quantity(ctx, string = "0.0"),
                "memory": Quantity(ctx, string = "0Mi"),
            },
        ),
    )
