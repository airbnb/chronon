# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/core/volume.sky", "mount_host_volume", "volume_mount", "render_volume_mount", "mount_pod_volume")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/helpers/security.sky", "use_credentials_proxy", "mount_credentials_proxy")
load("config/kubernetes/plugins/types.sky", "pod_plugin")
load("config/kubernetes/helpers/images.sky", "image")
load("config/kubernetes/core/env_var.sky", "default_env_vars")
load("config/kubernetes/helpers/context.sky", "get_aws_region", "get_env")
load("config/kubernetes/sidecars/variables.sky", "FEATURE_FLAGS_CONTAINER_DIGEST", "FEATURE_FLAGS_CONTAINER_ENV")
load("config/kubernetes/helpers/proto_or_yaml.sky", "Container")
load("config/kubernetes/core/container.sky", "resource_requirements")

# TODO (tonynguyen, tylerterbush) Remove this comment when the FF sidecar
# is fully rolled out
# Leaving the ctx arg in this revert unused because it'll be needed later
# But to make the revert simpler, we'll leave it for now
def use_feature_flags(ctx, use_legacy_host_mounts = False):
    if use_legacy_host_mounts:
        return mount_host_volume(
            "/pay/cache",
            volume_args = {
                "type": "Directory",
                "reason": "Provides cached feature flag and Mongo sharding data.",
            },
        )
    else:
        return compose_plugins(
            use_credentials_proxy(),
            mount_pod_volume("/pay/cache", volume_args = dict(
                reason = "Provides storage for cached feature flag and Mongo sharding data.",
            )),
            pod_plugin(
                _update_pod,
            ),
        )

def _update_pod(ctx, plugin, pod_def):
    if "feature_flags_container" in pod_def:
        return

    container_def = {
        "render": _feature_flags_container,
        "name": "feature-flags-downloader",
        "sidecar_service": "feature-flags-sidecar",
    }
    pod_def["feature_flags_container"] = container_def
    pod_def["containers"].append(container_def)

def _feature_flags_container(ctx, container_def, pod):
    container = struct(**container_def)

    env = get_env(ctx)
    # Feature Flag Cache Downloader uses the environment to determine which S3 bucket to download
    # the feature flags from. Pre-production uses Production feature flags, so we need to override
    # the value here
    if env == "prod" or env == "preprod":
        env = "production"

    return Container(
        ctx,
        name = container.name,
        image = image(ctx, name = "stripe/ruby-infra/feature-flag-cache-downloader", label = FEATURE_FLAGS_CONTAINER_DIGEST, env = FEATURE_FLAGS_CONTAINER_ENV),
        command = [
            "/feature-flag-cache-downloader",
            "-env",
            env,
            "-region",
            get_aws_region(ctx),
            "-use-credentials-proxy",
        ],
        env = default_env_vars(ctx),
        volumeMounts = [
            render_volume_mount(ctx, mount_credentials_proxy()),
            render_volume_mount(ctx, volume_mount("/pay/cache", read_only = False)),
        ],
        resources = resource_requirements(ctx),
    )
