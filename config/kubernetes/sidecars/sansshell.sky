# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/core/probe.sky", "probes", "tcp_probe")
load("config/kubernetes/core/container.sky", "sidecar_container")
load("config/kubernetes/helpers/context.sky", "get_env")
load("config/kubernetes/helpers/security.sky", "mount_host_credentials_proxy", "mount_host_stripe_ca_certs")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/types.sky", "container_plugin")
load("config/kubernetes/sidecars/variables.sky", "SANSSHELL_CONTAINER_FALLBACK_DIGEST", "SANSSHELL_CONTAINER_FALLBACK_ENV")

SIDECAR_NAME = "sansshell-sidecar"

ALLOWED_CLIENTS = {
    "qa": ["forserversbox.global.prod.deploy.stripe.net", "forserversbox.global.qa.deploy.stripe.net"],
    None: ["forserversbox.global.prod.deploy.stripe.net"],  # default
}

def sansshell_sidecar(ctx):
    """
    Sets up a SansShell server (go/sansshell) as a sidecar.
    """
    # tcp/3791 is used at Stripe fork for SansShell server, as defined in:
    # https://git.corp.stripe.com/stripe-private-oss-forks/sansshell/blob/master/Dockerfile.sidecar
    # https://git.corp.stripe.com/stripe-private-oss-forks/sansshell/blob/master/cmd/sanssh/main.go
    # https://git.corp.stripe.com/stripe-private-oss-forks/sansshell/blob/master/cmd/sansshell-server/main.go
    port = 3791

    entrypoint = "/sansshell-sidecar"
    flags = {
        "hostport": ":{}".format(port),
        "credential-source": "service-credentials"
    }

    return compose_plugins(
        mount_host_stripe_ca_certs(container_name = SIDECAR_NAME),
        mount_host_credentials_proxy(container_name = SIDECAR_NAME),
        sidecar_container(
            SIDECAR_NAME,
            command = [entrypoint] + [serialize_flag(k, v) for k, v in flags.items()],
            container_image = "stripe/stripe-private-oss-forks/sansshell",
            fallback_label = SANSSHELL_CONTAINER_FALLBACK_DIGEST,
            fallback_env = SANSSHELL_CONTAINER_FALLBACK_ENV,
            plugins = [
                probes(
                    # p99 latency of GetServiceCertificate occasionally spike over a minute threshold.
                    # Allow 180 seconds before declaring startup a failure.
                    startup = tcp_probe(ctx, port, failureThreshold = 180, periodSeconds = 1),
                    liveness = tcp_probe(ctx, port)),
                add_flags(**{"accept-from": ALLOWED_CLIENTS}),
            ],
            ports = {port: "sansshell"},
        ),
    )

def serialize_flag(k, v):
    if type(v) in ["list", "tuple", "set"]:
        v = ','.join(v)
    return '--{}={}'.format(k, v)

def add_flags(container_name = None, **flags):
    return container_plugin(_add_flag, container_name = container_name, flags = flags)

def _add_flag(ctx, arguments, container_def):
    for flag, value in arguments.flags.items():
        if type(value) == "dict":
            value = value.get(get_env(ctx), value.get(None))
        if value:
            container_def["command"].append(serialize_flag(flag, value))
