# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/core/lifecycle.sky", "pre_stop", "exec_action", "grace_period")
load("config/kubernetes/core/probe.sky", "add_initial_delay_seconds")
load("config/kubernetes/core/volume.sky", "host_volume", "mount_pod_volume", "pod_volume", "volume_mount", "add_host_volume", "add_volume_mount")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/core/generic.sky", "is_dedicated_msp", "is_shared_msp")
load("config/kubernetes/plugins/conditional.sky", "conditional_plugin")
load("config/kubernetes/sidecars/variables.sky", "HEALTH_CONTAINER_FALLBACK_SHA", "HEALTH_CONTAINER_FALLBACK_ENV")
load("config/kubernetes/sidecars/consul.sky", "consul_termination_delay")
load("config/kubernetes/core/container.sky", "sidecar_container")

health_container_name = "health-sidecar"
health_pod_volume_name = "pay-pod-health"
default_request_drain_grace_period_seconds = 60

# This is not a good practice to refer to this from worker.sky. But retaining it
# so that nothing is broken
def pod_health_volume():
    """
    Plugin for defining a pod volume with health status and control files.
    """
    return pod_volume(
        path = "/pay/pod/health",
        name = health_pod_volume_name,
        reason = "Allows the health sidecar to inform service healthchecks.",
    )

def safely_deployed_service(
    ctx,
    request_drain_grace_period_seconds = None,
    consul_propagation_period_seconds = 90,
    container_name = None,
):
    """
    This plugin mutates a pod to deploy without dropping requests.

    It adds a sidecar that combines a few sources of health to synthesize /pay/health/healthcheck.txt.
    It also adds delays to the deploy process to allow for traffic to get drained safely.

    This should soon be the default for all pay-server services, but is currently in development.

    Args:
        request_drain_grace_period_seconds: The amount of time to wait after sending a SIGTERM before sending a
            SIGKILL to the main process. By the start of this period, no new requests will come in. That
            is, this period is only for draining in-flight requests. Defaults to 60s.
        consul_propagation_period_seconds: The amount of time it takes for consul changes to propagate
            through the cluster. This really should not be used, it's only there for testing. Do not
            pass this parameter.

    Returns:
        A plugin that sets the pod for safe deploys.
    """

    if request_drain_grace_period_seconds == None:
        request_drain_grace_period_seconds = default_request_drain_grace_period_seconds

    standard_plugins = compose_plugins(
        # ensures that consul keeps advertising the service while traffic drains
        consul_termination_delay(delay="{}s".format(consul_propagation_period_seconds)),

        # ensures the deploy halts while the service propagates through consul
        add_initial_delay_seconds(probe = "startupProbe", delay = consul_propagation_period_seconds, container_name = container_name),

        # add consul time and grace period because container only gets SIGTERM after
        # the consul propagation period
        grace_period(consul_propagation_period_seconds + request_drain_grace_period_seconds),

    )

    # The Shared MSP plugin is applied in deployment.sky, since the plugin must be run after all containers already exist.
    shared_plugins = compose_plugins(
        pod_health_volume(),
        sidecar_container(
            health_container_name,
            command = [
                "/bin/health-sidecar",
                "--pod-health-dir=/pay/pod/health",
            ],
            container_image = "stripe/compute/health-sidecar-image",
            fallback_label = HEALTH_CONTAINER_FALLBACK_SHA,
            fallback_env = HEALTH_CONTAINER_FALLBACK_ENV,
            plugins = [
                volume_mount("/pay/pod/health", read_only = False),
            ]
        ),

        # This is a duplicate and strange. This is the only place where name is not matching the path
        # Changing this has multiple implications hence retaining the functionality
        volume_mount(
            path = "/pay/health",
            name = "pay-pod-health",
            container_name = container_name,
        )
    )

    dedicated_plugins = compose_plugins(
        pod_health_volume(),
        host_volume("/pay/health",
            type = "Directory",
            reason = "Allows the health sidecar to read the state of the host's stripe-health check."
        ),
        pre_stop(exec_action(ctx, "/bin/sleep", str(consul_propagation_period_seconds)), container_name = container_name),
        sidecar_container(
            health_container_name,
            command = [
                "/bin/health-sidecar",
                "--pod-health-dir=/pay/pod/health",
                "--node-health-dir=/pay/health",
            ],
            container_image = "stripe/compute/health-sidecar-image",
            fallback_label = HEALTH_CONTAINER_FALLBACK_SHA,
            fallback_env = HEALTH_CONTAINER_FALLBACK_ENV,
            plugins = [
                # mount the pod health folder so the sidecar can synthesize health for the app
                volume_mount("/pay/pod/health", read_only = False),
                # mount the node health so the sidecar can factor it into the pod health
                volume_mount("/pay/health", container_name = health_container_name),
            ]
        ),

        # This is a duplicate and strange. This is the only place where name is not matching the path
        # Changing this has multiple implications hence retaining the functionality
        volume_mount(
            path = "/pay/health",
            name = "pay-pod-health",
            container_name = container_name,
        )
    )


    return compose_plugins(
        standard_plugins,
        conditional_plugin(condition = is_shared_msp, plugin = shared_plugins),
        conditional_plugin(condition = is_dedicated_msp, plugin = dedicated_plugins),
    )
