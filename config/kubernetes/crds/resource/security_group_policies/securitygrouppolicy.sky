# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/meta/metadata.sky", "metadata", "render_metadata")
load("config/kubernetes/helpers/msp_shard.sky", "msp_shard")
load("config/kubernetes/plugins/types.sky", "any_resource_plugin")
load("config/kubernetes/helpers/context.sky", "get_env")

_sgp_scheme = {
    "apiVersion": "vpcresources.k8s.aws/v1beta1",
    "kind": "SecurityGroupPolicy",
    "metadata": {},
    "spec": {
        "podSelector": {
            "matchLabels": {},
        },
        "securityGroupNames": {},
    }
}

_spec_scheme = {
    "podSelector": {},
    "securityGroupNames": {},
}

_match_labels_scheme = {
    "matchLabels": {}
}

_default_prod_security_groups = ["cluster", "mspworker", "mproxy-clients"]

def security_group_policy(secgroups = None):
    secgroups = secgroups or []
    return any_resource_plugin(
        _update_resource,
        secgroups=secgroups,
    )

def _update_resource(ctx, arguments, resource_def):
    if "securitygrouppolicy" not in resource_def:
        resource_def["securitygrouppolicy"] = {
            "render": _render_sgp,
            "resource": resource_def,
            "secgroups": {},
        }
    sec_groups = resource_def["securitygrouppolicy"]["secgroups"]
    sec_groups.update([(group, True) for group in arguments.secgroups])

def _render_sgp(ctx, sgp_mapping):
    sgp_mapping = struct(**sgp_mapping)

    sgp_obj = dict(_sgp_scheme)
    spec = dict(_spec_scheme)

    total_sg_count = 0
    if hasattr(sgp_mapping, "secgroups"):
        secgroups = list(sgp_mapping.secgroups)
        for _default_prod_security_group in _default_prod_security_groups:
            if _default_prod_security_group not in secgroups:
                secgroups.append(_default_prod_security_group)

        env_secgroups = []
        if get_env(ctx) == "qa":
            env_secgroups = ['qa-' + secgroup for secgroup in secgroups]
        elif get_env(ctx) == "preprod":
            env_secgroups = ['preprod-' + secgroup for secgroup in secgroups]
        else:
            env_secgroups = secgroups

        spec["securityGroupNames"] = {"groupNames": env_secgroups}
        total_sg_count = len(env_secgroups)

    sgp_obj["metadata"] = render_metadata(
        ctx,
        sgp_mapping.resource["metadata"],
        extra_annotations = {
            "wait-till-completion": "true"
        }
    )

    if total_sg_count > 8:
        fail("You can only set a maximum of 8 Security group per ENI (per pod)")

    match_labels = dict(_match_labels_scheme)
    match_labels["matchLabels"] = {
        "stripe.io/henson-service": sgp_obj["metadata"]["labels"]["stripe.io/henson-service"],
        "stripe.io/henson-git-commit": sgp_obj["metadata"]["labels"]["stripe.io/henson-git-commit"],
    }

    if sgp_obj["metadata"]["labels"].get("stripe.io/app", ""):
        match_labels["matchLabels"].update({
            "stripe.io/app": sgp_obj["metadata"]["labels"]["stripe.io/app"],
        })

    if sgp_obj["metadata"]["labels"].get("stripe.io/service-name", ""):
        match_labels["matchLabels"].update({
            "stripe.io/service-name": sgp_obj["metadata"]["labels"]["stripe.io/service-name"],
        })

    spec["podSelector"] = match_labels
    sgp_obj["spec"] = spec
    return sgp_obj




