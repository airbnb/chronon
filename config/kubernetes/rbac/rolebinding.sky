# DO NOT EDIT: http://go/vendor-skycfg
"""
For the structure of RoleBinding message please refer to
https://github.com/kubernetes/api/blob/v0.24.2/rbac/v1/generated.proto#L132-L144
"""

load("config/kubernetes/helpers/proto_or_yaml.sky", "RoleBinding")
load("config/kubernetes/helpers/roleref_name.sky", "role_ref_helper")
load("config/kubernetes/meta/metadata.sky", "render_metadata")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/types.sky", "rbac_plugin")
load("config/kubernetes/rbac/roleref.sky", "role_ref")
load("config/kubernetes/rbac/subject.sky", "subject")

def role_binding(ctx, *plugins, **kwargs):
    role_binding_mapping = {
        "render": _render_role_binding,
        "type": "rbac",
        "metadata": {},
        "kwargs": {},
    }

    all_plugins = []
    all_plugins.extend(plugins)
    all_plugins.append(role_binding_options(**kwargs))

    plugin = compose_plugins(*all_plugins)
    plugin.update_rbac(ctx, plugin, role_binding_mapping)

    return role_binding_mapping["render"](ctx, role_binding_mapping)

def role_binding_options(**kwargs):
    return rbac_plugin(
        _update_role_binding_options,
        kwargs = kwargs,
    )

def _update_role_binding_options(ctx, plugin, role_binding_def):
    role_binding_def["kwargs"].update(plugin.kwargs)

def _render_role_binding(ctx, role_binding_mapping):
    role_binding = {}

    kwargs = role_binding_mapping["kwargs"]

    if kwargs.get("subjects"):
        if type(kwargs.get("subjects")) != type([]):
            fail("RoleBinding subjects field called with non list value")
        else:
            subject_list = []
            for obj_subject in kwargs.get("subjects"):
                subject_list.append(subject(ctx, obj_subject))
            role_binding["subjects"] = subject_list

    if kwargs.get("roleName"):
        reftype = "Role"

        if kwargs.get("roleType"):
            reftype = kwargs.get("roleType")

        role_binding["roleRef"] = role_ref(ctx, role_ref_helper(kwargs.get("roleName"), reftype))


    role_binding["metadata"] = render_metadata(ctx, struct(**role_binding_mapping["metadata"]))

    return yaml.marshal(RoleBinding(ctx, **role_binding))


