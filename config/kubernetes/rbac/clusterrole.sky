# DO NOT EDIT: http://go/vendor-skycfg
"""
For the structure of ClusterRole message please refer to
https://github.com/kubernetes/api/blob/v0.24.2/rbac/v1/generated.proto#L40-L54
"""

load("config/kubernetes/helpers/proto_or_yaml.sky", "ClusterRole", "AggregationRule", "LabelSelector", "LabelSelectorRequirement")
load("config/kubernetes/meta/metadata.sky", "render_metadata")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/types.sky", "rbac_plugin")
load("config/kubernetes/rbac/policyrule.sky", "policy_rule")

def cluster_role(ctx, *plugins, **kwargs):
    cluster_role_mapping = {
        "render": _render_cluster_role,
        "type": "rbac",
        "metadata": {},
        "kwargs": {},
    }

    all_plugins = []
    all_plugins.extend(plugins)
    all_plugins.append(cluster_role_options(**kwargs))

    plugin = compose_plugins(*all_plugins)
    plugin.update_rbac(ctx, plugin, cluster_role_mapping)

    return cluster_role_mapping["render"](ctx, cluster_role_mapping)

def cluster_role_options(**kwargs):
    return rbac_plugin(
        _update_cluster_role_options,
        kwargs = kwargs,
    )

def _update_cluster_role_options(ctx, plugin, cluster_role_def):
    cluster_role_def["kwargs"].update(plugin.kwargs)

def _render_cluster_role(ctx, cluster_role_mapping):
    cluster_role_mapping["metadata"] = struct(**cluster_role_mapping["metadata"])
    cluster_role_mapping = struct(**cluster_role_mapping)

    kargs = cluster_role_mapping.kwargs
    obj_rule_list = []
    if kargs.get("rules"):
            if type(kargs.get("rules")) == type([]):
                for rule in kargs.get("rules"):
                    obj_rule = policy_rule(ctx, rule)
                    obj_rule_list.append(obj_rule)

            else:
                fail("ClusterRole rules field called with non list value")

    obj_aggregation_rule = None
    if kargs.get("aggregationRule"):
        obj_aggregation_rule = AggregationRule(ctx)

        # Nested map must be turned to struct before it can be utilized
        agg_rule = kargs.get("aggregationRule")

        if agg_rule.get("clusterRoleSelectors"):
            if type(agg_rule.get("clusterRoleSelectors")) == type([]):
                obj_cluster_role_selector_list = []

                for role_selector in agg_rule.get("clusterRoleSelectors"):
                    obj_cluster_role_selector = _label_selector(ctx, role_selector)
                    obj_cluster_role_selector_list.append(obj_cluster_role_selector)

                obj_aggregation_rule["clusterRoleSelectors"] = obj_cluster_role_selector_list
            else:
                fail("ClusterRole aggregationRule.clusterRoleSelectors field called with non list value")



    obj_cluster_role = ClusterRole(ctx)
    obj_cluster_role["metadata"] = render_metadata(ctx, cluster_role_mapping.metadata)
    if len(obj_rule_list) > 0:
        obj_cluster_role["rules"] = obj_rule_list
    if obj_aggregation_rule != None:
        obj_cluster_role["aggregationRule"] = obj_aggregation_rule
    return yaml.marshal(obj_cluster_role)

def _label_selector(ctx, object):
    if object.get("matchLabels") and type(object.get("matchLabels")) != type({}):  # is a map
        fail("LabelSelector matchLabels field called with non map value")

    if object.get("matchExpressions"):
        if type(object.get("matchExpressions")) != type([]):  # is a list
            fail("LabelSelector matchExpressions field called with non list value")
        else:
            expressions = []
            for expression in object.get("matchExpressions"):
                expressions.append(_label_selector_requirement(ctx, expression))
            object["matchExpressions"] = expressions

    return LabelSelector(ctx, **object)

def _label_selector_requirement(ctx, requirement):
    if requirement.get("key") and type(requirement.get("key")) != "string":
        fail("LabelSelectorRequirement key field called with non string value")

    if requirement.get("operator") and type(requirement.get("operator")) != "string":
        fail("LabelSelectorRequirement operator field called with non string value")

    if requirement.get("values") and type(requirement.get("values")) != "string":
        fail("LabelSelectorRequirement values field called with non string value")

    return LabelSelectorRequirement(ctx, ** requirement)
