# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/crds/keda/scaledobject.sky", "cpu_trigger", "memory_trigger", "scaled_object", scaled_object_scale_policy = "scale_policy")

def horizontal_pod_autoscaler(
        min_replicas = None,
        cpu_utilization_percent = None,
        scale_up_scaling_policies = None,
        scale_up_select_policy = None,
        scale_up_stabilization_window_seconds = None,
        scale_down_scaling_policies = None,
        scale_down_select_policy = None,
        scale_down_stabilization_window_seconds = None,
        memory_utilization_percent = None,
):
    """
    Returns a plugin that creates an ScaledObject to be deployed with a deployment.

    This plugin wraps around ScaledObject for legacy reasons. All HPAs are now created through KEDA.

    All parameters are optional and any parameter not is given an environment appropriate default in the following methods:
        _default_min_replicas
        _default_cpu_utilization_threshold_percent
        _default_scale_up_behavior
        _default_scale_down_behavior

    Defaults are specified in those methods rather than here in order to allow service owners to override parameters
    they choose and then leave the others to the environment specific default


    Args:
        min_replicas: Min replica count for the deployment that the HPA can scale to. Must be greater than 0. If not specified, will
            use environment default based on the max replica count. Default value in QA is 1 if deployment replica count is 2, and 2 for
            3 or greater replicas. Default in Preprod/Prod is Max - 1 Pod or 90% of Max Replicas.

        cpu_utilization_percent: Average Percentage of cpu utilization at which going above this threshold should cause a scaling event.
            Default value in QA/Preprod/Prod is 30% average utilization .

        scale_up_scaling_policies: Defines how fast to scale up and many pods to scale up. Generated by scale_policy helper below
            Default policy in QA is 1 pod or 10% of replicas, whichever is greater over a 60 second period based on the default of "Max"
            for scale_up_select_policy. Default in Preprod/Prod is 3 Pods or 10% of Replicas.

        scale_up_select_policy: Defines which scaling policy to select. Global default is Max, meaning the policy that scales fastest is used.

        scale_up_stabilization_window_seconds: Size of rolling window used used for scaling decisions. The HPA will gather recomendations over
            this rolling window period and pick the smallest recommendation in the period and scales to that. This is to reduce scaling
            false positives. Default value is 60 seconds for all environments.

        scale_down_scaling_policies: Defines how fast to scale down and many pods to scale down. Generated by scale_policy helper below
            Default policy in QA is 1 pod or 10% of replicas, whichever is smaller over a 60 second period based on the default of "Min"
            for scale_down_select_policy is 3 Pods or 10% of Replicas.

        scale_down_select_policy: Defines which scaling policy to select. Global default is Min, meaning the policy that scales down slowest is used.

        scale_down_stabilization_window_seconds: Size of rolling window used used for scaling decisions. The HPA will gather recomendations over
            this rolling window period and pick the largest replica size recommendation in the period and scales to that. This is to reduce scaling
            false positives. Default value is 300 seconds for all environments.

        memory_utilization_percent: Average Percentage of memory utilization at which going above this threshold should cause a scaling event.
            Default value is None, thus memory based scaling is disabled by default.

    Returns:
        A plugin to add a HPA to a resource
    """
    return scaled_object(
        min_replicas = min_replicas,
        cpu_trigger = cpu_trigger(value = cpu_utilization_percent),
        memory_trigger = memory_trigger(value = memory_utilization_percent),
        scale_up_scaling_policies = scale_up_scaling_policies,
        scale_up_select_policy = scale_up_select_policy,
        scale_up_stabilization_window_seconds = scale_up_stabilization_window_seconds,
        scale_down_scaling_policies = scale_down_scaling_policies,
        scale_down_select_policy = scale_down_select_policy,
        scale_down_stabilization_window_seconds = scale_down_stabilization_window_seconds,
    )

def scale_policy(policy_type, value, period_seconds):
    """
    Returns a scale policy.
    Args:
        policy_type: Whether this is a policy for scaling by absolute Pod count or by Percentage. Accepted values are "Pods" or "Percent"
        value: Amount of change permitted by the policy. If policy is "Pods", this is number of pods. If Policy is "Percentage", it is percentage of
            replica count to scale up.
        period_seconds: the window of time for which the policy should hold true.
    Returns:
        A scale policy to use in the HPA plugin
    """

    policy = {
        "type": policy_type,
        "value": value,
        "period_seconds": period_seconds,
    }

    return policy
