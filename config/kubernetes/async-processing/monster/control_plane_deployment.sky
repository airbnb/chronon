# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/async-processing/monster/service_deployments/api.sky", "monster_api_deployment")
load("config/kubernetes/async-processing/monster/service_deployments/fanout.sky", "monster_fanout_deployment")
load("config/kubernetes/async-processing/monster/service_deployments/feeder.sky", "monster_feeder_deployment")
load("config/kubernetes/async-processing/monster/service_deployments/express.sky", "monster_express_deployment")
load("config/kubernetes/async-processing/monster/service_deployments/sweeper.sky", "monster_sweeper_deployment")

# Generate the deployment for a given config for various control plane services
def monster_control_plane_deployment(ctx, config):
    """ Generates a k8s deployment for a given control plane service

    Args:
        ctx: The skycfg context variable, see http://go/disky
        config: shared metadata data structure provided by monster/config.sky

    Returns:
        A k8s deployment, as defined in config/kubernetes/apps/deployment.sky
    """

    if config.monster_service == "express":
        return monster_express_deployment(ctx, config.monster_isolation_group, config)
    elif config.monster_service in ["fanout", "fanout-retry"]:
        return monster_fanout_deployment(ctx, config)
    elif config.monster_service == "feeder":
        return monster_feeder_deployment(ctx, config)
    elif config.monster_service == "sweeper":
        return monster_sweeper_deployment(ctx, config.monster_isolation_group, config)
    elif config.monster_service == "api":
        return monster_api_deployment(ctx, config)
    else:
        # Unlisted services are unexpected
        return None
