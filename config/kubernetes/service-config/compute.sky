# DO NOT EDIT: http://go/vendor-skycfg
"""
Helper functions for extracting information from the Henson and Centralized Service Configuration context.

The context is the single `ctx` argument passed to the `main` function when
deploying a Henson service with Skycfg. It contains a dictionary of data that can be
useful when defining a workload. These functions provide a consistent interface for
accessing that data.
"""

def get_priority_tier_config(ctx):
    get_priority_tier = ctx.vars.get("service.config.get_priority_tiers_fn")
    return json.decode(get_priority_tier())

def get_priority_tier_config_for_role(ctx, role):
    get_priority_tier_for_role = ctx.vars.get("service.config.get_priority_tiers_for_role_fn")
    return json.decode(get_priority_tier_for_role(role))

def get_merged_compute_v2_role_config(ctx, role, priority_tier = None):
    get_merged_compute_config = ctx.vars.get("service.config.get_merged_compute_v2_merge_fn")
    return json.decode(
        get_merged_compute_config(
            ctx.vars.get("stripe.environment"), ctx.vars.get("stripe.cluster"), role=role, priority_tier=priority_tier))

def get_merged_compute_v2_config(ctx, priority_tier = None):
    get_merged_compute_config = ctx.vars.get("service.config.get_merged_compute_v2_merge_fn")
    return json.decode(
        get_merged_compute_config(
            ctx.vars.get("stripe.environment"), ctx.vars.get("stripe.cluster"), priority_tier=priority_tier))

# legacy functions with a dependency on service config
pb = proto.package("com.stripe.gocode.service_config")
def get_merged_compute_v2_config_legacy(ctx, priority_tier = None):
    compute_config = ctx.vars.get("service.config.compute_v2")
    result = pb.ComputeV2()
    proto.merge(result, _flatten_compute_v2(ctx, compute_config))
    return result

def _flatten_compute_v2(ctx, compute_config):
    result = pb.ComputeV2()
    proto.merge(result, compute_config)

    attrs = dir(result)
    for field in attrs:
        if not hasattr(compute_config, field):
            continue
        field_val = getattr(compute_config, field)
        if not hasattr(field_val, "overrides"):
            continue
        for override in field_val.overrides:
            if _filter_matches(ctx, override.filter):
                proto.merge(getattr(result, field), getattr(override, field))
        field_val.overrides.clear()

    return compute_config

def _filter_matches(ctx, filter, priority_tier = None):
    if len(filter.environments) and _get_env_constant(ctx) not in list(filter.environments):
        return False
    if len(filter.clusters) and _get_cluster_constant(ctx) not in list(filter.clusters):
        return False
    if priority_tier:
        fail("priority tiers are not supported in compute v2 at this time")
    return True

def _get_env_constant(ctx):
    return getattr(pb.Environment, ctx.vars.get("stripe.environment").upper())

def _get_cluster_constant(ctx):
    return getattr(pb.Cluster, ctx.vars.get("stripe.cluster").upper())
