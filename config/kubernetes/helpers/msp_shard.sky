# DO NOT EDIT: http://go/vendor-skycfg
"""
Plugins for annotating which shard a pod will be deployed to.
"""

load("config/kubernetes/core/generic.sky", "is_dedicated_msp", "is_shared_msp")
load("config/kubernetes/helpers/context.sky", "get_target_shard", "get_env", "get_cluster")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/conditional.sky", "conditional_plugin")
load("config/kubernetes/plugins/types.sky", "any_resource_plugin")
load("config/kubernetes/helpers/shards_list.sky", "ENV_CLUSTER_SHARDS", "BINPACKING_STATE", "SHARD_TYPE", "SHARD_STATE")

# TODO(dfradette): remove this annotation once Amp has been changed to use `stripe.io/msp-shard`
MSP_CLUSTER_ANNOTATION = "stripe.io/msp-cluster"

MSP_SHARD_ANNOTATION = "stripe.io/msp-shard"

ACCOUNT_NAME_TO_ID = {
    "mainland": "030465607062",
    "mainland2": "108124432883",
    "msp-shared-all-pink": "213343938293",
}

def all_available_shards_info(ctx, shared_msp=None, shard_states=None, shard_types=None, binpacking_states=None, _override_shards_map=None):
    """
    Returns all available shards info based on the current Henson context.

    Args:
      ctx: The Henson context.
      shared_msp: If specified, only return shards that do (True) or don't (False) support Shared MSP.
      shard_states: If specified, only return shards that have one of the specified state.
      shard_types: If specified, only return shards that have one of the specified type.
      binpacking_states: If specified, only return shards that have one of the specified binpacking state.
      _override_shards_map: Only used for tests, overrides the default shard map to allow testing for custom shard combinations
    """
    clusters = ENV_CLUSTER_SHARDS.get(get_env(ctx), {})
    # Only used in tests to provide a custom list of shards
    if _override_shards_map != None:
        clusters = _override_shards_map.get(get_env(ctx), {})

    shards = clusters.get(get_cluster(ctx), [])
    if shared_msp != None:
        shards = [s for s in shards if s.shared_msp == shared_msp]
    if shard_states != None:
        shards = [s for s in shards if s.shard_state in shard_states]
    if shard_types != None:
        shards = [s for s in shards if s.shard_type in shard_types]
    if binpacking_states != None:
        shards = [s for s in shards if s.binpacking_state in binpacking_states]
    return shards

def all_available_shards(ctx, shared_msp=None, shard_states=None, shard_types=None, binpacking_states=None, _override_shards_map=None):
    return [s.name for s in all_available_shards_info(ctx, shared_msp, shard_states, shard_types, binpacking_states, _override_shards_map )]


def all_canary_shards_info(ctx, _override_shards_map=None):
    """
    Returns all GA canary shards information based on the current Henson context.
    """
    return all_available_shards_info(
        ctx=ctx,
        shard_states=SHARD_STATE.GA,
        shard_types=[SHARD_TYPE.CANARY],
        _override_shards_map=_override_shards_map,
    )

def all_canary_shards(ctx, _override_shards_map=None):
    """
    Returns all GA canary shards names based on the current Henson context.
    """
    return all_available_shards(
        ctx=ctx,
        shard_states=SHARD_STATE.GA,
        shard_types=[SHARD_TYPE.CANARY],
        _override_shards_map=_override_shards_map,
    )

def all_ga_shards(ctx, shard_types=None, _override_shards_map=None):
    """
    Returns all GA shards based on the current Henson context.

    Args:
      ctx: The Henson context.
      shard_types: If specified, only return shards that have one of the specified type.
      _override_shards_map: Only used for tests, overrides the default shard map to allow testing for custom shard combinations
    """
    return all_available_shards(
        ctx=ctx,
        shard_states=SHARD_STATE.GA,
        shard_types=shard_types,
        _override_shards_map=_override_shards_map,
    )

def all_binpacking_enabled_shards(ctx, shared_msp=None, shard_states=None, shard_types=None, _override_shards_map=None):
    """
    Returns all shards that have binpacking enabled based on the current Henson context.

    Args:
      ctx: The Henson context.
      shared_msp: If specified, only return shards that do (True) or don't (False) support Shared MSP.
      shard_states: If specified, only return shards that have one of the specified state.
      shard_types: If specified, only return shards that have one of the specified type.
      _override_shards_map: Only used for tests, overrides the default shard map to allow testing for custom shard combinations
    """
    return all_available_shards(
        ctx=ctx,
        shared_msp=shared_msp,
        shard_states=shard_states,
        shard_types=shard_types,
        binpacking_states=[BINPACKING_STATE.ENABLED],
        _override_shards_map=_override_shards_map,
    )


def account_for_shard(ctx, shard):
    """
    Returns the AWS account that the shard is running in.
    Args:
      ctx: The Henson context.
      shard: The name of the MSP shard.
    """
    clusters = ENV_CLUSTER_SHARDS.get(get_env(ctx), {})
    shards = clusters.get(get_cluster(ctx), [])
    for s in shards:
        if s.name == shard:
            return s.account

    fail("Shard not found: {}".format(shard))


def all_available_shards_with_cron(ctx):
    """
    Returns all available shards based on the current Henson context in which cron is supported.
    Args:
      ctx: The Henson context.
    """
    clusters = ENV_CLUSTER_SHARDS.get(get_env(ctx), {})
    shards = clusters.get(get_cluster(ctx), [])
    return [s.name for s in shards if s.cron == True]

def msp_shard(shard):
    """
    Specify the MSP shard that the pod will be deployed to. Will error if the specified
    shard is not supported in the given context.
    Args:
        shard: The name of the MSP shard.
    """
    return any_resource_plugin(_set_msp_shard, shard = shard)

def _set_msp_shard(ctx, plugin, resource_def):
    shard = getattr(plugin, "shard")

    if shard not in all_available_shards(ctx):
        fail(
            "`{shard}` is not available in {env}-{cluster}".format(
            shard = shard,
            env = get_env(ctx),
            cluster = get_cluster(ctx),
        ))

    resource_def["metadata"]["annotations"].update(
            _shard_annotations(shard),
    )

def autoset_shard():
    """
    Returns a plugin that will automatically set the MSP
    target resource's shard to an appropriate selection.
        IMPORTANT: Shared MSP deployments of Horizon
    WILL NOT BE PROPERLY IDENTIFIED AS SHARED MSP via is_shared_msp
    due to a bug where Horizon sets their deployment context for
    Shared MSP deploys to shared_msp=False.
    Use autoset_shard_shared_msp instead in this case.
    """
    return compose_plugins(
        conditional_plugin(
            condition=is_shared_msp,
            plugin=autoset_shard_shared_msp(),
        ),
        conditional_plugin(
            condition=is_dedicated_msp,
            # legacy dedicated MSP services are fixed to run on kubemaster
            # for the time being
            plugin=msp_shard("kubemaster"),
        ),
    )

def autoset_shard_shared_msp():
    """
    Returns a plugin which will automatically set the MSP
    target resource's shard based on Henson context in
    Shared MSP only.
    This should ONLY be called if we are already known to be
    running in Shared MSP. Otherwise, utilize the
    autoset_shard() plugin which conditionally checks the
    Shared vs Dedicated state in the resource context.
    """
    return any_resource_plugin(_shard_from_henson)


def _shard_from_henson(ctx, plugin, resource_def):
    """
    Set the MSP target resource's shard to the shard provided by henson. Henson
    will factor in the deployment's cluster and env, load balancing
    considerations, as well as any explicit user overwrites to provide
    a shard that makes sense.
    """
    shard = get_target_shard(ctx)
    resource_def["metadata"]["annotations"].update(
        _shard_annotations(shard)
    )


def _shard_annotations(shard):
    return {
        MSP_CLUSTER_ANNOTATION: shard,
        MSP_SHARD_ANNOTATION: shard,
    }


def get_account_for_shard(ctx, shard):
    local_shards = ENV_CLUSTER_SHARDS.get(get_env(ctx), {}).get(get_cluster(ctx), [])
    for s in local_shards:
        if s.name == shard:
            return s.account
    return "mainland"


def get_account_id(ctx, account_name):
    return ACCOUNT_NAME_TO_ID.get(account_name)


def maybe_enable_security_group_policy(ctx, shard_name):
    """
    Enable Security Group Policy if this shard uses the VPC CNI
    for non-binpacked mspworkers. This function is only needed for
    multi-shard services, since henson can't properly setup feature-flags
    for them.
    """
    new_ctx = struct(vars = dict(ctx.vars))

    local_shards = ENV_CLUSTER_SHARDS.get(get_env(ctx), {}).get(get_cluster(ctx), [])
    for s in local_shards:
        if s.name == shard_name:
            if s.account != "mainland":
                new_ctx.vars["msp.use_sgp"] = True
            break

    return new_ctx
