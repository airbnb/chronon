# DO NOT EDIT: http://go/vendor-skycfg
"""
Plugins for running cron jobs on Kubernetes.

Cron jobs for pay-server should use pay_server_cronjob(): see http://go/pay-server-cron-skycfg
Jobs in other repos can use the `cronjob` entrypoint, possibly with these plugins, to define
scheduled batch workloads. All cronjobs must specify a cron tier: http://go/add-cron-tier
"""

load("config/kubernetes/core/env_var.sky", "container_env_vars")
load("config/kubernetes/core/volume.sky", "mount_host_volume")
load("config/kubernetes/meta/metadata.sky", "iam_role")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/types.sky", "cronjob_plugin")

DEFAULT_SUCCESSFUL_JOB_HISTORY_LIMIT = 6
DEFAULT_FAILED_JOB_HISTORY_LIMIT = 6

# TODO: need to find a way to make this not be gocode-specific
_config_path = "/pay/deploy/gocode/current/config/kubernetes/configs/aws_credentials"
_socket_path = "/run/kube-iam/kube-iam.sock"

def cron_iam(role_prefix, container_name = None):
    """
    Configures a cron job to use a non-host IAM role.

    This only works correctly for jobs in the `kubeacronnoegress` namespace. Jobs in that namespace
    by default do not have access to the host's AWS credentials, but can be annotated to use a
    cron-specific IAM role. This plugin will configure the AWS SDK in the pod to get credentials for
    that role from the kube-iam-server running on the host.

    Args:
        role_prefix: The name of the IAM role the pod should use, without the cluster or environment
            segments.
        container_name: Optional name of the container that needs to access AWS APIs. Defaults to the
            main container.

    Returns:
        A plugin that configures a cron job to use the given IAM role.
    """
    return compose_plugins(
        iam_role(prefix = role_prefix, host_credentials = False),
        container_env_vars(
            {
                "AWS_CONFIG_FILE": _config_path,
                "AWS_SDK_LOAD_CONFIG": "true",
            },
            container_name = container_name,
        ),
        mount_host_volume(_socket_path, container_name, volume_args = {
            "type": "Socket",
            "reason": "Provides IAM credentials to the pod for accessing AWS services.",
        }),
    )
