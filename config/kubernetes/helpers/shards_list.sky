# DO NOT EDIT: http://go/vendor-skycfg
SHARD_TYPE = struct(
    TEST="TEST",
    SHARED_MSP="SHARED_MSP",
    DEDICATED_MSP="DEDICATED_MSP",
    CANARY="CANARY",
)

SHARD_STATE = struct(
    PROVISIONING="PROVISIONING",
    RELEASE_CANDIDATE="RELEASE_CANDIDATE",
    GA="GA",
    DECOMMISSIONING="DECOMMISSIONING",
)

BINPACKING_STATE = struct(
    ENABLED="ENABLED",
    DISABLED="DISABLED",
)

def shard(name, *, shared_msp=True, cron=False, account="mainland", shard_type=SHARD_TYPE.SHARED_MSP, shard_state=SHARD_STATE.GA, binpacking_state=BINPACKING_STATE.DISABLED, preferred_availability_tiers = ["A100", "A200", "A300", "A400"]):
    return struct(name=name, shared_msp=shared_msp, cron=cron, account=account, shard_type=shard_type, shard_state=shard_state, binpacking_state=binpacking_state, preferred_availability_tiers=preferred_availability_tiers)

def get_shards_from_context(ctx):
    """
    Returns the list of all available shards from the context.

    Only the shards for the current environment and region are returned.

    Args:
        ctx: The Henson context.
    Returns:
        A list of `shard` objects.
    """
    ctx_shards = json.unmarshal(ctx.vars["msp.all_available_shards"])
    shards = []
    for name, shard_dict in ctx_shards.items():
        # In config-srv "all tiers" is represented as None, but in skycfg we need the full tier list instead.
        tiers = shard_dict['preferred_availability_tiers'] if shard_dict['preferred_availability_tiers'] else ["A100", "A200", "A300", "A400"]
        shards.append(shard(
            name,
            account=shard_dict["account"],
            cron=shard_dict["supports_cron"],
            shard_type=shard_dict["shard_type"],
            shard_state=shard_dict["shard_state"],
            binpacking_state="ENABLED" if shard_dict["supports_binpacking"] == "true" else "DISABLED",
            preferred_availability_tiers=tiers,
        ))
    return shards

# Fake shards map to be used in tests. This allows us to decouple test cases from real shards
MOCK_SHARDS_MAP = {
    "qa": {
        "northwest": [
            shard("shard1", shared_msp=False, cron=True, shard_type=SHARD_TYPE.DEDICATED_MSP),
            shard("shard2", binpacking_state=BINPACKING_STATE.ENABLED),
            shard("shard3", cron=True, shard_type=SHARD_TYPE.CANARY, binpacking_state=BINPACKING_STATE.ENABLED),
            shard("shard4", account="mainland2", shard_type=SHARD_TYPE.TEST),
            shard("shard5", account="mainland3", shard_state=SHARD_STATE.PROVISIONING, binpacking_state=BINPACKING_STATE.ENABLED),
        ],
    },
}
