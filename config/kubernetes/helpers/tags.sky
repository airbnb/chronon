# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/helpers/context.sky", "get_henson_git_commit", "get_henson_repo", "get_name")
load("config/kubernetes/helpers/version.sky", "SKYCFG_VERSION", "SKYCFG_DIGEST")

def service_selectors(name, *, function_name = None, blue_green_color = None):
    """Returns a dict of default selectors."""

    # Be very careful updating this function, changes here will break existing deploys
    selectors = {
        "stripe.io/service-name": name,
    }
    selectors.update(function_name_selectors(function_name))
    selectors.update(blue_green_color_selectors(blue_green_color))
    return selectors

def function_name_selectors(function_name):
    """Returns a dict containing a label with the rollout stage skycfg function name."""
    if function_name == None:
        return {}
    return {
        "stripe.io/rollout-stage-skycfg-function-name": function_name,
    }

def blue_green_color_selectors(blue_green_color):
    """Returns a dict of blue-green enabling selectors."""
    if blue_green_color == None:
        return {}
    return {
        "stripe.io/service-blue-green-color": blue_green_color,
    }

def default_labels(ctx, name, owner, *, function_name = None, blue_green_color = None):
    """Returns a dict of default labels."""
    selectors = service_selectors(
        name,
        function_name = function_name,
        blue_green_color = blue_green_color,
    )

    # in many cases, stripe.io/service-name will have the Henson service name, but
    # it doesn't have to. especially for services that have multiple deployments,
    # stripe.io/service-name must be different for each one, so we want to use this
    # label to group them all together and present them in Amp.
    selectors["stripe.io/henson-service"] = get_name(ctx)

    ## Include the service's owning team name as a label.
    selectors["stripe.io/service-owner"] = owner

    selectors["stripe.io/skycfg-version"] = SKYCFG_VERSION
    # SHA256 is 64 chars long, but labels have a 63 max length.
    # We don't really care about it being unique, so the first 16 chars seems enough.
    selectors["stripe.io/skycfg-digest"] = SKYCFG_DIGEST[:16]

    return selectors

def default_annotations(ctx, name, owner):
    return {
        "stripe.io/service-owner": owner,
        "stripe.io/service-repo": get_henson_repo(ctx),
        "stripe.io/service-version": get_henson_git_commit(ctx),
    }
