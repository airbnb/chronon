# DO NOT EDIT: http://go/vendor-skycfg

# DO NOT MODIFY: Autogenerated from puppet
load("config/kubernetes/helpers/context.sky", "get_cluster", "get_env")

# 1. List of supported instance types in MSP. Used to ensure the instance types MSP uses are configured properly.

SUPPORTED_MSP_INSTANCE_TYPES = [
  "c5.12xlarge",
  "c5.18xlarge",
  "c5.24xlarge",
  "c5.2xlarge",
  "c5.4xlarge",
  "c5.9xlarge",
  "c5.xlarge",
  "c5d.12xlarge",
  "c5d.18xlarge",
  "c5d.24xlarge",
  "c5d.2xlarge",
  "c5d.4xlarge",
  "c5d.9xlarge",
  "c5d.xlarge",
  "c5n.18xlarge",
  "c5n.2xlarge",
  "c5n.4xlarge",
  "c5n.9xlarge",
  "c5n.xlarge",
  "c6a.12xlarge",
  "c6g.12xlarge",
  "c6g.16xlarge",
  "c6g.2xlarge",
  "c6g.4xlarge",
  "c6g.8xlarge",
  "c6g.xlarge",
  "c6i.12xlarge",
  "c6i.16xlarge",
  "c6i.24xlarge",
  "c6i.2xlarge",
  "c6i.4xlarge",
  "c6i.8xlarge",
  "c6i.large",
  "c6i.xlarge",
  "c7a.2xlarge",
  "c7a.4xlarge",
  "c7a.xlarge",
  "c7g.12xlarge",
  "c7g.16xlarge",
  "c7g.2xlarge",
  "c7g.4xlarge",
  "c7g.8xlarge",
  "c7g.xlarge",
  "g4dn.xlarge",
  "i3.2xlarge",
  "i3.4xlarge",
  "i3.xlarge",
  "i3en.2xlarge",
  "i3en.3xlarge",
  "i3en.xlarge",
  "m5.12xlarge",
  "m5.16xlarge",
  "m5.24xlarge",
  "m5.2xlarge",
  "m5.4xlarge",
  "m5.8xlarge",
  "m5.large",
  "m5.metal",
  "m5.xlarge",
  "m5d.12xlarge",
  "m5d.16xlarge",
  "m5d.24xlarge",
  "m5d.2xlarge",
  "m5d.4xlarge",
  "m5d.8xlarge",
  "m5d.large",
  "m5d.xlarge",
  "m6a.12xlarge",
  "m6a.16xlarge",
  "m6a.24xlarge",
  "m6a.xlarge",
  "m6g.12xlarge",
  "m6g.16xlarge",
  "m6g.2xlarge",
  "m6g.4xlarge",
  "m6g.8xlarge",
  "m6g.large",
  "m6g.xlarge",
  "m6i.12xlarge",
  "m6i.16xlarge",
  "m6i.24xlarge",
  "m6i.2xlarge",
  "m6i.4xlarge",
  "m6i.8xlarge",
  "m6i.large",
  "m6i.xlarge",
  "m7a.12xlarge",
  "m7a.2xlarge",
  "m7a.large",
  "m7a.xlarge",
  "m7g.12xlarge",
  "m7g.16xlarge",
  "m7g.2xlarge",
  "m7g.4xlarge",
  "m7g.8xlarge",
  "m7g.large",
  "m7g.metal",
  "m7g.xlarge",
  "m7i.12xlarge",
  "r5.12xlarge",
  "r5.16xlarge",
  "r5.24xlarge",
  "r5.2xlarge",
  "r5.4xlarge",
  "r5.8xlarge",
  "r5.large",
  "r5.xlarge",
  "r5d.12xlarge",
  "r5d.16xlarge",
  "r5d.24xlarge",
  "r5d.2xlarge",
  "r5d.4xlarge",
  "r5d.8xlarge",
  "r5d.large",
  "r5d.xlarge",
  "r6g.12xlarge",
  "r6g.16xlarge",
  "r6g.2xlarge",
  "r6g.4xlarge",
  "r6g.8xlarge",
  "r6g.large",
  "r6g.xlarge",
  "r6i.12xlarge",
  "r6i.16xlarge",
  "r6i.24xlarge",
  "r6i.2xlarge",
  "r6i.4xlarge",
  "r6i.8xlarge",
  "r6i.large",
  "r6i.xlarge",
  "r7g.12xlarge",
  "r7g.16xlarge",
  "r7g.2xlarge",
  "r7g.4xlarge",
  "r7g.8xlarge",
  "r7g.large",
  "r7g.xlarge",
  "r7gd.2xlarge"
]

# 2. AWS_INSTANCE_SIZES contains vCPU, memory, and storage information for all EC2 instance
# types, even those not supported currently in MSP. When instance_storage_gib is 0, that instance
# type has EBS storage only.

_AWS_INSTANCE_SIZES = {
  "c5.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 98304,
    "vcpu": 48
  },
  "c5.18xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 147456,
    "vcpu": 72
  },
  "c5.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 96
  },
  "c5.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 8
  },
  "c5.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 16
  },
  "c5.9xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 73728,
    "vcpu": 36
  },
  "c5.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 4
  },
  "c5d.12xlarge": {
    "instance_storage_gib": 1800,
    "memory_mib": 98304,
    "vcpu": 48
  },
  "c5d.18xlarge": {
    "instance_storage_gib": 1800,
    "memory_mib": 147456,
    "vcpu": 72
  },
  "c5d.24xlarge": {
    "instance_storage_gib": 3600,
    "memory_mib": 196608,
    "vcpu": 96
  },
  "c5d.2xlarge": {
    "instance_storage_gib": 200,
    "memory_mib": 16384,
    "vcpu": 8
  },
  "c5d.4xlarge": {
    "instance_storage_gib": 400,
    "memory_mib": 32768,
    "vcpu": 16
  },
  "c5d.9xlarge": {
    "instance_storage_gib": 900,
    "memory_mib": 73728,
    "vcpu": 36
  },
  "c5d.xlarge": {
    "instance_storage_gib": 100,
    "memory_mib": 8192,
    "vcpu": 4
  },
  "c5n.18xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 72
  },
  "c5n.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 21504,
    "vcpu": 8
  },
  "c5n.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 43008,
    "vcpu": 16
  },
  "c5n.9xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 98304,
    "vcpu": 36
  },
  "c5n.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 10752,
    "vcpu": 4
  },
  "c6a.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 98304,
    "vcpu": 48
  },
  "c6g.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 98304,
    "vcpu": 48
  },
  "c6g.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 64
  },
  "c6g.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 8
  },
  "c6g.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 16
  },
  "c6g.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 32
  },
  "c6g.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 4
  },
  "c6i.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 98304,
    "vcpu": 48
  },
  "c6i.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 64
  },
  "c6i.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 96
  },
  "c6i.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 8
  },
  "c6i.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 16
  },
  "c6i.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 32
  },
  "c6i.large": {
    "instance_storage_gib": 0,
    "memory_mib": 4096,
    "vcpu": 2
  },
  "c6i.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 4
  },
  "c7a.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 8
  },
  "c7a.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 16
  },
  "c7a.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 4
  },
  "c7g.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 98304,
    "vcpu": 48
  },
  "c7g.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 64
  },
  "c7g.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 8
  },
  "c7g.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 16
  },
  "c7g.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 32
  },
  "c7g.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 4
  },
  "g4dn.xlarge": {
    "instance_storage_gib": 125,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "i3.2xlarge": {
    "instance_storage_gib": 1900,
    "memory_mib": 62464,
    "vcpu": 8
  },
  "i3.4xlarge": {
    "instance_storage_gib": 3800,
    "memory_mib": 124928,
    "vcpu": 16
  },
  "i3.xlarge": {
    "instance_storage_gib": 950,
    "memory_mib": 31232,
    "vcpu": 4
  },
  "i3en.2xlarge": {
    "instance_storage_gib": 5000,
    "memory_mib": 65536,
    "vcpu": 8
  },
  "i3en.3xlarge": {
    "instance_storage_gib": 7500,
    "memory_mib": 98304,
    "vcpu": 12
  },
  "i3en.xlarge": {
    "instance_storage_gib": 2500,
    "memory_mib": 32768,
    "vcpu": 4
  },
  "m5.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m5.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m5.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 96
  },
  "m5.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 8
  },
  "m5.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 16
  },
  "m5.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 32
  },
  "m5.large": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 2
  },
  "m5.metal": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 96
  },
  "m5.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m5d.12xlarge": {
    "instance_storage_gib": 1800,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m5d.16xlarge": {
    "instance_storage_gib": 2400,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m5d.24xlarge": {
    "instance_storage_gib": 3600,
    "memory_mib": 393216,
    "vcpu": 96
  },
  "m5d.2xlarge": {
    "instance_storage_gib": 300,
    "memory_mib": 32768,
    "vcpu": 8
  },
  "m5d.4xlarge": {
    "instance_storage_gib": 600,
    "memory_mib": 65536,
    "vcpu": 16
  },
  "m5d.8xlarge": {
    "instance_storage_gib": 1200,
    "memory_mib": 131072,
    "vcpu": 32
  },
  "m5d.large": {
    "instance_storage_gib": 75,
    "memory_mib": 8192,
    "vcpu": 2
  },
  "m5d.xlarge": {
    "instance_storage_gib": 150,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m6a.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m6a.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m6a.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 96
  },
  "m6a.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m6g.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m6g.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m6g.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 8
  },
  "m6g.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 16
  },
  "m6g.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 32
  },
  "m6g.large": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 2
  },
  "m6g.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m6i.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m6i.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m6i.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 96
  },
  "m6i.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 8
  },
  "m6i.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 16
  },
  "m6i.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 32
  },
  "m6i.large": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 2
  },
  "m6i.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m7a.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m7a.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 8
  },
  "m7a.large": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 2
  },
  "m7a.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m7g.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "m7g.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m7g.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 8
  },
  "m7g.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 16
  },
  "m7g.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 32
  },
  "m7g.large": {
    "instance_storage_gib": 0,
    "memory_mib": 8192,
    "vcpu": 2
  },
  "m7g.metal": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 64
  },
  "m7g.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 4
  },
  "m7i.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 196608,
    "vcpu": 48
  },
  "r5.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 48
  },
  "r5.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 524288,
    "vcpu": 64
  },
  "r5.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 786432,
    "vcpu": 96
  },
  "r5.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 8
  },
  "r5.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 16
  },
  "r5.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 32
  },
  "r5.large": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 2
  },
  "r5.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 4
  },
  "r5d.12xlarge": {
    "instance_storage_gib": 1800,
    "memory_mib": 393216,
    "vcpu": 48
  },
  "r5d.16xlarge": {
    "instance_storage_gib": 2400,
    "memory_mib": 524288,
    "vcpu": 64
  },
  "r5d.24xlarge": {
    "instance_storage_gib": 3600,
    "memory_mib": 786432,
    "vcpu": 96
  },
  "r5d.2xlarge": {
    "instance_storage_gib": 300,
    "memory_mib": 65536,
    "vcpu": 8
  },
  "r5d.4xlarge": {
    "instance_storage_gib": 600,
    "memory_mib": 131072,
    "vcpu": 16
  },
  "r5d.8xlarge": {
    "instance_storage_gib": 1200,
    "memory_mib": 262144,
    "vcpu": 32
  },
  "r5d.large": {
    "instance_storage_gib": 75,
    "memory_mib": 16384,
    "vcpu": 2
  },
  "r5d.xlarge": {
    "instance_storage_gib": 150,
    "memory_mib": 32768,
    "vcpu": 4
  },
  "r6g.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 48
  },
  "r6g.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 524288,
    "vcpu": 64
  },
  "r6g.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 8
  },
  "r6g.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 16
  },
  "r6g.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 32
  },
  "r6g.large": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 2
  },
  "r6g.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 4
  },
  "r6i.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 48
  },
  "r6i.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 524288,
    "vcpu": 64
  },
  "r6i.24xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 786432,
    "vcpu": 96
  },
  "r6i.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 8
  },
  "r6i.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 16
  },
  "r6i.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 32
  },
  "r6i.large": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 2
  },
  "r6i.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 4
  },
  "r7g.12xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 393216,
    "vcpu": 48
  },
  "r7g.16xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 524288,
    "vcpu": 64
  },
  "r7g.2xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 65536,
    "vcpu": 8
  },
  "r7g.4xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 131072,
    "vcpu": 16
  },
  "r7g.8xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 262144,
    "vcpu": 32
  },
  "r7g.large": {
    "instance_storage_gib": 0,
    "memory_mib": 16384,
    "vcpu": 2
  },
  "r7g.xlarge": {
    "instance_storage_gib": 0,
    "memory_mib": 32768,
    "vcpu": 4
  },
  "r7gd.2xlarge": {
    "instance_storage_gib": 474,
    "memory_mib": 65536,
    "vcpu": 8
  }
}

# 3. Instance type accessors

c5_12xlarge = struct(
    name="c5.12xlarge",
    slack_cpu_millicores=1000,
)

c5_18xlarge = struct(
    name="c5.18xlarge",
    slack_cpu_millicores=1000,
)

c5_24xlarge = struct(
    name="c5.24xlarge",
    slack_cpu_millicores=1000,
)

c5_2xlarge = struct(
    name="c5.2xlarge",
    slack_cpu_millicores=1000,
)

c5_4xlarge = struct(
    name="c5.4xlarge",
    slack_cpu_millicores=1000,
)

c5_9xlarge = struct(
    name="c5.9xlarge",
    slack_cpu_millicores=1000,
)

c5_xlarge = struct(
    name="c5.xlarge",
    slack_cpu_millicores=1000,
)

c5d_12xlarge = struct(
    name="c5d.12xlarge",
    slack_cpu_millicores=1000,
)

c5d_18xlarge = struct(
    name="c5d.18xlarge",
    slack_cpu_millicores=1000,
)

c5d_24xlarge = struct(
    name="c5d.24xlarge",
    slack_cpu_millicores=1000,
)

c5d_2xlarge = struct(
    name="c5d.2xlarge",
    slack_cpu_millicores=1000,
)

c5d_4xlarge = struct(
    name="c5d.4xlarge",
    slack_cpu_millicores=1000,
)

c5d_9xlarge = struct(
    name="c5d.9xlarge",
    slack_cpu_millicores=1000,
)

c5d_xlarge = struct(
    name="c5d.xlarge",
    slack_cpu_millicores=1000,
)

c5n_18xlarge = struct(
    name="c5n.18xlarge",
    slack_cpu_millicores=1000,
)

c5n_2xlarge = struct(
    name="c5n.2xlarge",
    slack_cpu_millicores=1000,
)

c5n_4xlarge = struct(
    name="c5n.4xlarge",
    slack_cpu_millicores=1000,
)

c5n_9xlarge = struct(
    name="c5n.9xlarge",
    slack_cpu_millicores=1000,
)

c5n_xlarge = struct(
    name="c5n.xlarge",
    slack_cpu_millicores=1000,
)

c6a_12xlarge = struct(
    name="c6a.12xlarge",
    slack_cpu_millicores=1000,
)

c6g_12xlarge = struct(
    name="c6g.12xlarge",
    slack_cpu_millicores=1000,
)

c6g_16xlarge = struct(
    name="c6g.16xlarge",
    slack_cpu_millicores=1000,
)

c6g_2xlarge = struct(
    name="c6g.2xlarge",
    slack_cpu_millicores=1000,
)

c6g_4xlarge = struct(
    name="c6g.4xlarge",
    slack_cpu_millicores=1000,
)

c6g_8xlarge = struct(
    name="c6g.8xlarge",
    slack_cpu_millicores=1000,
)

c6g_xlarge = struct(
    name="c6g.xlarge",
    slack_cpu_millicores=1000,
)

c6i_12xlarge = struct(
    name="c6i.12xlarge",
    slack_cpu_millicores=1000,
)

c6i_16xlarge = struct(
    name="c6i.16xlarge",
    slack_cpu_millicores=1000,
)

c6i_24xlarge = struct(
    name="c6i.24xlarge",
    slack_cpu_millicores=1000,
)

c6i_2xlarge = struct(
    name="c6i.2xlarge",
    slack_cpu_millicores=1000,
)

c6i_4xlarge = struct(
    name="c6i.4xlarge",
    slack_cpu_millicores=1000,
)

c6i_8xlarge = struct(
    name="c6i.8xlarge",
    slack_cpu_millicores=1000,
)

c6i_large = struct(
    name="c6i.large",
    slack_cpu_millicores=1000,
)

c6i_xlarge = struct(
    name="c6i.xlarge",
    slack_cpu_millicores=1000,
)

c7a_2xlarge = struct(
    name="c7a.2xlarge",
    slack_cpu_millicores=1000,
)

c7a_4xlarge = struct(
    name="c7a.4xlarge",
    slack_cpu_millicores=1000,
)

c7a_xlarge = struct(
    name="c7a.xlarge",
    slack_cpu_millicores=1000,
)

c7g_12xlarge = struct(
    name="c7g.12xlarge",
    slack_cpu_millicores=1000,
)

c7g_16xlarge = struct(
    name="c7g.16xlarge",
    slack_cpu_millicores=1000,
)

c7g_2xlarge = struct(
    name="c7g.2xlarge",
    slack_cpu_millicores=1000,
)

c7g_4xlarge = struct(
    name="c7g.4xlarge",
    slack_cpu_millicores=1000,
)

c7g_8xlarge = struct(
    name="c7g.8xlarge",
    slack_cpu_millicores=1000,
)

c7g_xlarge = struct(
    name="c7g.xlarge",
    slack_cpu_millicores=1000,
)

g4dn_xlarge = struct(
    name="g4dn.xlarge",
    slack_cpu_millicores=1000,
)

i3_2xlarge = struct(
    name="i3.2xlarge",
    slack_cpu_millicores=1000,
)

i3_4xlarge = struct(
    name="i3.4xlarge",
    slack_cpu_millicores=1000,
)

i3_xlarge = struct(
    name="i3.xlarge",
    slack_cpu_millicores=1000,
)

i3en_2xlarge = struct(
    name="i3en.2xlarge",
    slack_cpu_millicores=1000,
)

i3en_3xlarge = struct(
    name="i3en.3xlarge",
    slack_cpu_millicores=1000,
)

i3en_xlarge = struct(
    name="i3en.xlarge",
    slack_cpu_millicores=1000,
)

m5_12xlarge = struct(
    name="m5.12xlarge",
    slack_cpu_millicores=1000,
)

m5_16xlarge = struct(
    name="m5.16xlarge",
    slack_cpu_millicores=1000,
)

m5_24xlarge = struct(
    name="m5.24xlarge",
    slack_cpu_millicores=1000,
)

m5_2xlarge = struct(
    name="m5.2xlarge",
    slack_cpu_millicores=1000,
)

m5_4xlarge = struct(
    name="m5.4xlarge",
    slack_cpu_millicores=1000,
)

m5_8xlarge = struct(
    name="m5.8xlarge",
    slack_cpu_millicores=1000,
)

m5_large = struct(
    name="m5.large",
    slack_cpu_millicores=1000,
)

m5_metal = struct(
    name="m5.metal",
    slack_cpu_millicores=1000,
)

m5_xlarge = struct(
    name="m5.xlarge",
    slack_cpu_millicores=1000,
)

m5d_12xlarge = struct(
    name="m5d.12xlarge",
    slack_cpu_millicores=1000,
)

m5d_16xlarge = struct(
    name="m5d.16xlarge",
    slack_cpu_millicores=1000,
)

m5d_24xlarge = struct(
    name="m5d.24xlarge",
    slack_cpu_millicores=1000,
)

m5d_2xlarge = struct(
    name="m5d.2xlarge",
    slack_cpu_millicores=1000,
)

m5d_4xlarge = struct(
    name="m5d.4xlarge",
    slack_cpu_millicores=1000,
)

m5d_8xlarge = struct(
    name="m5d.8xlarge",
    slack_cpu_millicores=1000,
)

m5d_large = struct(
    name="m5d.large",
    slack_cpu_millicores=1000,
)

m5d_xlarge = struct(
    name="m5d.xlarge",
    slack_cpu_millicores=1000,
)

m6a_12xlarge = struct(
    name="m6a.12xlarge",
    slack_cpu_millicores=1000,
)

m6a_16xlarge = struct(
    name="m6a.16xlarge",
    slack_cpu_millicores=1000,
)

m6a_24xlarge = struct(
    name="m6a.24xlarge",
    slack_cpu_millicores=1000,
)

m6a_xlarge = struct(
    name="m6a.xlarge",
    slack_cpu_millicores=1000,
)

m6g_12xlarge = struct(
    name="m6g.12xlarge",
    slack_cpu_millicores=1000,
)

m6g_16xlarge = struct(
    name="m6g.16xlarge",
    slack_cpu_millicores=1000,
)

m6g_2xlarge = struct(
    name="m6g.2xlarge",
    slack_cpu_millicores=1000,
)

m6g_4xlarge = struct(
    name="m6g.4xlarge",
    slack_cpu_millicores=1000,
)

m6g_8xlarge = struct(
    name="m6g.8xlarge",
    slack_cpu_millicores=1000,
)

m6g_large = struct(
    name="m6g.large",
    slack_cpu_millicores=1000,
)

m6g_xlarge = struct(
    name="m6g.xlarge",
    slack_cpu_millicores=1000,
)

m6i_12xlarge = struct(
    name="m6i.12xlarge",
    slack_cpu_millicores=1000,
)

m6i_16xlarge = struct(
    name="m6i.16xlarge",
    slack_cpu_millicores=1000,
)

m6i_24xlarge = struct(
    name="m6i.24xlarge",
    slack_cpu_millicores=1000,
)

m6i_2xlarge = struct(
    name="m6i.2xlarge",
    slack_cpu_millicores=1000,
)

m6i_4xlarge = struct(
    name="m6i.4xlarge",
    slack_cpu_millicores=1000,
)

m6i_8xlarge = struct(
    name="m6i.8xlarge",
    slack_cpu_millicores=1000,
)

m6i_large = struct(
    name="m6i.large",
    slack_cpu_millicores=1000,
)

m6i_xlarge = struct(
    name="m6i.xlarge",
    slack_cpu_millicores=1000,
)

m7a_12xlarge = struct(
    name="m7a.12xlarge",
    slack_cpu_millicores=1000,
)

m7a_2xlarge = struct(
    name="m7a.2xlarge",
    slack_cpu_millicores=1000,
)

m7a_large = struct(
    name="m7a.large",
    slack_cpu_millicores=1000,
)

m7a_xlarge = struct(
    name="m7a.xlarge",
    slack_cpu_millicores=1000,
)

m7g_12xlarge = struct(
    name="m7g.12xlarge",
    slack_cpu_millicores=1000,
)

m7g_16xlarge = struct(
    name="m7g.16xlarge",
    slack_cpu_millicores=1000,
)

m7g_2xlarge = struct(
    name="m7g.2xlarge",
    slack_cpu_millicores=1000,
)

m7g_4xlarge = struct(
    name="m7g.4xlarge",
    slack_cpu_millicores=1000,
)

m7g_8xlarge = struct(
    name="m7g.8xlarge",
    slack_cpu_millicores=1000,
)

m7g_large = struct(
    name="m7g.large",
    slack_cpu_millicores=1000,
)

m7g_metal = struct(
    name="m7g.metal",
    slack_cpu_millicores=1000,
)

m7g_xlarge = struct(
    name="m7g.xlarge",
    slack_cpu_millicores=1000,
)

m7i_12xlarge = struct(
    name="m7i.12xlarge",
    slack_cpu_millicores=1000,
)

r5_12xlarge = struct(
    name="r5.12xlarge",
    slack_cpu_millicores=1000,
)

r5_16xlarge = struct(
    name="r5.16xlarge",
    slack_cpu_millicores=1000,
)

r5_24xlarge = struct(
    name="r5.24xlarge",
    slack_cpu_millicores=1000,
)

r5_2xlarge = struct(
    name="r5.2xlarge",
    slack_cpu_millicores=1000,
)

r5_4xlarge = struct(
    name="r5.4xlarge",
    slack_cpu_millicores=1000,
)

r5_8xlarge = struct(
    name="r5.8xlarge",
    slack_cpu_millicores=1000,
)

r5_large = struct(
    name="r5.large",
    slack_cpu_millicores=1000,
)

r5_xlarge = struct(
    name="r5.xlarge",
    slack_cpu_millicores=1000,
)

r5d_12xlarge = struct(
    name="r5d.12xlarge",
    slack_cpu_millicores=1000,
)

r5d_16xlarge = struct(
    name="r5d.16xlarge",
    slack_cpu_millicores=1000,
)

r5d_24xlarge = struct(
    name="r5d.24xlarge",
    slack_cpu_millicores=1000,
)

r5d_2xlarge = struct(
    name="r5d.2xlarge",
    slack_cpu_millicores=1000,
)

r5d_4xlarge = struct(
    name="r5d.4xlarge",
    slack_cpu_millicores=1000,
)

r5d_8xlarge = struct(
    name="r5d.8xlarge",
    slack_cpu_millicores=1000,
)

r5d_large = struct(
    name="r5d.large",
    slack_cpu_millicores=1000,
)

r5d_xlarge = struct(
    name="r5d.xlarge",
    slack_cpu_millicores=1000,
)

r6g_12xlarge = struct(
    name="r6g.12xlarge",
    slack_cpu_millicores=1000,
)

r6g_16xlarge = struct(
    name="r6g.16xlarge",
    slack_cpu_millicores=1000,
)

r6g_2xlarge = struct(
    name="r6g.2xlarge",
    slack_cpu_millicores=1000,
)

r6g_4xlarge = struct(
    name="r6g.4xlarge",
    slack_cpu_millicores=1000,
)

r6g_8xlarge = struct(
    name="r6g.8xlarge",
    slack_cpu_millicores=1000,
)

r6g_large = struct(
    name="r6g.large",
    slack_cpu_millicores=1000,
)

r6g_xlarge = struct(
    name="r6g.xlarge",
    slack_cpu_millicores=1000,
)

r6i_12xlarge = struct(
    name="r6i.12xlarge",
    slack_cpu_millicores=1000,
)

r6i_16xlarge = struct(
    name="r6i.16xlarge",
    slack_cpu_millicores=1000,
)

r6i_24xlarge = struct(
    name="r6i.24xlarge",
    slack_cpu_millicores=1000,
)

r6i_2xlarge = struct(
    name="r6i.2xlarge",
    slack_cpu_millicores=1000,
)

r6i_4xlarge = struct(
    name="r6i.4xlarge",
    slack_cpu_millicores=1000,
)

r6i_8xlarge = struct(
    name="r6i.8xlarge",
    slack_cpu_millicores=1000,
)

r6i_large = struct(
    name="r6i.large",
    slack_cpu_millicores=1000,
)

r6i_xlarge = struct(
    name="r6i.xlarge",
    slack_cpu_millicores=1000,
)

r7g_12xlarge = struct(
    name="r7g.12xlarge",
    slack_cpu_millicores=1000,
)

r7g_16xlarge = struct(
    name="r7g.16xlarge",
    slack_cpu_millicores=1000,
)

r7g_2xlarge = struct(
    name="r7g.2xlarge",
    slack_cpu_millicores=1000,
)

r7g_4xlarge = struct(
    name="r7g.4xlarge",
    slack_cpu_millicores=1000,
)

r7g_8xlarge = struct(
    name="r7g.8xlarge",
    slack_cpu_millicores=1000,
)

r7g_large = struct(
    name="r7g.large",
    slack_cpu_millicores=1000,
)

r7g_xlarge = struct(
    name="r7g.xlarge",
    slack_cpu_millicores=1000,
)

r7gd_2xlarge = struct(
    name="r7gd.2xlarge",
    slack_cpu_millicores=1000,
)


# 4. Mapping from instance type to the struct defined above, which contains the CPU slack amount for host agents.
_INSTANCE_TYPES_BY_NAME = {
  c5_12xlarge.name: c5_12xlarge,
  c5_18xlarge.name: c5_18xlarge,
  c5_24xlarge.name: c5_24xlarge,
  c5_2xlarge.name: c5_2xlarge,
  c5_4xlarge.name: c5_4xlarge,
  c5_9xlarge.name: c5_9xlarge,
  c5_xlarge.name: c5_xlarge,
  c5d_12xlarge.name: c5d_12xlarge,
  c5d_18xlarge.name: c5d_18xlarge,
  c5d_24xlarge.name: c5d_24xlarge,
  c5d_2xlarge.name: c5d_2xlarge,
  c5d_4xlarge.name: c5d_4xlarge,
  c5d_9xlarge.name: c5d_9xlarge,
  c5d_xlarge.name: c5d_xlarge,
  c5n_18xlarge.name: c5n_18xlarge,
  c5n_2xlarge.name: c5n_2xlarge,
  c5n_4xlarge.name: c5n_4xlarge,
  c5n_9xlarge.name: c5n_9xlarge,
  c5n_xlarge.name: c5n_xlarge,
  c6a_12xlarge.name: c6a_12xlarge,
  c6g_12xlarge.name: c6g_12xlarge,
  c6g_16xlarge.name: c6g_16xlarge,
  c6g_2xlarge.name: c6g_2xlarge,
  c6g_4xlarge.name: c6g_4xlarge,
  c6g_8xlarge.name: c6g_8xlarge,
  c6g_xlarge.name: c6g_xlarge,
  c6i_12xlarge.name: c6i_12xlarge,
  c6i_16xlarge.name: c6i_16xlarge,
  c6i_24xlarge.name: c6i_24xlarge,
  c6i_2xlarge.name: c6i_2xlarge,
  c6i_4xlarge.name: c6i_4xlarge,
  c6i_8xlarge.name: c6i_8xlarge,
  c6i_large.name: c6i_large,
  c6i_xlarge.name: c6i_xlarge,
  c7a_2xlarge.name: c7a_2xlarge,
  c7a_4xlarge.name: c7a_4xlarge,
  c7a_xlarge.name: c7a_xlarge,
  c7g_12xlarge.name: c7g_12xlarge,
  c7g_16xlarge.name: c7g_16xlarge,
  c7g_2xlarge.name: c7g_2xlarge,
  c7g_4xlarge.name: c7g_4xlarge,
  c7g_8xlarge.name: c7g_8xlarge,
  c7g_xlarge.name: c7g_xlarge,
  g4dn_xlarge.name: g4dn_xlarge,
  i3_2xlarge.name: i3_2xlarge,
  i3_4xlarge.name: i3_4xlarge,
  i3_xlarge.name: i3_xlarge,
  i3en_2xlarge.name: i3en_2xlarge,
  i3en_3xlarge.name: i3en_3xlarge,
  i3en_xlarge.name: i3en_xlarge,
  m5_12xlarge.name: m5_12xlarge,
  m5_16xlarge.name: m5_16xlarge,
  m5_24xlarge.name: m5_24xlarge,
  m5_2xlarge.name: m5_2xlarge,
  m5_4xlarge.name: m5_4xlarge,
  m5_8xlarge.name: m5_8xlarge,
  m5_large.name: m5_large,
  m5_metal.name: m5_metal,
  m5_xlarge.name: m5_xlarge,
  m5d_12xlarge.name: m5d_12xlarge,
  m5d_16xlarge.name: m5d_16xlarge,
  m5d_24xlarge.name: m5d_24xlarge,
  m5d_2xlarge.name: m5d_2xlarge,
  m5d_4xlarge.name: m5d_4xlarge,
  m5d_8xlarge.name: m5d_8xlarge,
  m5d_large.name: m5d_large,
  m5d_xlarge.name: m5d_xlarge,
  m6a_12xlarge.name: m6a_12xlarge,
  m6a_16xlarge.name: m6a_16xlarge,
  m6a_24xlarge.name: m6a_24xlarge,
  m6a_xlarge.name: m6a_xlarge,
  m6g_12xlarge.name: m6g_12xlarge,
  m6g_16xlarge.name: m6g_16xlarge,
  m6g_2xlarge.name: m6g_2xlarge,
  m6g_4xlarge.name: m6g_4xlarge,
  m6g_8xlarge.name: m6g_8xlarge,
  m6g_large.name: m6g_large,
  m6g_xlarge.name: m6g_xlarge,
  m6i_12xlarge.name: m6i_12xlarge,
  m6i_16xlarge.name: m6i_16xlarge,
  m6i_24xlarge.name: m6i_24xlarge,
  m6i_2xlarge.name: m6i_2xlarge,
  m6i_4xlarge.name: m6i_4xlarge,
  m6i_8xlarge.name: m6i_8xlarge,
  m6i_large.name: m6i_large,
  m6i_xlarge.name: m6i_xlarge,
  m7a_12xlarge.name: m7a_12xlarge,
  m7a_2xlarge.name: m7a_2xlarge,
  m7a_large.name: m7a_large,
  m7a_xlarge.name: m7a_xlarge,
  m7g_12xlarge.name: m7g_12xlarge,
  m7g_16xlarge.name: m7g_16xlarge,
  m7g_2xlarge.name: m7g_2xlarge,
  m7g_4xlarge.name: m7g_4xlarge,
  m7g_8xlarge.name: m7g_8xlarge,
  m7g_large.name: m7g_large,
  m7g_metal.name: m7g_metal,
  m7g_xlarge.name: m7g_xlarge,
  m7i_12xlarge.name: m7i_12xlarge,
  r5_12xlarge.name: r5_12xlarge,
  r5_16xlarge.name: r5_16xlarge,
  r5_24xlarge.name: r5_24xlarge,
  r5_2xlarge.name: r5_2xlarge,
  r5_4xlarge.name: r5_4xlarge,
  r5_8xlarge.name: r5_8xlarge,
  r5_large.name: r5_large,
  r5_xlarge.name: r5_xlarge,
  r5d_12xlarge.name: r5d_12xlarge,
  r5d_16xlarge.name: r5d_16xlarge,
  r5d_24xlarge.name: r5d_24xlarge,
  r5d_2xlarge.name: r5d_2xlarge,
  r5d_4xlarge.name: r5d_4xlarge,
  r5d_8xlarge.name: r5d_8xlarge,
  r5d_large.name: r5d_large,
  r5d_xlarge.name: r5d_xlarge,
  r6g_12xlarge.name: r6g_12xlarge,
  r6g_16xlarge.name: r6g_16xlarge,
  r6g_2xlarge.name: r6g_2xlarge,
  r6g_4xlarge.name: r6g_4xlarge,
  r6g_8xlarge.name: r6g_8xlarge,
  r6g_large.name: r6g_large,
  r6g_xlarge.name: r6g_xlarge,
  r6i_12xlarge.name: r6i_12xlarge,
  r6i_16xlarge.name: r6i_16xlarge,
  r6i_24xlarge.name: r6i_24xlarge,
  r6i_2xlarge.name: r6i_2xlarge,
  r6i_4xlarge.name: r6i_4xlarge,
  r6i_8xlarge.name: r6i_8xlarge,
  r6i_large.name: r6i_large,
  r6i_xlarge.name: r6i_xlarge,
  r7g_12xlarge.name: r7g_12xlarge,
  r7g_16xlarge.name: r7g_16xlarge,
  r7g_2xlarge.name: r7g_2xlarge,
  r7g_4xlarge.name: r7g_4xlarge,
  r7g_8xlarge.name: r7g_8xlarge,
  r7g_large.name: r7g_large,
  r7g_xlarge.name: r7g_xlarge,
  r7gd_2xlarge.name: r7gd_2xlarge
}

# 5. Mapping from x86 to Graviton
_X86_TO_GRAVITON_INSTANCE_TYPE_MAPPINGS = {
    "c5.xlarge": {
        "default": "c7g.xlarge",
        "default_6g": "c6g.xlarge",
        "bom": "c6g.xlarge"
    },
    "c5.2xlarge": {
        "default": "c7g.2xlarge",
        "default_6g": "c6g.2xlarge",
        "bom": "c6g.2xlarge"
    },
    "c5.4xlarge": {
        "default": "c7g.4xlarge",
        "default_6g": "c6g.4xlarge",
        "bom": "c6g.4xlarge"
    },
    "c5.12xlarge":{
        "default": "c7g.12xlarge",
        "default_6g": "c6g.12xlarge",
        "bom": "c6g.12xlarge"
    },
    "m5.large": {
        "default": "m7g.large",
        "default_6g": "m6g.large",
        "bom": "m6g.large"
    },
    "m5.xlarge": {
        "default": "m7g.xlarge",
        "default_6g": "m6g.xlarge",
        "bom": "m6g.xlarge"
    },
    "m5.2xlarge": {
        "default": "m7g.2xlarge",
        "default_6g": "m6g.2xlarge",
        "bom": "m6g.2xlarge"
    },
    "m5.4xlarge": {
        "default": "m7g.4xlarge",
        "default_6g": "m6g.4xlarge",
        "bom": "m6g.4xlarge"
    },
    "m5.8xlarge": {
        "default": "m7g.8xlarge",
        "default_6g": "m6g.8xlarge",
        "bom": "m6g.8xlarge"
    },
    "m5.12xlarge": {
        "default": "m7g.12xlarge",
        "default_6g": "m6g.12xlarge",
        "bom": "m6g.12xlarge"
    },
    "m5.16xlarge": {
        "default": "m7g.16xlarge",
        "default_6g": "m6g.16xlarge",
        "bom": "m6g.16xlarge"
    },
    "r5.large": {
        "default": "r7g.large",
        "default_6g": "r6g.large",
        "bom": "r6g.large"
    },
    "r5.xlarge": {
        "default": "r7g.xlarge",
        "default_6g": "r6g.xlarge",
        "bom": "r6g.xlarge"
    },
    "r5.2xlarge": {
        "default": "r7g.2xlarge",
        "default_6g": "r6g.2xlarge",
        "bom": "r6g.2xlarge"
    },
    "r5.4xlarge": {
        "default": "r7g.4xlarge",
        "default_6g": "r6g.4xlarge",
        "bom": "r6g.4xlarge"
    },
    "r5.8xlarge": {
        "default": "r7g.8xlarge",
        "default_6g": "r6g.8xlarge",
        "bom": "r6g.8xlarge"
    },
    "r5.12xlarge": {
        "default": "r7g.12xlarge",
        "default_6g": "r6g.12xlarge",
        "bom": "r6g.12xlarge"
    },
    "r5.16xlarge": {
        "default": "r7g.16xlarge",
        "default_6g": "r6g.16xlarge",
        "bom": "r6g.16xlarge"
    },
    "m6a.xlarge": {
        "default": "m7g.xlarge",
        "default_6g": "m6g.xlarge",
        "bom": "m6g.xlarge"
    },
    "c6i.12xlarge": {
        "default": "c7g.12xlarge",
        "default_6g": "c6g.12xlarge",
        "bom": "c6g.12xlarge"
    },
    "m6i.12xlarge": {
        "default": "m7g.12xlarge",
        "default_6g": "m6g.12xlarge",
        "bom": "m7g.12xlarge"
    },
    "m6i.4xlarge": {
        "default": "m7g.4xlarge",
        "default_6g": "m6g.4xlarge",
        "bom": "m7g.4xlarge"
    },
    "c6a.12xlarge": {
        "default": "c7g.12xlarge",
        "default_6g": "c6g.12xlarge",
        "bom": "c6g.12xlarge"
    },
    "m6a.12xlarge": {
        "default": "m7g.12xlarge",
        "default_6g": "m6g.12xlarge",
        "bom": "m6g.12xlarge"
    },
    "m6a.16xlarge": {
        "default": "m7g.16xlarge",
        "default_6g": "m6g.16xlarge",
        "bom": "m6g.16xlarge"
    },
    "c5.9xlarge": {
        "default": "c7g.12xlarge",
        "default_6g": "c6g.12xlarge",
        "bom": "c6g.12xlarge"
    },
    "c6g.12xlarge": {
        "default": "c6g.12xlarge",
        "default_6g": "c6g.12xlarge",
        "bom": "c6g.12xlarge"
    },
    "c6g.16xlarge": {
        "default": "c6g.16xlarge",
        "default_6g": "c6g.16xlarge",
        "bom": "c6g.16xlarge"
    },
    "c6g.2xlarge": {
        "default": "c6g.2xlarge",
        "default_6g": "c6g.2xlarge",
        "bom": "c6g.2xlarge"
    },
    "c6g.4xlarge": {
        "default": "c6g.4xlarge",
        "default_6g": "c6g.4xlarge",
        "bom": "c6g.4xlarge"
    },
    "c6g.8xlarge": {
        "default": "c6g.8xlarge",
        "default_6g": "c6g.8xlarge",
        "bom": "c6g.8xlarge"
    },
    "c6g.xlarge": {
        "default": "c6g.xlarge",
        "default_6g": "c6g.xlarge",
        "bom": "c6g.xlarge"
    },
    "m6g.12xlarge": {
        "default": "m6g.12xlarge",
        "default_6g": "m6g.12xlarge",
        "bom": "m6g.12xlarge"
    },
    "m6g.16xlarge": {
        "default": "m6g.16xlarge",
        "default_6g": "m6g.16xlarge",
        "bom": "m6g.16xlarge"
    },
    "m6g.2xlarge": {
        "default": "m6g.2xlarge",
        "default_6g": "m6g.2xlarge",
        "bom": "m6g.2xlarge"
    },
    "m6g.4xlarge": {
        "default": "m6g.4xlarge",
        "default_6g": "m6g.4xlarge",
        "bom": "m6g.4xlarge"
    },
    "m6g.8xlarge": {
        "default": "m6g.8xlarge",
        "default_6g": "m6g.8xlarge",
        "bom": "m6g.8xlarge"
    },
    "m6g.xlarge": {
        "default": "m6g.xlarge",
        "default_6g": "m6g.xlarge",
        "bom": "m6g.xlarge"
    },
    "m6g.large": {
        "default": "m6g.large",
        "default_6g": "m6g.large",
        "bom": "m6g.large"
    },
    "r6g.12xlarge": {
        "default": "r6g.12xlarge",
        "default_6g": "r6g.12xlarge",
        "bom": "r6g.12xlarge"
    },
    "r6g.16xlarge": {
        "default": "r6g.16xlarge",
        "default_6g": "r6g.16xlarge",
        "bom": "r6g.16xlarge"
    },
    "r6g.2xlarge": {
        "default": "r6g.2xlarge",
        "default_6g": "r6g.2xlarge",
        "bom": "r6g.2xlarge"
    },
    "r6g.4xlarge": {
        "default": "r6g.4xlarge",
        "default_6g": "r6g.4xlarge",
        "bom": "r6g.4xlarge"
    },
    "r6g.8xlarge": {
        "default": "r6g.8xlarge",
        "default_6g": "r6g.8xlarge",
        "bom": "r6g.8xlarge"
    },
    "r6g.xlarge": {
        "default": "r6g.xlarge",
        "default_6g": "r6g.xlarge",
        "bom": "r6g.xlarge"
    },
    "r6g.large": {
        "default": "r6g.large",
        "default_6g": "r6g.large",
        "bom": "r6g.large"
    },
    "c7g.12xlarge": {
        "default": "c7g.12xlarge",
        "default_6g": "c6g.12xlarge",
        "bom": "c6g.12xlarge"
    },
    "c7g.16xlarge": {
        "default": "c7g.16xlarge",
        "default_6g": "c6g.16xlarge",
        "bom": "c6g.16xlarge"
    },
    "c7g.2xlarge": {
        "default": "c7g.2xlarge",
        "default_6g": "c6g.2xlarge",
        "bom": "c6g.2xlarge"
    },
    "c7g.4xlarge": {
        "default": "c7g.4xlarge",
        "default_6g": "c6g.4xlarge",
        "bom": "c6g.4xlarge"
    },
    "c7g.8xlarge": {
        "default": "c7g.8xlarge",
        "default_6g": "c6g.8xlarge",
        "bom": "c6g.8xlarge"
    },
    "c7g.xlarge": {
        "default": "c7g.xlarge",
        "default_6g": "c6g.xlarge",
        "bom": "c6g.xlarge"
    },
    "m7i.12xlarge": {
        "default": "m7i.12xlarge",
        "default_6g": "m6i.12xlarge",
        "bom": "m6i.12xlarge"
    },
    "m7a.12xlarge": {
        "default": "m7a.12xlarge",
        "default_6g": "m6a.12xlarge",
        "bom": "m6a.12xlarge"
    },
    "m7g.12xlarge": {
        "default": "m7g.12xlarge",
        "default_6g": "m6g.12xlarge",
        "bom": "m6g.12xlarge"
    },
    "m7g.16xlarge": {
        "default": "m7g.16xlarge",
        "default_6g": "m6g.16xlarge",
        "bom": "m6g.16xlarge"
    },
    "m7g.2xlarge": {
        "default": "m7g.2xlarge",
        "default_6g": "m6g.2xlarge",
        "bom": "m6g.2xlarge"
    },
    "m7g.4xlarge": {
        "default": "m7g.4xlarge",
        "default_6g": "m6g.4xlarge",
        "bom": "m6g.4xlarge"
    },
    "m7g.8xlarge": {
        "default": "m7g.8xlarge",
        "default_6g": "m6g.8xlarge",
        "bom": "m6g.8xlarge"
    },
    "m7g.xlarge": {
        "default": "m7g.xlarge",
        "default_6g": "m6g.xlarge",
        "bom": "m6g.xlarge"
    },
    "m7g.large": {
        "default": "m7g.large",
        "default_6g": "m6g.large",
        "bom": "m6g.large"
    },
    "r7g.12xlarge": {
        "default": "r7g.12xlarge",
        "default_6g": "r6g.12xlarge",
        "bom": "r6g.12xlarge"
    },
    "r7g.16xlarge": {
        "default": "r7g.16xlarge",
        "default_6g": "r6g.16xlarge",
        "bom": "r6g.16xlarge"
    },
    "r7g.2xlarge": {
        "default": "r7g.2xlarge",
        "default_6g": "r6g.2xlarge",
        "bom": "r6g.2xlarge"
    },
    "r7g.4xlarge": {
        "default": "r7g.4xlarge",
        "default_6g": "r6g.4xlarge",
        "bom": "r6g.4xlarge"
    },
    "r7g.8xlarge": {
        "default": "r7g.8xlarge",
        "default_6g": "r6g.8xlarge",
        "bom": "r6g.8xlarge"
    },
    "r7g.xlarge": {
        "default": "r7g.xlarge",
        "default_6g": "r6g.xlarge",
        "bom": "r6g.xlarge"
    },
    "r7g.large": {
        "default": "r7g.large",
        "default_6g": "r6g.large",
        "bom": "r6g.large"
    },
  }

def get_instance_type_by_name(name):
    instance_type_from_name = _INSTANCE_TYPES_BY_NAME.get(name)
    if instance_type_from_name != None:
        return instance_type_from_name

    fail("Invalid instance type: {}".format(name))

def smart_env_instance(ctx, default_instance, prod = None, preprod = None, qa = None):
    """
    Returns the provided default_instance unless the function is being
    evaluated in an environment with a provided override. This is a helper
    function to avoid an if/else statement to choose instances based on
    environments.

    Args:
        ctx: The Skycfg context from the entrypoint function.
        default_instance: The AWS instance you want to use as a default.
        prod: (Optional) The AWS instance to use when env is "prod".
        preprod: (Optional) The AWS instance to use when env is "preprod".
        qa: (Optional) The AWS instance to use when env is "qa".


    Returns:
        The corresponding instances based on the environment the function is
        being evaluted in.
    """

    if get_env(ctx) == "prod" and prod != None:
        return prod
    elif get_env(ctx) == "preprod" and preprod != None:
        return preprod
    elif get_env(ctx) == "qa" and qa != None:
        return qa

    return default_instance

export_for_testing_aws_instance_sizes = _AWS_INSTANCE_SIZES
export_for_testing_instance_types_by_name = _INSTANCE_TYPES_BY_NAME
export_for_graviton_helper = _X86_TO_GRAVITON_INSTANCE_TYPE_MAPPINGS

# Skycfg entrypoint function when called from kube-cost-attribution to get instance size details.
# Returns a single protobuf string containing a JSONified version of _AWS_INSTANCE_SIZES
pb = proto.package("google.protobuf")
def main(ctx):
    return [pb.StringValue(value=json.encode(_AWS_INSTANCE_SIZES))]

def get_graviton_eq_instance_type(ctx, x86_instance_type, graviton_migration_target_6g=False):
    if not(_X86_TO_GRAVITON_INSTANCE_TYPE_MAPPINGS.get(x86_instance_type)):
        fail("There is no equivalent Graviton instance for %s to facilitate an automatic migration. You can either switch to an Intel instance type that supports automatic migrations or directly to a Graviton host." % (x86_instance_type))
    mapping = _X86_TO_GRAVITON_INSTANCE_TYPE_MAPPINGS[x86_instance_type]

    if graviton_migration_target_6g:
        if "default_6g" not in mapping:
            fail("Missing Generation 2 Graviton mapping")
        return mapping["default_6g"]
    else:
        return mapping["default" if get_cluster(ctx) != "bom" else "bom"]

def _instance_family(instance_type):
    return instance_type.split(".")[0]

def base_instance_family(instance_type):
    family = _instance_family(instance_type)

    # We consider c5, c5n, c5d, c5nd instances as all being of the same base family type.
    # They all have the same CPU and memory charactersitics but might have different
    # modifications such as d for nvme drives or n for better networking. Generally
    # speaking the base instance family type ends in a number. This assumption breaks
    # with the new c6/m6/r6 instances as they have a letter modifier at the end of i/a/g
    # to represent the CPU they have (Intel, AMD or Graviton respectively). We want to
    # return those instance modifiers as their corresponding hypervisors might actually
    # use different amounts of memory.
    for i in range(len(family)-1, 0, -1):
        if family[i].isdigit() or (family[i] in ["i", "a", "g"] and family[i-1].isdigit()):
            return family[0:i+1]

    return family

def aws_instance_size(instance_type):
    """
    Get CPU and memory limits for the given AWS instance type.

    Args:
        instance_type: The name of instance type. E.g., "m5d.xlarge".
    Returns:
        A struct with cpu_millicores and memory_mib fields.
    """
    resources = _AWS_INSTANCE_SIZES.get(instance_type)
    if resources == None:
        fail("unknown instance type %r" % instance_type)

    cpu = 1000 * resources["vcpu"]
    memory = resources["memory_mib"]
    slack_cpu_millicores = 0

    if _INSTANCE_TYPES_BY_NAME.get(instance_type):
        slack_cpu_millicores= _INSTANCE_TYPES_BY_NAME[instance_type].slack_cpu_millicores

    # TODO(dl): ORCH-2949 Remove once NodeAllocatable has been deployed to all
    # host-types. This is a hack to prevent double pod allocations due to memory
    # requests being less than 50% of avialable memory in small hosts due to use
    # carving out 4GB of memory for OS/system-level processes.
    if instance_type in ["m5.large", "m5d.large", "c5.xlarge", "c5d.xlarge"]:
        return struct(cpu_millicores=cpu, memory_mib=4198, slack_cpu_millicores=slack_cpu_millicores)

    # Instances have less available memory for host processes than they are
    # physically configured with. We'll reduce the amount of memory they have
    # available by a fixed percentage by base instance family type. The
    # percentage amount has been determined by observing the difference between
    # the total and available memory in instances (see
    # https://docs.google.com/spreadsheets/d/1TTYvjnqqlOj9qfP6FUuWWgB7jH9rZry3OynpDhzN2YM/edit#gid=2131393054).
    # Additionally we'll further reduce the amount of memory by an extra 4GB.
    #
    # If we don't decrement the amount of memory instances have we end up
    # configuring pods with more memory than the instance has available causing
    # pods to be unschedulable.
    fixed_memory_reduction = 4096

    # The Starlark version we use does not support floats so we get around
    # it by using basis points and using integer division. 100 basis point
    # is equal to 1% (625 basis points = 6.25%).
    base_instance_family_memory_reduction_basis_points = {
        "c5": 750,
        "c6i": 750,  # Assuming same values as c5
        "c6a": 750,  # Assuming same values as c5
        "c6g": 750,  # Assuming same values as c5
        "c7g": 750,  # Assuming same values as c5
        "c7a": 750, # Assuming same values as c5
        "m5": 700,
        "m6i": 700,  # Assuming same values as m5
        "m6g": 700,  # Assuming same values as m5
        "m7i": 700,  # Assuming same values as m5
        "m7a": 700,  # Assuming same values as m5
        "m7g": 700,  # Assuming same values as m5
        "r5": 525,
        "r6i": 525,  # Assume same value as r5
        "r6g": 525,  # Assume same value as r5
        "r7g": 525,  # Assume same value as r5
        "i3": 700,
        "i3en": 700, # Assume same value as i3
        # TODO(gregj) this m6a value is copied from m5 -- I didn't actually go look at the memory
        # usage on instances of these actual types, since we're just prototyping m6a instances on
        # AMD in QA for now. We'll need to find the actual value here before actually running gen 6
        # types.
        "m6a": 700,
        "g4": 700,
    }

    reduction_basis_points = base_instance_family_memory_reduction_basis_points.get(base_instance_family(instance_type), 0)
    memory = (memory * (10000 - reduction_basis_points) // 10000) - fixed_memory_reduction
    return struct(cpu_millicores=cpu, memory_mib=memory, slack_cpu_millicores=slack_cpu_millicores)
