# DO NOT EDIT: http://go/vendor-skycfg
load("config/kubernetes/helpers/aws_instance_sizes.sky", "get_instance_type_by_name", INSTANCE_MAPPING="export_for_graviton_helper")
load("config/kubernetes/helpers/context.sky", "get_cluster")

def smart_graviton_instance(ctx, instance):
    """
    Returns the best matching Graviton instance for the given input and region
    the instance is being used in. This is a helper function for when you want
    to use Graviton 3 wherever possible but need to run in regions where you
    might need to fallback to Graviton 2 (e.g. bom).

    Args:
        ctx: The Skycfg context from the entrypoint function.
        instance: The AWS instance you want to use and automatically swap for
            the corresponding fallback instance when necessary.

    Returns:
        The corresponding Graviton 3 or Graviton 2 instance based on the region
        specied.
    """

    if instance.name[1:3] not in ["6g", "7g"]:
        fail("smart_graviton_instance can only be used with Graviton 2 or Graviton3 instances")

    mapping = INSTANCE_MAPPING[instance.name]

    smart_instance = mapping["default" if get_cluster(ctx) != "bom" else "bom"]

    return get_instance_type_by_name(smart_instance)


def is_graviton_instance(instance):
    """
    Returns whether the given instance is a Graviton instance

    Args:
        instance: The AWS instance you want to check

    Returns:
        True if Graviton, False otherwise
    """

    if instance.name[1:3]  in ["6g", "7g"]:
        return True

    return False
