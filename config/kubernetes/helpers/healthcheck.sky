# DO NOT EDIT: http://go/vendor-skycfg
"""
Plugin for registering a Consul service with healthchecking.
"""

load("config/kubernetes/core/generic.sky", "is_dedicated_msp", "is_shared_msp")
load("config/kubernetes/core/probe.sky", "http_probe", "probes")
load("config/kubernetes/networking/public/healthcheck.sky", "shared_msp_healthchecked_service")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/plugins/conditional.sky", "conditional_plugin")
load("config/kubernetes/sidecars/consul.sky", "consul_check", "consul_service", "envoy_consul_tag")
load("config/kubernetes/sidecars/health.sky", "safely_deployed_service")


def healthchecked_service(
        ctx,
        port,
        name,
        healthcheck_port = None,
        path = "/healthcheck",
        consul_tags = None,
        consul_meta = None,
        include_probes = True,
        startup_probe_failure_threshold = 300,
        container_name = None,
        request_drain_grace_period_seconds = 60,
        opt_out_of_safe_deploys = False):
    """
    Register a Consul service with an HTTP health check.

    This plugin also adds probes that use the health check to let Kubernetes manage the lifecycle
    of your service.

    Args:
        port: The HTTP port that the service is listening on.
        name: Name of the Consul service to register.
        healthcheck_port: The HTTP port to perform healthchecks on. Useful for proxy services.
            Defaults to the port specified above.
        path: The HTTP path of the healthcheck endpoint for the service. Defaults to "/healthcheck".
        consul_tags: An optional list of additional Consul service tags. The envoy_health_check
            tag is added by default.
        consul_meta: An optional dict of additional consul service metadata.
        include_probes: Whether to set up probes on the container. Defaults to True.
        startup_probe_failure_threshold: Number of times that health check must
            fail before startup probe fails.
        container_name: Optional name of the container running the service. Defaults to the main
            container.
        request_drain_grace_period_seconds: Optional grace period to allow in-flight requests to
            drain before shutting down the container. Defaults to 60s. This does not need to account
            for Consul/Envoy propagation, those happen before this grace period starts.
        opt_out_of_safe_deploys: Disable extra measures that ensure that traffic transitions smoothly
            away from the pod when it terminates. Only do this if you're sure your service's own
            healthchecks are handling all of necessary cases here.

    Returns:
        A plugin that adds the service to the pod.
    """

    if consul_tags == None:
        consul_tags = []

    if consul_meta == None:
        consul_meta = {}

    return compose_plugins(
        conditional_plugin(
            condition=is_shared_msp,
            plugin=shared_msp_healthchecked_service(ctx, port, name, healthcheck_port, path, consul_tags, consul_meta, include_probes, startup_probe_failure_threshold, container_name, request_drain_grace_period_seconds, opt_out_of_safe_deploys),
        ),
        conditional_plugin(
            condition=is_dedicated_msp,
            plugin=_legacy_healthchecked_service(ctx, port, name, healthcheck_port, path, consul_tags, consul_meta, include_probes, startup_probe_failure_threshold, container_name, request_drain_grace_period_seconds, opt_out_of_safe_deploys),
        ),
    )

def _legacy_healthchecked_service(
        ctx,
        port,
        name,
        healthcheck_port = None,
        path = "/healthcheck",
        consul_tags = None,
        consul_meta = None,
        include_probes = True,
        startup_probe_failure_threshold = 300,
        container_name = None,
        request_drain_grace_period_seconds = 60,
        opt_out_of_safe_deploys = False):
    if healthcheck_port == None:
        healthcheck_port = port

    if consul_tags == None:
        consul_tags = []

    if consul_meta == None:
        consul_meta = {}

    probe_plugins = []
    if include_probes:
        ready_probe = http_probe(
            ctx,
            port = healthcheck_port,
            path = path,
        )

        startup_probe = http_probe(
            ctx,
            port = healthcheck_port,
            path = path,
            failureThreshold = startup_probe_failure_threshold,
            periodSeconds = 1,
        )

        deploy_safety_plugin = safely_deployed_service(
            ctx,
            request_drain_grace_period_seconds = request_drain_grace_period_seconds,
            consul_propagation_period_seconds = 60,
            container_name = container_name,
        )
        if opt_out_of_safe_deploys:
            deploy_safety_plugin = compose_plugins()

        probe_plugins = [
            probes(
                readiness = ready_probe,
                startup = startup_probe,
                container_name = container_name,
            ),
            deploy_safety_plugin,
        ]

    return compose_plugins(
        consul_service(
            name = name,
            port = port,
            tags = consul_tags + [envoy_consul_tag(path)],
            checks = [consul_check(path, healthcheck_port)],
            meta = consul_meta,
        ),
        *probe_plugins
    )
