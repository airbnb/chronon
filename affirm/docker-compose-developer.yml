# Enhanced Chronon Docker Compose with Spark + Iceberg + MongoDB + S3 + Airflow

services:

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MongoDB - Chronon's built-in KV store support
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodb_data:/opt/mongo/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Note: Polaris removed for simplicity - using Spark's built-in Hive catalog instead
  # This is sufficient for local GroupBy development and testing

  # Airflow Webserver (OPTIONAL - comment out if you don't need orchestration)
  airflow-webserver:
    image: apache/airflow:2.5.3
    ports:
      - "8085:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: webserver
    depends_on:
      - airflow-db
      - airflow-scheduler
    # Simplified health check - just check if container is running
    # Airflow webserver can take time to fully initialize

  # Airflow Scheduler (OPTIONAL - comment out if you don't need orchestration)
  airflow-scheduler:
    image: apache/airflow:2.5.3
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: scheduler
    depends_on:
      - airflow-db
    # Simplified health check - just check if container is running
    # Airflow scheduler can take time to fully initialize

  # Airflow Database (PostgreSQL) - Using PostgreSQL 13 with legacy authentication
  airflow-db:
    image: postgres:13
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DynamoDB Local
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /data"
    volumes:
      - dynamodb_data:/data
    # Note: DynamoDB Local doesn't have curl, so we skip health check
    # The service will be considered ready when the container starts

  # Spark Master
  spark-master:
    image: apache/spark:3.5.2
    ports:
      - "8080:8080"  # Spark UI
      - "7077:7077"  # Spark Master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark_events:/opt/apache/spark/spark-events

  # Spark Worker
  spark-worker:
    image: apache/spark:3.5.2
    depends_on:
      - spark-master
      - minio
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes: []
    scale: 2

  # Chronon Main Container with all components
  chronon-main:
    image: ezvz/chronon
    command: bash -c "spark-shell -i scripts/data-loader.scala && tail -f /dev/null"
    ports:
      - "4040:4040"  # Spark UI
      - "4041:4041"  # Spark UI (backup)
    environment:
      - USER=root
      - SPARK_SUBMIT_PATH=spark-submit
      - PYTHONPATH=/srv/chronon
      - SPARK_VERSION=3.5.2
      - JOB_MODE=spark://spark-master:7077
      - PARALLELISM=4
      - EXECUTOR_MEMORY=2G
      - EXECUTOR_CORES=2
      - DRIVER_MEMORY=1G
      - CHRONON_LOG_TABLE=default.chronon_log_table
      - CHRONON_ONLINE_CLASS=ai.chronon.quickstart.online.ChrononMongoOnlineImpl
      - CHRONON_ONLINE_ARGS=-Zuser=admin -Zpassword=admin -Zhost=mongodb -Zport=27017 -Zdatabase=admin
      # Iceberg Configuration with Spark's built-in Hive catalog
      - SPARK_SQL_EXTENSIONS=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions
      - SPARK_SQL_CATALOG_SPARK_CATALOG=org.apache.iceberg.spark.SparkSessionCatalog
      - SPARK_SQL_CATALOG_SPARK_CATALOG_TYPE=hive
      - SPARK_SQL_CATALOG_SPARK_CATALOG_WAREHOUSE=s3a://chronon/warehouse
      - SPARK_CHRONON_TABLE_WRITE_FORMAT=iceberg
      - SPARK_CHRONON_TABLE_READ_FORMAT=iceberg
      # S3 Configuration
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - S3_ENDPOINT=http://minio:9000
      - S3_PATH_STYLE_ACCESS=true
      # DynamoDB Configuration
      - AWS_DEFAULT_REGION=us-east-1
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
    volumes:
      - ../api/py/test/sample:/srv/chronon
      - ./scripts:/srv/scripts
      - spark_events:/opt/spark/spark-events
    depends_on:
      - spark-master
      - minio
      - mongodb
      - airflow-webserver
      - dynamodb-local

  # Jupyter Notebook for development (ESSENTIAL for GroupBy verification)
  jupyter:
    image: jupyter/pyspark-notebook:latest
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - SPARK_MASTER=spark://spark-master:7077
      - JUPYTER_TOKEN=chronon-dev
    volumes:
      - ../api/py:/home/jovyan/work/chronon-api
      - ../api/py/test/sample:/home/jovyan/work/sample-data
    depends_on:
      - spark-master
      - chronon-main

volumes:
  minio_data:
  mongodb_data:
  airflow_db_data:
  dynamodb_data:
  spark_events:
