load("@io_bazel_rules_scala//scala:scala_cross_version_select.bzl", "select_for_scala_version")

scala_library(
    name = "spark",
    srcs = glob(["**/*.scala"]) +
           select({
               "//tools/flags/spark:spark_3_5": [
                   "//ai/chronon/spark/spark3.5plus:EncoderUtil.scala",
               ],
               "//conditions:default": [
                   "//ai/chronon/spark/spark-default:EncoderUtil.scala",
               ],
           }),
    resources = ["resources/log4j.properties"],
    visibility = ["//visibility:public"],
    deps = [
        "//ai/chronon/aggregator",
        "//ai/chronon/api:api-lib",
        "//ai/chronon/api:api-models",
        "//ai/chronon/online",
        "//third_party/java/spark:spark-exec",
        maven_artifact("com.esotericsoftware:kryo"),
        maven_artifact("com.fasterxml.jackson.core:jackson-core"),
        maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("com.github.jnr:jnr-ffi"),
        maven_artifact("com.google.guava:guava"),
        maven_artifact("com.yahoo.datasketches:sketches-core"),
        maven_artifact("com.yahoo.datasketches:memory"),
        maven_artifact("commons.io:commons-io"),
        maven_artifact("commons.lang:commons-lang"),
        scala_artifact("io.delta:delta-core"),
        maven_artifact("org.apache.kafka:kafka-clients"),
        maven_artifact("org.apache.thrift:libthrift"),
        scala_artifact("org.json4s:json4s-core"),
        scala_artifact("org.json4s:json4s-jackson"),
        scala_artifact("org.json4s:json4s-ast"),
        scala_artifact("org.rogach:scallop"),
        scala_artifact("org.scala-lang.modules:scala-collection-compat"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.slf4j:slf4j-log4j12"),
        maven_artifact("com.google.code.gson:gson"),
    ],
)

jvm_binary(
    name = "spark-assembly",
    deploy_env = ["//third_party/java/spark:spark"],
    main_class = "ai.chronon.spark.Driver",
    runtime_deps = [":spark"],
)
