/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-31")
public class MetaData implements org.apache.thrift.TBase<MetaData, MetaData._Fields>, java.io.Serializable, Cloneable, Comparable<MetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetaData");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("production", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CUSTOM_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("customJson", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencies", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TABLE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableProperties", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField OUTPUT_NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputNamespace", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("team", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MODE_TO_ENV_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("modeToEnvMap", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField CONSISTENCY_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("consistencyCheck", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField SAMPLE_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("samplePercent", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OFFLINE_SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineSchedule", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CONSISTENCY_SAMPLE_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("consistencySamplePercent", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField HISTORICAL_BACKFILL_FIELD_DESC = new org.apache.thrift.protocol.TField("historicalBackfill", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField DEPRECATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deprecationDate", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MetaDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MetaDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public boolean online; // optional
  public boolean production; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String customJson; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> dependencies; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> tableProperties; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String outputNamespace; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String team; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> modeToEnvMap; // optional
  public boolean consistencyCheck; // optional
  public double samplePercent; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String offlineSchedule; // optional
  public double consistencySamplePercent; // optional
  public boolean historicalBackfill; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String deprecationDate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    ONLINE((short)2, "online"),
    PRODUCTION((short)3, "production"),
    CUSTOM_JSON((short)4, "customJson"),
    DEPENDENCIES((short)5, "dependencies"),
    TABLE_PROPERTIES((short)6, "tableProperties"),
    OUTPUT_NAMESPACE((short)7, "outputNamespace"),
    TEAM((short)8, "team"),
    MODE_TO_ENV_MAP((short)9, "modeToEnvMap"),
    CONSISTENCY_CHECK((short)10, "consistencyCheck"),
    SAMPLE_PERCENT((short)11, "samplePercent"),
    OFFLINE_SCHEDULE((short)12, "offlineSchedule"),
    CONSISTENCY_SAMPLE_PERCENT((short)13, "consistencySamplePercent"),
    HISTORICAL_BACKFILL((short)14, "historicalBackfill"),
    DEPRECATION_DATE((short)15, "deprecationDate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ONLINE
          return ONLINE;
        case 3: // PRODUCTION
          return PRODUCTION;
        case 4: // CUSTOM_JSON
          return CUSTOM_JSON;
        case 5: // DEPENDENCIES
          return DEPENDENCIES;
        case 6: // TABLE_PROPERTIES
          return TABLE_PROPERTIES;
        case 7: // OUTPUT_NAMESPACE
          return OUTPUT_NAMESPACE;
        case 8: // TEAM
          return TEAM;
        case 9: // MODE_TO_ENV_MAP
          return MODE_TO_ENV_MAP;
        case 10: // CONSISTENCY_CHECK
          return CONSISTENCY_CHECK;
        case 11: // SAMPLE_PERCENT
          return SAMPLE_PERCENT;
        case 12: // OFFLINE_SCHEDULE
          return OFFLINE_SCHEDULE;
        case 13: // CONSISTENCY_SAMPLE_PERCENT
          return CONSISTENCY_SAMPLE_PERCENT;
        case 14: // HISTORICAL_BACKFILL
          return HISTORICAL_BACKFILL;
        case 15: // DEPRECATION_DATE
          return DEPRECATION_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ONLINE_ISSET_ID = 0;
  private static final int __PRODUCTION_ISSET_ID = 1;
  private static final int __CONSISTENCYCHECK_ISSET_ID = 2;
  private static final int __SAMPLEPERCENT_ISSET_ID = 3;
  private static final int __CONSISTENCYSAMPLEPERCENT_ISSET_ID = 4;
  private static final int __HISTORICALBACKFILL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.ONLINE,_Fields.PRODUCTION,_Fields.CUSTOM_JSON,_Fields.DEPENDENCIES,_Fields.TABLE_PROPERTIES,_Fields.OUTPUT_NAMESPACE,_Fields.TEAM,_Fields.MODE_TO_ENV_MAP,_Fields.CONSISTENCY_CHECK,_Fields.SAMPLE_PERCENT,_Fields.OFFLINE_SCHEDULE,_Fields.CONSISTENCY_SAMPLE_PERCENT,_Fields.HISTORICAL_BACKFILL,_Fields.DEPRECATION_DATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("production", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CUSTOM_JSON, new org.apache.thrift.meta_data.FieldMetaData("customJson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("dependencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TABLE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("tableProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OUTPUT_NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData("outputNamespace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM, new org.apache.thrift.meta_data.FieldMetaData("team", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODE_TO_ENV_MAP, new org.apache.thrift.meta_data.FieldMetaData("modeToEnvMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.CONSISTENCY_CHECK, new org.apache.thrift.meta_data.FieldMetaData("consistencyCheck", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SAMPLE_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("samplePercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OFFLINE_SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("offlineSchedule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSISTENCY_SAMPLE_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("consistencySamplePercent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HISTORICAL_BACKFILL, new org.apache.thrift.meta_data.FieldMetaData("historicalBackfill", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEPRECATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("deprecationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetaData.class, metaDataMap);
  }

  public MetaData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetaData(MetaData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.online = other.online;
    this.production = other.production;
    if (other.isSetCustomJson()) {
      this.customJson = other.customJson;
    }
    if (other.isSetDependencies()) {
      java.util.List<java.lang.String> __this__dependencies = new java.util.ArrayList<java.lang.String>(other.dependencies);
      this.dependencies = __this__dependencies;
    }
    if (other.isSetTableProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__tableProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.tableProperties);
      this.tableProperties = __this__tableProperties;
    }
    if (other.isSetOutputNamespace()) {
      this.outputNamespace = other.outputNamespace;
    }
    if (other.isSetTeam()) {
      this.team = other.team;
    }
    if (other.isSetModeToEnvMap()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> __this__modeToEnvMap = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(other.modeToEnvMap.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> other_element : other.modeToEnvMap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__modeToEnvMap_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.String> __this__modeToEnvMap_copy_value = new java.util.HashMap<java.lang.String,java.lang.String>(other_element_value);

        __this__modeToEnvMap.put(__this__modeToEnvMap_copy_key, __this__modeToEnvMap_copy_value);
      }
      this.modeToEnvMap = __this__modeToEnvMap;
    }
    this.consistencyCheck = other.consistencyCheck;
    this.samplePercent = other.samplePercent;
    if (other.isSetOfflineSchedule()) {
      this.offlineSchedule = other.offlineSchedule;
    }
    this.consistencySamplePercent = other.consistencySamplePercent;
    this.historicalBackfill = other.historicalBackfill;
    if (other.isSetDeprecationDate()) {
      this.deprecationDate = other.deprecationDate;
    }
  }

  public MetaData deepCopy() {
    return new MetaData(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setOnlineIsSet(false);
    this.online = false;
    setProductionIsSet(false);
    this.production = false;
    this.customJson = null;
    this.dependencies = null;
    this.tableProperties = null;
    this.outputNamespace = null;
    this.team = null;
    this.modeToEnvMap = null;
    setConsistencyCheckIsSet(false);
    this.consistencyCheck = false;
    setSamplePercentIsSet(false);
    this.samplePercent = 0.0;
    this.offlineSchedule = null;
    setConsistencySamplePercentIsSet(false);
    this.consistencySamplePercent = 0.0;
    setHistoricalBackfillIsSet(false);
    this.historicalBackfill = false;
    this.deprecationDate = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public MetaData setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isOnline() {
    return this.online;
  }

  public MetaData setOnline(boolean online) {
    this.online = online;
    setOnlineIsSet(true);
    return this;
  }

  public void unsetOnline() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  public void setOnlineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ONLINE_ISSET_ID, value);
  }

  public boolean isProduction() {
    return this.production;
  }

  public MetaData setProduction(boolean production) {
    this.production = production;
    setProductionIsSet(true);
    return this;
  }

  public void unsetProduction() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRODUCTION_ISSET_ID);
  }

  /** Returns true if field production is set (has been assigned a value) and false otherwise */
  public boolean isSetProduction() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRODUCTION_ISSET_ID);
  }

  public void setProductionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRODUCTION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCustomJson() {
    return this.customJson;
  }

  public MetaData setCustomJson(@org.apache.thrift.annotation.Nullable java.lang.String customJson) {
    this.customJson = customJson;
    return this;
  }

  public void unsetCustomJson() {
    this.customJson = null;
  }

  /** Returns true if field customJson is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomJson() {
    return this.customJson != null;
  }

  public void setCustomJsonIsSet(boolean value) {
    if (!value) {
      this.customJson = null;
    }
  }

  public int getDependenciesSize() {
    return (this.dependencies == null) ? 0 : this.dependencies.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDependenciesIterator() {
    return (this.dependencies == null) ? null : this.dependencies.iterator();
  }

  public void addToDependencies(java.lang.String elem) {
    if (this.dependencies == null) {
      this.dependencies = new java.util.ArrayList<java.lang.String>();
    }
    this.dependencies.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDependencies() {
    return this.dependencies;
  }

  public MetaData setDependencies(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public void unsetDependencies() {
    this.dependencies = null;
  }

  /** Returns true if field dependencies is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencies() {
    return this.dependencies != null;
  }

  public void setDependenciesIsSet(boolean value) {
    if (!value) {
      this.dependencies = null;
    }
  }

  public int getTablePropertiesSize() {
    return (this.tableProperties == null) ? 0 : this.tableProperties.size();
  }

  public void putToTableProperties(java.lang.String key, java.lang.String val) {
    if (this.tableProperties == null) {
      this.tableProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.tableProperties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getTableProperties() {
    return this.tableProperties;
  }

  public MetaData setTableProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> tableProperties) {
    this.tableProperties = tableProperties;
    return this;
  }

  public void unsetTableProperties() {
    this.tableProperties = null;
  }

  /** Returns true if field tableProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetTableProperties() {
    return this.tableProperties != null;
  }

  public void setTablePropertiesIsSet(boolean value) {
    if (!value) {
      this.tableProperties = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOutputNamespace() {
    return this.outputNamespace;
  }

  public MetaData setOutputNamespace(@org.apache.thrift.annotation.Nullable java.lang.String outputNamespace) {
    this.outputNamespace = outputNamespace;
    return this;
  }

  public void unsetOutputNamespace() {
    this.outputNamespace = null;
  }

  /** Returns true if field outputNamespace is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputNamespace() {
    return this.outputNamespace != null;
  }

  public void setOutputNamespaceIsSet(boolean value) {
    if (!value) {
      this.outputNamespace = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTeam() {
    return this.team;
  }

  public MetaData setTeam(@org.apache.thrift.annotation.Nullable java.lang.String team) {
    this.team = team;
    return this;
  }

  public void unsetTeam() {
    this.team = null;
  }

  /** Returns true if field team is set (has been assigned a value) and false otherwise */
  public boolean isSetTeam() {
    return this.team != null;
  }

  public void setTeamIsSet(boolean value) {
    if (!value) {
      this.team = null;
    }
  }

  public int getModeToEnvMapSize() {
    return (this.modeToEnvMap == null) ? 0 : this.modeToEnvMap.size();
  }

  public void putToModeToEnvMap(java.lang.String key, java.util.Map<java.lang.String,java.lang.String> val) {
    if (this.modeToEnvMap == null) {
      this.modeToEnvMap = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.modeToEnvMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> getModeToEnvMap() {
    return this.modeToEnvMap;
  }

  public MetaData setModeToEnvMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> modeToEnvMap) {
    this.modeToEnvMap = modeToEnvMap;
    return this;
  }

  public void unsetModeToEnvMap() {
    this.modeToEnvMap = null;
  }

  /** Returns true if field modeToEnvMap is set (has been assigned a value) and false otherwise */
  public boolean isSetModeToEnvMap() {
    return this.modeToEnvMap != null;
  }

  public void setModeToEnvMapIsSet(boolean value) {
    if (!value) {
      this.modeToEnvMap = null;
    }
  }

  public boolean isConsistencyCheck() {
    return this.consistencyCheck;
  }

  public MetaData setConsistencyCheck(boolean consistencyCheck) {
    this.consistencyCheck = consistencyCheck;
    setConsistencyCheckIsSet(true);
    return this;
  }

  public void unsetConsistencyCheck() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSISTENCYCHECK_ISSET_ID);
  }

  /** Returns true if field consistencyCheck is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistencyCheck() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSISTENCYCHECK_ISSET_ID);
  }

  public void setConsistencyCheckIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSISTENCYCHECK_ISSET_ID, value);
  }

  public double getSamplePercent() {
    return this.samplePercent;
  }

  public MetaData setSamplePercent(double samplePercent) {
    this.samplePercent = samplePercent;
    setSamplePercentIsSet(true);
    return this;
  }

  public void unsetSamplePercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLEPERCENT_ISSET_ID);
  }

  /** Returns true if field samplePercent is set (has been assigned a value) and false otherwise */
  public boolean isSetSamplePercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLEPERCENT_ISSET_ID);
  }

  public void setSamplePercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLEPERCENT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOfflineSchedule() {
    return this.offlineSchedule;
  }

  public MetaData setOfflineSchedule(@org.apache.thrift.annotation.Nullable java.lang.String offlineSchedule) {
    this.offlineSchedule = offlineSchedule;
    return this;
  }

  public void unsetOfflineSchedule() {
    this.offlineSchedule = null;
  }

  /** Returns true if field offlineSchedule is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineSchedule() {
    return this.offlineSchedule != null;
  }

  public void setOfflineScheduleIsSet(boolean value) {
    if (!value) {
      this.offlineSchedule = null;
    }
  }

  public double getConsistencySamplePercent() {
    return this.consistencySamplePercent;
  }

  public MetaData setConsistencySamplePercent(double consistencySamplePercent) {
    this.consistencySamplePercent = consistencySamplePercent;
    setConsistencySamplePercentIsSet(true);
    return this;
  }

  public void unsetConsistencySamplePercent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSISTENCYSAMPLEPERCENT_ISSET_ID);
  }

  /** Returns true if field consistencySamplePercent is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistencySamplePercent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSISTENCYSAMPLEPERCENT_ISSET_ID);
  }

  public void setConsistencySamplePercentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSISTENCYSAMPLEPERCENT_ISSET_ID, value);
  }

  public boolean isHistoricalBackfill() {
    return this.historicalBackfill;
  }

  public MetaData setHistoricalBackfill(boolean historicalBackfill) {
    this.historicalBackfill = historicalBackfill;
    setHistoricalBackfillIsSet(true);
    return this;
  }

  public void unsetHistoricalBackfill() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HISTORICALBACKFILL_ISSET_ID);
  }

  /** Returns true if field historicalBackfill is set (has been assigned a value) and false otherwise */
  public boolean isSetHistoricalBackfill() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HISTORICALBACKFILL_ISSET_ID);
  }

  public void setHistoricalBackfillIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HISTORICALBACKFILL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeprecationDate() {
    return this.deprecationDate;
  }

  public MetaData setDeprecationDate(@org.apache.thrift.annotation.Nullable java.lang.String deprecationDate) {
    this.deprecationDate = deprecationDate;
    return this;
  }

  public void unsetDeprecationDate() {
    this.deprecationDate = null;
  }

  /** Returns true if field deprecationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDeprecationDate() {
    return this.deprecationDate != null;
  }

  public void setDeprecationDateIsSet(boolean value) {
    if (!value) {
      this.deprecationDate = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((java.lang.Boolean)value);
      }
      break;

    case PRODUCTION:
      if (value == null) {
        unsetProduction();
      } else {
        setProduction((java.lang.Boolean)value);
      }
      break;

    case CUSTOM_JSON:
      if (value == null) {
        unsetCustomJson();
      } else {
        setCustomJson((java.lang.String)value);
      }
      break;

    case DEPENDENCIES:
      if (value == null) {
        unsetDependencies();
      } else {
        setDependencies((java.util.List<java.lang.String>)value);
      }
      break;

    case TABLE_PROPERTIES:
      if (value == null) {
        unsetTableProperties();
      } else {
        setTableProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case OUTPUT_NAMESPACE:
      if (value == null) {
        unsetOutputNamespace();
      } else {
        setOutputNamespace((java.lang.String)value);
      }
      break;

    case TEAM:
      if (value == null) {
        unsetTeam();
      } else {
        setTeam((java.lang.String)value);
      }
      break;

    case MODE_TO_ENV_MAP:
      if (value == null) {
        unsetModeToEnvMap();
      } else {
        setModeToEnvMap((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    case CONSISTENCY_CHECK:
      if (value == null) {
        unsetConsistencyCheck();
      } else {
        setConsistencyCheck((java.lang.Boolean)value);
      }
      break;

    case SAMPLE_PERCENT:
      if (value == null) {
        unsetSamplePercent();
      } else {
        setSamplePercent((java.lang.Double)value);
      }
      break;

    case OFFLINE_SCHEDULE:
      if (value == null) {
        unsetOfflineSchedule();
      } else {
        setOfflineSchedule((java.lang.String)value);
      }
      break;

    case CONSISTENCY_SAMPLE_PERCENT:
      if (value == null) {
        unsetConsistencySamplePercent();
      } else {
        setConsistencySamplePercent((java.lang.Double)value);
      }
      break;

    case HISTORICAL_BACKFILL:
      if (value == null) {
        unsetHistoricalBackfill();
      } else {
        setHistoricalBackfill((java.lang.Boolean)value);
      }
      break;

    case DEPRECATION_DATE:
      if (value == null) {
        unsetDeprecationDate();
      } else {
        setDeprecationDate((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ONLINE:
      return isOnline();

    case PRODUCTION:
      return isProduction();

    case CUSTOM_JSON:
      return getCustomJson();

    case DEPENDENCIES:
      return getDependencies();

    case TABLE_PROPERTIES:
      return getTableProperties();

    case OUTPUT_NAMESPACE:
      return getOutputNamespace();

    case TEAM:
      return getTeam();

    case MODE_TO_ENV_MAP:
      return getModeToEnvMap();

    case CONSISTENCY_CHECK:
      return isConsistencyCheck();

    case SAMPLE_PERCENT:
      return getSamplePercent();

    case OFFLINE_SCHEDULE:
      return getOfflineSchedule();

    case CONSISTENCY_SAMPLE_PERCENT:
      return getConsistencySamplePercent();

    case HISTORICAL_BACKFILL:
      return isHistoricalBackfill();

    case DEPRECATION_DATE:
      return getDeprecationDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ONLINE:
      return isSetOnline();
    case PRODUCTION:
      return isSetProduction();
    case CUSTOM_JSON:
      return isSetCustomJson();
    case DEPENDENCIES:
      return isSetDependencies();
    case TABLE_PROPERTIES:
      return isSetTableProperties();
    case OUTPUT_NAMESPACE:
      return isSetOutputNamespace();
    case TEAM:
      return isSetTeam();
    case MODE_TO_ENV_MAP:
      return isSetModeToEnvMap();
    case CONSISTENCY_CHECK:
      return isSetConsistencyCheck();
    case SAMPLE_PERCENT:
      return isSetSamplePercent();
    case OFFLINE_SCHEDULE:
      return isSetOfflineSchedule();
    case CONSISTENCY_SAMPLE_PERCENT:
      return isSetConsistencySamplePercent();
    case HISTORICAL_BACKFILL:
      return isSetHistoricalBackfill();
    case DEPRECATION_DATE:
      return isSetDeprecationDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MetaData)
      return this.equals((MetaData)that);
    return false;
  }

  public boolean equals(MetaData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_online = true && this.isSetOnline();
    boolean that_present_online = true && that.isSetOnline();
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (this.online != that.online)
        return false;
    }

    boolean this_present_production = true && this.isSetProduction();
    boolean that_present_production = true && that.isSetProduction();
    if (this_present_production || that_present_production) {
      if (!(this_present_production && that_present_production))
        return false;
      if (this.production != that.production)
        return false;
    }

    boolean this_present_customJson = true && this.isSetCustomJson();
    boolean that_present_customJson = true && that.isSetCustomJson();
    if (this_present_customJson || that_present_customJson) {
      if (!(this_present_customJson && that_present_customJson))
        return false;
      if (!this.customJson.equals(that.customJson))
        return false;
    }

    boolean this_present_dependencies = true && this.isSetDependencies();
    boolean that_present_dependencies = true && that.isSetDependencies();
    if (this_present_dependencies || that_present_dependencies) {
      if (!(this_present_dependencies && that_present_dependencies))
        return false;
      if (!this.dependencies.equals(that.dependencies))
        return false;
    }

    boolean this_present_tableProperties = true && this.isSetTableProperties();
    boolean that_present_tableProperties = true && that.isSetTableProperties();
    if (this_present_tableProperties || that_present_tableProperties) {
      if (!(this_present_tableProperties && that_present_tableProperties))
        return false;
      if (!this.tableProperties.equals(that.tableProperties))
        return false;
    }

    boolean this_present_outputNamespace = true && this.isSetOutputNamespace();
    boolean that_present_outputNamespace = true && that.isSetOutputNamespace();
    if (this_present_outputNamespace || that_present_outputNamespace) {
      if (!(this_present_outputNamespace && that_present_outputNamespace))
        return false;
      if (!this.outputNamespace.equals(that.outputNamespace))
        return false;
    }

    boolean this_present_team = true && this.isSetTeam();
    boolean that_present_team = true && that.isSetTeam();
    if (this_present_team || that_present_team) {
      if (!(this_present_team && that_present_team))
        return false;
      if (!this.team.equals(that.team))
        return false;
    }

    boolean this_present_modeToEnvMap = true && this.isSetModeToEnvMap();
    boolean that_present_modeToEnvMap = true && that.isSetModeToEnvMap();
    if (this_present_modeToEnvMap || that_present_modeToEnvMap) {
      if (!(this_present_modeToEnvMap && that_present_modeToEnvMap))
        return false;
      if (!this.modeToEnvMap.equals(that.modeToEnvMap))
        return false;
    }

    boolean this_present_consistencyCheck = true && this.isSetConsistencyCheck();
    boolean that_present_consistencyCheck = true && that.isSetConsistencyCheck();
    if (this_present_consistencyCheck || that_present_consistencyCheck) {
      if (!(this_present_consistencyCheck && that_present_consistencyCheck))
        return false;
      if (this.consistencyCheck != that.consistencyCheck)
        return false;
    }

    boolean this_present_samplePercent = true && this.isSetSamplePercent();
    boolean that_present_samplePercent = true && that.isSetSamplePercent();
    if (this_present_samplePercent || that_present_samplePercent) {
      if (!(this_present_samplePercent && that_present_samplePercent))
        return false;
      if (this.samplePercent != that.samplePercent)
        return false;
    }

    boolean this_present_offlineSchedule = true && this.isSetOfflineSchedule();
    boolean that_present_offlineSchedule = true && that.isSetOfflineSchedule();
    if (this_present_offlineSchedule || that_present_offlineSchedule) {
      if (!(this_present_offlineSchedule && that_present_offlineSchedule))
        return false;
      if (!this.offlineSchedule.equals(that.offlineSchedule))
        return false;
    }

    boolean this_present_consistencySamplePercent = true && this.isSetConsistencySamplePercent();
    boolean that_present_consistencySamplePercent = true && that.isSetConsistencySamplePercent();
    if (this_present_consistencySamplePercent || that_present_consistencySamplePercent) {
      if (!(this_present_consistencySamplePercent && that_present_consistencySamplePercent))
        return false;
      if (this.consistencySamplePercent != that.consistencySamplePercent)
        return false;
    }

    boolean this_present_historicalBackfill = true && this.isSetHistoricalBackfill();
    boolean that_present_historicalBackfill = true && that.isSetHistoricalBackfill();
    if (this_present_historicalBackfill || that_present_historicalBackfill) {
      if (!(this_present_historicalBackfill && that_present_historicalBackfill))
        return false;
      if (this.historicalBackfill != that.historicalBackfill)
        return false;
    }

    boolean this_present_deprecationDate = true && this.isSetDeprecationDate();
    boolean that_present_deprecationDate = true && that.isSetDeprecationDate();
    if (this_present_deprecationDate || that_present_deprecationDate) {
      if (!(this_present_deprecationDate && that_present_deprecationDate))
        return false;
      if (!this.deprecationDate.equals(that.deprecationDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetOnline()) ? 131071 : 524287);
    if (isSetOnline())
      hashCode = hashCode * 8191 + ((online) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetProduction()) ? 131071 : 524287);
    if (isSetProduction())
      hashCode = hashCode * 8191 + ((production) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCustomJson()) ? 131071 : 524287);
    if (isSetCustomJson())
      hashCode = hashCode * 8191 + customJson.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependencies()) ? 131071 : 524287);
    if (isSetDependencies())
      hashCode = hashCode * 8191 + dependencies.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableProperties()) ? 131071 : 524287);
    if (isSetTableProperties())
      hashCode = hashCode * 8191 + tableProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputNamespace()) ? 131071 : 524287);
    if (isSetOutputNamespace())
      hashCode = hashCode * 8191 + outputNamespace.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeam()) ? 131071 : 524287);
    if (isSetTeam())
      hashCode = hashCode * 8191 + team.hashCode();

    hashCode = hashCode * 8191 + ((isSetModeToEnvMap()) ? 131071 : 524287);
    if (isSetModeToEnvMap())
      hashCode = hashCode * 8191 + modeToEnvMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsistencyCheck()) ? 131071 : 524287);
    if (isSetConsistencyCheck())
      hashCode = hashCode * 8191 + ((consistencyCheck) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSamplePercent()) ? 131071 : 524287);
    if (isSetSamplePercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(samplePercent);

    hashCode = hashCode * 8191 + ((isSetOfflineSchedule()) ? 131071 : 524287);
    if (isSetOfflineSchedule())
      hashCode = hashCode * 8191 + offlineSchedule.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsistencySamplePercent()) ? 131071 : 524287);
    if (isSetConsistencySamplePercent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(consistencySamplePercent);

    hashCode = hashCode * 8191 + ((isSetHistoricalBackfill()) ? 131071 : 524287);
    if (isSetHistoricalBackfill())
      hashCode = hashCode * 8191 + ((historicalBackfill) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDeprecationDate()) ? 131071 : 524287);
    if (isSetDeprecationDate())
      hashCode = hashCode * 8191 + deprecationDate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOnline()).compareTo(other.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, other.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProduction()).compareTo(other.isSetProduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.production, other.production);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomJson()).compareTo(other.isSetCustomJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customJson, other.customJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependencies()).compareTo(other.isSetDependencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencies, other.dependencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTableProperties()).compareTo(other.isSetTableProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableProperties, other.tableProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutputNamespace()).compareTo(other.isSetOutputNamespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputNamespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputNamespace, other.outputNamespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeam()).compareTo(other.isSetTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.team, other.team);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModeToEnvMap()).compareTo(other.isSetModeToEnvMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModeToEnvMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modeToEnvMap, other.modeToEnvMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConsistencyCheck()).compareTo(other.isSetConsistencyCheck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistencyCheck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistencyCheck, other.consistencyCheck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSamplePercent()).compareTo(other.isSetSamplePercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamplePercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samplePercent, other.samplePercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOfflineSchedule()).compareTo(other.isSetOfflineSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineSchedule, other.offlineSchedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConsistencySamplePercent()).compareTo(other.isSetConsistencySamplePercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistencySamplePercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistencySamplePercent, other.consistencySamplePercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHistoricalBackfill()).compareTo(other.isSetHistoricalBackfill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistoricalBackfill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historicalBackfill, other.historicalBackfill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeprecationDate()).compareTo(other.isSetDeprecationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeprecationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprecationDate, other.deprecationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MetaData(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetOnline()) {
      if (!first) sb.append(", ");
      sb.append("online:");
      sb.append(this.online);
      first = false;
    }
    if (isSetProduction()) {
      if (!first) sb.append(", ");
      sb.append("production:");
      sb.append(this.production);
      first = false;
    }
    if (isSetCustomJson()) {
      if (!first) sb.append(", ");
      sb.append("customJson:");
      if (this.customJson == null) {
        sb.append("null");
      } else {
        sb.append(this.customJson);
      }
      first = false;
    }
    if (isSetDependencies()) {
      if (!first) sb.append(", ");
      sb.append("dependencies:");
      if (this.dependencies == null) {
        sb.append("null");
      } else {
        sb.append(this.dependencies);
      }
      first = false;
    }
    if (isSetTableProperties()) {
      if (!first) sb.append(", ");
      sb.append("tableProperties:");
      if (this.tableProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.tableProperties);
      }
      first = false;
    }
    if (isSetOutputNamespace()) {
      if (!first) sb.append(", ");
      sb.append("outputNamespace:");
      if (this.outputNamespace == null) {
        sb.append("null");
      } else {
        sb.append(this.outputNamespace);
      }
      first = false;
    }
    if (isSetTeam()) {
      if (!first) sb.append(", ");
      sb.append("team:");
      if (this.team == null) {
        sb.append("null");
      } else {
        sb.append(this.team);
      }
      first = false;
    }
    if (isSetModeToEnvMap()) {
      if (!first) sb.append(", ");
      sb.append("modeToEnvMap:");
      if (this.modeToEnvMap == null) {
        sb.append("null");
      } else {
        sb.append(this.modeToEnvMap);
      }
      first = false;
    }
    if (isSetConsistencyCheck()) {
      if (!first) sb.append(", ");
      sb.append("consistencyCheck:");
      sb.append(this.consistencyCheck);
      first = false;
    }
    if (isSetSamplePercent()) {
      if (!first) sb.append(", ");
      sb.append("samplePercent:");
      sb.append(this.samplePercent);
      first = false;
    }
    if (isSetOfflineSchedule()) {
      if (!first) sb.append(", ");
      sb.append("offlineSchedule:");
      if (this.offlineSchedule == null) {
        sb.append("null");
      } else {
        sb.append(this.offlineSchedule);
      }
      first = false;
    }
    if (isSetConsistencySamplePercent()) {
      if (!first) sb.append(", ");
      sb.append("consistencySamplePercent:");
      sb.append(this.consistencySamplePercent);
      first = false;
    }
    if (isSetHistoricalBackfill()) {
      if (!first) sb.append(", ");
      sb.append("historicalBackfill:");
      sb.append(this.historicalBackfill);
      first = false;
    }
    if (isSetDeprecationDate()) {
      if (!first) sb.append(", ");
      sb.append("deprecationDate:");
      if (this.deprecationDate == null) {
        sb.append("null");
      } else {
        sb.append(this.deprecationDate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetaDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MetaDataStandardScheme getScheme() {
      return new MetaDataStandardScheme();
    }
  }

  private static class MetaDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<MetaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.online = iprot.readBool();
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.production = iprot.readBool();
              struct.setProductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUSTOM_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customJson = iprot.readString();
              struct.setCustomJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPENDENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.dependencies = new java.util.ArrayList<java.lang.String>(_list70.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = iprot.readString();
                  struct.dependencies.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setDependenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TABLE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                struct.tableProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map73.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key74;
                @org.apache.thrift.annotation.Nullable java.lang.String _val75;
                for (int _i76 = 0; _i76 < _map73.size; ++_i76)
                {
                  _key74 = iprot.readString();
                  _val75 = iprot.readString();
                  struct.tableProperties.put(_key74, _val75);
                }
                iprot.readMapEnd();
              }
              struct.setTablePropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTPUT_NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputNamespace = iprot.readString();
              struct.setOutputNamespaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.team = iprot.readString();
              struct.setTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MODE_TO_ENV_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
                struct.modeToEnvMap = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map77.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key78;
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _val79;
                for (int _i80 = 0; _i80 < _map77.size; ++_i80)
                {
                  _key78 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map81 = iprot.readMapBegin();
                    _val79 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map81.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key82;
                    @org.apache.thrift.annotation.Nullable java.lang.String _val83;
                    for (int _i84 = 0; _i84 < _map81.size; ++_i84)
                    {
                      _key82 = iprot.readString();
                      _val83 = iprot.readString();
                      _val79.put(_key82, _val83);
                    }
                    iprot.readMapEnd();
                  }
                  struct.modeToEnvMap.put(_key78, _val79);
                }
                iprot.readMapEnd();
              }
              struct.setModeToEnvMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONSISTENCY_CHECK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.consistencyCheck = iprot.readBool();
              struct.setConsistencyCheckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SAMPLE_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.samplePercent = iprot.readDouble();
              struct.setSamplePercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OFFLINE_SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.offlineSchedule = iprot.readString();
              struct.setOfflineScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONSISTENCY_SAMPLE_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consistencySamplePercent = iprot.readDouble();
              struct.setConsistencySamplePercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HISTORICAL_BACKFILL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.historicalBackfill = iprot.readBool();
              struct.setHistoricalBackfillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEPRECATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deprecationDate = iprot.readString();
              struct.setDeprecationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOnline()) {
        oprot.writeFieldBegin(ONLINE_FIELD_DESC);
        oprot.writeBool(struct.online);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProduction()) {
        oprot.writeFieldBegin(PRODUCTION_FIELD_DESC);
        oprot.writeBool(struct.production);
        oprot.writeFieldEnd();
      }
      if (struct.customJson != null) {
        if (struct.isSetCustomJson()) {
          oprot.writeFieldBegin(CUSTOM_JSON_FIELD_DESC);
          oprot.writeString(struct.customJson);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dependencies != null) {
        if (struct.isSetDependencies()) {
          oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dependencies.size()));
            for (java.lang.String _iter85 : struct.dependencies)
            {
              oprot.writeString(_iter85);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tableProperties != null) {
        if (struct.isSetTableProperties()) {
          oprot.writeFieldBegin(TABLE_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tableProperties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter86 : struct.tableProperties.entrySet())
            {
              oprot.writeString(_iter86.getKey());
              oprot.writeString(_iter86.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outputNamespace != null) {
        if (struct.isSetOutputNamespace()) {
          oprot.writeFieldBegin(OUTPUT_NAMESPACE_FIELD_DESC);
          oprot.writeString(struct.outputNamespace);
          oprot.writeFieldEnd();
        }
      }
      if (struct.team != null) {
        if (struct.isSetTeam()) {
          oprot.writeFieldBegin(TEAM_FIELD_DESC);
          oprot.writeString(struct.team);
          oprot.writeFieldEnd();
        }
      }
      if (struct.modeToEnvMap != null) {
        if (struct.isSetModeToEnvMap()) {
          oprot.writeFieldBegin(MODE_TO_ENV_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.modeToEnvMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter87 : struct.modeToEnvMap.entrySet())
            {
              oprot.writeString(_iter87.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter87.getValue().size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter88 : _iter87.getValue().entrySet())
                {
                  oprot.writeString(_iter88.getKey());
                  oprot.writeString(_iter88.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConsistencyCheck()) {
        oprot.writeFieldBegin(CONSISTENCY_CHECK_FIELD_DESC);
        oprot.writeBool(struct.consistencyCheck);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSamplePercent()) {
        oprot.writeFieldBegin(SAMPLE_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.samplePercent);
        oprot.writeFieldEnd();
      }
      if (struct.offlineSchedule != null) {
        if (struct.isSetOfflineSchedule()) {
          oprot.writeFieldBegin(OFFLINE_SCHEDULE_FIELD_DESC);
          oprot.writeString(struct.offlineSchedule);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConsistencySamplePercent()) {
        oprot.writeFieldBegin(CONSISTENCY_SAMPLE_PERCENT_FIELD_DESC);
        oprot.writeDouble(struct.consistencySamplePercent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHistoricalBackfill()) {
        oprot.writeFieldBegin(HISTORICAL_BACKFILL_FIELD_DESC);
        oprot.writeBool(struct.historicalBackfill);
        oprot.writeFieldEnd();
      }
      if (struct.deprecationDate != null) {
        if (struct.isSetDeprecationDate()) {
          oprot.writeFieldBegin(DEPRECATION_DATE_FIELD_DESC);
          oprot.writeString(struct.deprecationDate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetaDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MetaDataTupleScheme getScheme() {
      return new MetaDataTupleScheme();
    }
  }

  private static class MetaDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<MetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetOnline()) {
        optionals.set(1);
      }
      if (struct.isSetProduction()) {
        optionals.set(2);
      }
      if (struct.isSetCustomJson()) {
        optionals.set(3);
      }
      if (struct.isSetDependencies()) {
        optionals.set(4);
      }
      if (struct.isSetTableProperties()) {
        optionals.set(5);
      }
      if (struct.isSetOutputNamespace()) {
        optionals.set(6);
      }
      if (struct.isSetTeam()) {
        optionals.set(7);
      }
      if (struct.isSetModeToEnvMap()) {
        optionals.set(8);
      }
      if (struct.isSetConsistencyCheck()) {
        optionals.set(9);
      }
      if (struct.isSetSamplePercent()) {
        optionals.set(10);
      }
      if (struct.isSetOfflineSchedule()) {
        optionals.set(11);
      }
      if (struct.isSetConsistencySamplePercent()) {
        optionals.set(12);
      }
      if (struct.isSetHistoricalBackfill()) {
        optionals.set(13);
      }
      if (struct.isSetDeprecationDate()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOnline()) {
        oprot.writeBool(struct.online);
      }
      if (struct.isSetProduction()) {
        oprot.writeBool(struct.production);
      }
      if (struct.isSetCustomJson()) {
        oprot.writeString(struct.customJson);
      }
      if (struct.isSetDependencies()) {
        {
          oprot.writeI32(struct.dependencies.size());
          for (java.lang.String _iter89 : struct.dependencies)
          {
            oprot.writeString(_iter89);
          }
        }
      }
      if (struct.isSetTableProperties()) {
        {
          oprot.writeI32(struct.tableProperties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter90 : struct.tableProperties.entrySet())
          {
            oprot.writeString(_iter90.getKey());
            oprot.writeString(_iter90.getValue());
          }
        }
      }
      if (struct.isSetOutputNamespace()) {
        oprot.writeString(struct.outputNamespace);
      }
      if (struct.isSetTeam()) {
        oprot.writeString(struct.team);
      }
      if (struct.isSetModeToEnvMap()) {
        {
          oprot.writeI32(struct.modeToEnvMap.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter91 : struct.modeToEnvMap.entrySet())
          {
            oprot.writeString(_iter91.getKey());
            {
              oprot.writeI32(_iter91.getValue().size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter92 : _iter91.getValue().entrySet())
              {
                oprot.writeString(_iter92.getKey());
                oprot.writeString(_iter92.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetConsistencyCheck()) {
        oprot.writeBool(struct.consistencyCheck);
      }
      if (struct.isSetSamplePercent()) {
        oprot.writeDouble(struct.samplePercent);
      }
      if (struct.isSetOfflineSchedule()) {
        oprot.writeString(struct.offlineSchedule);
      }
      if (struct.isSetConsistencySamplePercent()) {
        oprot.writeDouble(struct.consistencySamplePercent);
      }
      if (struct.isSetHistoricalBackfill()) {
        oprot.writeBool(struct.historicalBackfill);
      }
      if (struct.isSetDeprecationDate()) {
        oprot.writeString(struct.deprecationDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.online = iprot.readBool();
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(2)) {
        struct.production = iprot.readBool();
        struct.setProductionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.customJson = iprot.readString();
        struct.setCustomJsonIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dependencies = new java.util.ArrayList<java.lang.String>(_list93.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readString();
            struct.dependencies.add(_elem94);
          }
        }
        struct.setDependenciesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tableProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map96.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key97;
          @org.apache.thrift.annotation.Nullable java.lang.String _val98;
          for (int _i99 = 0; _i99 < _map96.size; ++_i99)
          {
            _key97 = iprot.readString();
            _val98 = iprot.readString();
            struct.tableProperties.put(_key97, _val98);
          }
        }
        struct.setTablePropertiesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outputNamespace = iprot.readString();
        struct.setOutputNamespaceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.team = iprot.readString();
        struct.setTeamIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.modeToEnvMap = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map100.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key101;
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> _val102;
          for (int _i103 = 0; _i103 < _map100.size; ++_i103)
          {
            _key101 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map104 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val102 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map104.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key105;
              @org.apache.thrift.annotation.Nullable java.lang.String _val106;
              for (int _i107 = 0; _i107 < _map104.size; ++_i107)
              {
                _key105 = iprot.readString();
                _val106 = iprot.readString();
                _val102.put(_key105, _val106);
              }
            }
            struct.modeToEnvMap.put(_key101, _val102);
          }
        }
        struct.setModeToEnvMapIsSet(true);
      }
      if (incoming.get(9)) {
        struct.consistencyCheck = iprot.readBool();
        struct.setConsistencyCheckIsSet(true);
      }
      if (incoming.get(10)) {
        struct.samplePercent = iprot.readDouble();
        struct.setSamplePercentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.offlineSchedule = iprot.readString();
        struct.setOfflineScheduleIsSet(true);
      }
      if (incoming.get(12)) {
        struct.consistencySamplePercent = iprot.readDouble();
        struct.setConsistencySamplePercentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.historicalBackfill = iprot.readBool();
        struct.setHistoricalBackfillIsSet(true);
      }
      if (incoming.get(14)) {
        struct.deprecationDate = iprot.readString();
        struct.setDeprecationDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

