/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-31")
public class ExternalSource implements org.apache.thrift.TBase<ExternalSource, ExternalSource._Fields>, java.io.Serializable, Cloneable, Comparable<ExternalSource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExternalSource");

  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("keySchema", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("valueSchema", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExternalSourceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExternalSourceTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable MetaData metadata; // optional
  public @org.apache.thrift.annotation.Nullable TDataType keySchema; // optional
  public @org.apache.thrift.annotation.Nullable TDataType valueSchema; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    METADATA((short)1, "metadata"),
    KEY_SCHEMA((short)2, "keySchema"),
    VALUE_SCHEMA((short)3, "valueSchema");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METADATA
          return METADATA;
        case 2: // KEY_SCHEMA
          return KEY_SCHEMA;
        case 3: // VALUE_SCHEMA
          return VALUE_SCHEMA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.METADATA,_Fields.KEY_SCHEMA,_Fields.VALUE_SCHEMA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MetaData")));
    tmpMap.put(_Fields.KEY_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("keySchema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDataType")));
    tmpMap.put(_Fields.VALUE_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("valueSchema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDataType")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExternalSource.class, metaDataMap);
  }

  public ExternalSource() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExternalSource(ExternalSource other) {
    if (other.isSetMetadata()) {
      this.metadata = new MetaData(other.metadata);
    }
    if (other.isSetKeySchema()) {
      this.keySchema = new TDataType(other.keySchema);
    }
    if (other.isSetValueSchema()) {
      this.valueSchema = new TDataType(other.valueSchema);
    }
  }

  public ExternalSource deepCopy() {
    return new ExternalSource(this);
  }

  @Override
  public void clear() {
    this.metadata = null;
    this.keySchema = null;
    this.valueSchema = null;
  }

  @org.apache.thrift.annotation.Nullable
  public MetaData getMetadata() {
    return this.metadata;
  }

  public ExternalSource setMetadata(@org.apache.thrift.annotation.Nullable MetaData metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDataType getKeySchema() {
    return this.keySchema;
  }

  public ExternalSource setKeySchema(@org.apache.thrift.annotation.Nullable TDataType keySchema) {
    this.keySchema = keySchema;
    return this;
  }

  public void unsetKeySchema() {
    this.keySchema = null;
  }

  /** Returns true if field keySchema is set (has been assigned a value) and false otherwise */
  public boolean isSetKeySchema() {
    return this.keySchema != null;
  }

  public void setKeySchemaIsSet(boolean value) {
    if (!value) {
      this.keySchema = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDataType getValueSchema() {
    return this.valueSchema;
  }

  public ExternalSource setValueSchema(@org.apache.thrift.annotation.Nullable TDataType valueSchema) {
    this.valueSchema = valueSchema;
    return this;
  }

  public void unsetValueSchema() {
    this.valueSchema = null;
  }

  /** Returns true if field valueSchema is set (has been assigned a value) and false otherwise */
  public boolean isSetValueSchema() {
    return this.valueSchema != null;
  }

  public void setValueSchemaIsSet(boolean value) {
    if (!value) {
      this.valueSchema = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((MetaData)value);
      }
      break;

    case KEY_SCHEMA:
      if (value == null) {
        unsetKeySchema();
      } else {
        setKeySchema((TDataType)value);
      }
      break;

    case VALUE_SCHEMA:
      if (value == null) {
        unsetValueSchema();
      } else {
        setValueSchema((TDataType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case METADATA:
      return getMetadata();

    case KEY_SCHEMA:
      return getKeySchema();

    case VALUE_SCHEMA:
      return getValueSchema();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case METADATA:
      return isSetMetadata();
    case KEY_SCHEMA:
      return isSetKeySchema();
    case VALUE_SCHEMA:
      return isSetValueSchema();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExternalSource)
      return this.equals((ExternalSource)that);
    return false;
  }

  public boolean equals(ExternalSource that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_keySchema = true && this.isSetKeySchema();
    boolean that_present_keySchema = true && that.isSetKeySchema();
    if (this_present_keySchema || that_present_keySchema) {
      if (!(this_present_keySchema && that_present_keySchema))
        return false;
      if (!this.keySchema.equals(that.keySchema))
        return false;
    }

    boolean this_present_valueSchema = true && this.isSetValueSchema();
    boolean that_present_valueSchema = true && that.isSetValueSchema();
    if (this_present_valueSchema || that_present_valueSchema) {
      if (!(this_present_valueSchema && that_present_valueSchema))
        return false;
      if (!this.valueSchema.equals(that.valueSchema))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
    if (isSetMetadata())
      hashCode = hashCode * 8191 + metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeySchema()) ? 131071 : 524287);
    if (isSetKeySchema())
      hashCode = hashCode * 8191 + keySchema.hashCode();

    hashCode = hashCode * 8191 + ((isSetValueSchema()) ? 131071 : 524287);
    if (isSetValueSchema())
      hashCode = hashCode * 8191 + valueSchema.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExternalSource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeySchema()).compareTo(other.isSetKeySchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeySchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keySchema, other.keySchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValueSchema()).compareTo(other.isSetValueSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueSchema, other.valueSchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExternalSource(");
    boolean first = true;

    if (isSetMetadata()) {
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    if (isSetKeySchema()) {
      if (!first) sb.append(", ");
      sb.append("keySchema:");
      if (this.keySchema == null) {
        sb.append("null");
      } else {
        sb.append(this.keySchema);
      }
      first = false;
    }
    if (isSetValueSchema()) {
      if (!first) sb.append(", ");
      sb.append("valueSchema:");
      if (this.valueSchema == null) {
        sb.append("null");
      } else {
        sb.append(this.valueSchema);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExternalSourceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExternalSourceStandardScheme getScheme() {
      return new ExternalSourceStandardScheme();
    }
  }

  private static class ExternalSourceStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExternalSource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExternalSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new MetaData();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.keySchema = new TDataType();
              struct.keySchema.read(iprot);
              struct.setKeySchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valueSchema = new TDataType();
              struct.valueSchema.read(iprot);
              struct.setValueSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExternalSource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          struct.metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keySchema != null) {
        if (struct.isSetKeySchema()) {
          oprot.writeFieldBegin(KEY_SCHEMA_FIELD_DESC);
          struct.keySchema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.valueSchema != null) {
        if (struct.isSetValueSchema()) {
          oprot.writeFieldBegin(VALUE_SCHEMA_FIELD_DESC);
          struct.valueSchema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExternalSourceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExternalSourceTupleScheme getScheme() {
      return new ExternalSourceTupleScheme();
    }
  }

  private static class ExternalSourceTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExternalSource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExternalSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMetadata()) {
        optionals.set(0);
      }
      if (struct.isSetKeySchema()) {
        optionals.set(1);
      }
      if (struct.isSetValueSchema()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMetadata()) {
        struct.metadata.write(oprot);
      }
      if (struct.isSetKeySchema()) {
        struct.keySchema.write(oprot);
      }
      if (struct.isSetValueSchema()) {
        struct.valueSchema.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExternalSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.metadata = new MetaData();
        struct.metadata.read(iprot);
        struct.setMetadataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keySchema = new TDataType();
        struct.keySchema.read(iprot);
        struct.setKeySchemaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.valueSchema = new TDataType();
        struct.valueSchema.read(iprot);
        struct.setValueSchemaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

