/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-31")
public class AggregationPart implements org.apache.thrift.TBase<AggregationPart, AggregationPart._Fields>, java.io.Serializable, Cloneable, Comparable<AggregationPart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AggregationPart");

  private static final org.apache.thrift.protocol.TField INPUT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("inputColumn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("argMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("window", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AggregationPartStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AggregationPartTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String inputColumn; // optional
  /**
   * 
   * @see Operation
   */
  public @org.apache.thrift.annotation.Nullable Operation operation; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> argMap; // optional
  public @org.apache.thrift.annotation.Nullable Window window; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String bucket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INPUT_COLUMN((short)1, "inputColumn"),
    /**
     * 
     * @see Operation
     */
    OPERATION((short)2, "operation"),
    ARG_MAP((short)3, "argMap"),
    WINDOW((short)4, "window"),
    BUCKET((short)5, "bucket");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_COLUMN
          return INPUT_COLUMN;
        case 2: // OPERATION
          return OPERATION;
        case 3: // ARG_MAP
          return ARG_MAP;
        case 4: // WINDOW
          return WINDOW;
        case 5: // BUCKET
          return BUCKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INPUT_COLUMN,_Fields.OPERATION,_Fields.ARG_MAP,_Fields.WINDOW,_Fields.BUCKET};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("inputColumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operation.class)));
    tmpMap.put(_Fields.ARG_MAP, new org.apache.thrift.meta_data.FieldMetaData("argMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WINDOW, new org.apache.thrift.meta_data.FieldMetaData("window", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Window.class)));
    tmpMap.put(_Fields.BUCKET, new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AggregationPart.class, metaDataMap);
  }

  public AggregationPart() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AggregationPart(AggregationPart other) {
    if (other.isSetInputColumn()) {
      this.inputColumn = other.inputColumn;
    }
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetArgMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__argMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.argMap);
      this.argMap = __this__argMap;
    }
    if (other.isSetWindow()) {
      this.window = new Window(other.window);
    }
    if (other.isSetBucket()) {
      this.bucket = other.bucket;
    }
  }

  public AggregationPart deepCopy() {
    return new AggregationPart(this);
  }

  @Override
  public void clear() {
    this.inputColumn = null;
    this.operation = null;
    this.argMap = null;
    this.window = null;
    this.bucket = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInputColumn() {
    return this.inputColumn;
  }

  public AggregationPart setInputColumn(@org.apache.thrift.annotation.Nullable java.lang.String inputColumn) {
    this.inputColumn = inputColumn;
    return this;
  }

  public void unsetInputColumn() {
    this.inputColumn = null;
  }

  /** Returns true if field inputColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetInputColumn() {
    return this.inputColumn != null;
  }

  public void setInputColumnIsSet(boolean value) {
    if (!value) {
      this.inputColumn = null;
    }
  }

  /**
   * 
   * @see Operation
   */
  @org.apache.thrift.annotation.Nullable
  public Operation getOperation() {
    return this.operation;
  }

  /**
   * 
   * @see Operation
   */
  public AggregationPart setOperation(@org.apache.thrift.annotation.Nullable Operation operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public int getArgMapSize() {
    return (this.argMap == null) ? 0 : this.argMap.size();
  }

  public void putToArgMap(java.lang.String key, java.lang.String val) {
    if (this.argMap == null) {
      this.argMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.argMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getArgMap() {
    return this.argMap;
  }

  public AggregationPart setArgMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> argMap) {
    this.argMap = argMap;
    return this;
  }

  public void unsetArgMap() {
    this.argMap = null;
  }

  /** Returns true if field argMap is set (has been assigned a value) and false otherwise */
  public boolean isSetArgMap() {
    return this.argMap != null;
  }

  public void setArgMapIsSet(boolean value) {
    if (!value) {
      this.argMap = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Window getWindow() {
    return this.window;
  }

  public AggregationPart setWindow(@org.apache.thrift.annotation.Nullable Window window) {
    this.window = window;
    return this;
  }

  public void unsetWindow() {
    this.window = null;
  }

  /** Returns true if field window is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow() {
    return this.window != null;
  }

  public void setWindowIsSet(boolean value) {
    if (!value) {
      this.window = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBucket() {
    return this.bucket;
  }

  public AggregationPart setBucket(@org.apache.thrift.annotation.Nullable java.lang.String bucket) {
    this.bucket = bucket;
    return this;
  }

  public void unsetBucket() {
    this.bucket = null;
  }

  /** Returns true if field bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket() {
    return this.bucket != null;
  }

  public void setBucketIsSet(boolean value) {
    if (!value) {
      this.bucket = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INPUT_COLUMN:
      if (value == null) {
        unsetInputColumn();
      } else {
        setInputColumn((java.lang.String)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((Operation)value);
      }
      break;

    case ARG_MAP:
      if (value == null) {
        unsetArgMap();
      } else {
        setArgMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case WINDOW:
      if (value == null) {
        unsetWindow();
      } else {
        setWindow((Window)value);
      }
      break;

    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_COLUMN:
      return getInputColumn();

    case OPERATION:
      return getOperation();

    case ARG_MAP:
      return getArgMap();

    case WINDOW:
      return getWindow();

    case BUCKET:
      return getBucket();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INPUT_COLUMN:
      return isSetInputColumn();
    case OPERATION:
      return isSetOperation();
    case ARG_MAP:
      return isSetArgMap();
    case WINDOW:
      return isSetWindow();
    case BUCKET:
      return isSetBucket();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AggregationPart)
      return this.equals((AggregationPart)that);
    return false;
  }

  public boolean equals(AggregationPart that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_inputColumn = true && this.isSetInputColumn();
    boolean that_present_inputColumn = true && that.isSetInputColumn();
    if (this_present_inputColumn || that_present_inputColumn) {
      if (!(this_present_inputColumn && that_present_inputColumn))
        return false;
      if (!this.inputColumn.equals(that.inputColumn))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_argMap = true && this.isSetArgMap();
    boolean that_present_argMap = true && that.isSetArgMap();
    if (this_present_argMap || that_present_argMap) {
      if (!(this_present_argMap && that_present_argMap))
        return false;
      if (!this.argMap.equals(that.argMap))
        return false;
    }

    boolean this_present_window = true && this.isSetWindow();
    boolean that_present_window = true && that.isSetWindow();
    if (this_present_window || that_present_window) {
      if (!(this_present_window && that_present_window))
        return false;
      if (!this.window.equals(that.window))
        return false;
    }

    boolean this_present_bucket = true && this.isSetBucket();
    boolean that_present_bucket = true && that.isSetBucket();
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (!this.bucket.equals(that.bucket))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInputColumn()) ? 131071 : 524287);
    if (isSetInputColumn())
      hashCode = hashCode * 8191 + inputColumn.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperation()) ? 131071 : 524287);
    if (isSetOperation())
      hashCode = hashCode * 8191 + operation.getValue();

    hashCode = hashCode * 8191 + ((isSetArgMap()) ? 131071 : 524287);
    if (isSetArgMap())
      hashCode = hashCode * 8191 + argMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetWindow()) ? 131071 : 524287);
    if (isSetWindow())
      hashCode = hashCode * 8191 + window.hashCode();

    hashCode = hashCode * 8191 + ((isSetBucket()) ? 131071 : 524287);
    if (isSetBucket())
      hashCode = hashCode * 8191 + bucket.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AggregationPart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInputColumn()).compareTo(other.isSetInputColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputColumn, other.inputColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArgMap()).compareTo(other.isSetArgMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argMap, other.argMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBucket()).compareTo(other.isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AggregationPart(");
    boolean first = true;

    if (isSetInputColumn()) {
      sb.append("inputColumn:");
      if (this.inputColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.inputColumn);
      }
      first = false;
    }
    if (isSetOperation()) {
      if (!first) sb.append(", ");
      sb.append("operation:");
      if (this.operation == null) {
        sb.append("null");
      } else {
        sb.append(this.operation);
      }
      first = false;
    }
    if (isSetArgMap()) {
      if (!first) sb.append(", ");
      sb.append("argMap:");
      if (this.argMap == null) {
        sb.append("null");
      } else {
        sb.append(this.argMap);
      }
      first = false;
    }
    if (isSetWindow()) {
      if (!first) sb.append(", ");
      sb.append("window:");
      if (this.window == null) {
        sb.append("null");
      } else {
        sb.append(this.window);
      }
      first = false;
    }
    if (isSetBucket()) {
      if (!first) sb.append(", ");
      sb.append("bucket:");
      if (this.bucket == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (window != null) {
      window.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AggregationPartStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AggregationPartStandardScheme getScheme() {
      return new AggregationPartStandardScheme();
    }
  }

  private static class AggregationPartStandardScheme extends org.apache.thrift.scheme.StandardScheme<AggregationPart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AggregationPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inputColumn = iprot.readString();
              struct.setInputColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operation = ai.chronon.api.Operation.findByValue(iprot.readI32());
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARG_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                struct.argMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map60.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key61;
                @org.apache.thrift.annotation.Nullable java.lang.String _val62;
                for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                {
                  _key61 = iprot.readString();
                  _val62 = iprot.readString();
                  struct.argMap.put(_key61, _val62);
                }
                iprot.readMapEnd();
              }
              struct.setArgMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINDOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.window = new Window();
              struct.window.read(iprot);
              struct.setWindowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bucket = iprot.readString();
              struct.setBucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AggregationPart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.inputColumn != null) {
        if (struct.isSetInputColumn()) {
          oprot.writeFieldBegin(INPUT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.inputColumn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operation != null) {
        if (struct.isSetOperation()) {
          oprot.writeFieldBegin(OPERATION_FIELD_DESC);
          oprot.writeI32(struct.operation.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.argMap != null) {
        if (struct.isSetArgMap()) {
          oprot.writeFieldBegin(ARG_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.argMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter64 : struct.argMap.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeString(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.window != null) {
        if (struct.isSetWindow()) {
          oprot.writeFieldBegin(WINDOW_FIELD_DESC);
          struct.window.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucket != null) {
        if (struct.isSetBucket()) {
          oprot.writeFieldBegin(BUCKET_FIELD_DESC);
          oprot.writeString(struct.bucket);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AggregationPartTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AggregationPartTupleScheme getScheme() {
      return new AggregationPartTupleScheme();
    }
  }

  private static class AggregationPartTupleScheme extends org.apache.thrift.scheme.TupleScheme<AggregationPart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AggregationPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInputColumn()) {
        optionals.set(0);
      }
      if (struct.isSetOperation()) {
        optionals.set(1);
      }
      if (struct.isSetArgMap()) {
        optionals.set(2);
      }
      if (struct.isSetWindow()) {
        optionals.set(3);
      }
      if (struct.isSetBucket()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetInputColumn()) {
        oprot.writeString(struct.inputColumn);
      }
      if (struct.isSetOperation()) {
        oprot.writeI32(struct.operation.getValue());
      }
      if (struct.isSetArgMap()) {
        {
          oprot.writeI32(struct.argMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter65 : struct.argMap.entrySet())
          {
            oprot.writeString(_iter65.getKey());
            oprot.writeString(_iter65.getValue());
          }
        }
      }
      if (struct.isSetWindow()) {
        struct.window.write(oprot);
      }
      if (struct.isSetBucket()) {
        oprot.writeString(struct.bucket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AggregationPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.inputColumn = iprot.readString();
        struct.setInputColumnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operation = ai.chronon.api.Operation.findByValue(iprot.readI32());
        struct.setOperationIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.argMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map66.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key67;
          @org.apache.thrift.annotation.Nullable java.lang.String _val68;
          for (int _i69 = 0; _i69 < _map66.size; ++_i69)
          {
            _key67 = iprot.readString();
            _val68 = iprot.readString();
            struct.argMap.put(_key67, _val68);
          }
        }
        struct.setArgMapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.window = new Window();
        struct.window.read(iprot);
        struct.setWindowIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bucket = iprot.readString();
        struct.setBucketIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

