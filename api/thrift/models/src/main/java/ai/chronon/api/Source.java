/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-31")
public class Source extends org.apache.thrift.TUnion<Source, Source._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Source");
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField JOIN_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("joinSource", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENTS((short)1, "events"),
    ENTITIES((short)2, "entities"),
    JOIN_SOURCE((short)3, "joinSource");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENTS
          return EVENTS;
        case 2: // ENTITIES
          return ENTITIES;
        case 3: // JOIN_SOURCE
          return JOIN_SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventSource.class)));
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntitySource.class)));
    tmpMap.put(_Fields.JOIN_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("joinSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JoinSource.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Source.class, metaDataMap);
  }

  public Source() {
    super();
  }

  public Source(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public Source(Source other) {
    super(other);
  }
  public Source deepCopy() {
    return new Source(this);
  }

  public static Source events(EventSource value) {
    Source x = new Source();
    x.setEvents(value);
    return x;
  }

  public static Source entities(EntitySource value) {
    Source x = new Source();
    x.setEntities(value);
    return x;
  }

  public static Source joinSource(JoinSource value) {
    Source x = new Source();
    x.setJoinSource(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case EVENTS:
        if (value instanceof EventSource) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type EventSource for field 'events', but got " + value.getClass().getSimpleName());
      case ENTITIES:
        if (value instanceof EntitySource) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type EntitySource for field 'entities', but got " + value.getClass().getSimpleName());
      case JOIN_SOURCE:
        if (value instanceof JoinSource) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type JoinSource for field 'joinSource', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case EVENTS:
          if (field.type == EVENTS_FIELD_DESC.type) {
            EventSource events;
            events = new EventSource();
            events.read(iprot);
            return events;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ENTITIES:
          if (field.type == ENTITIES_FIELD_DESC.type) {
            EntitySource entities;
            entities = new EntitySource();
            entities.read(iprot);
            return entities;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case JOIN_SOURCE:
          if (field.type == JOIN_SOURCE_FIELD_DESC.type) {
            JoinSource joinSource;
            joinSource = new JoinSource();
            joinSource.read(iprot);
            return joinSource;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EVENTS:
        EventSource events = (EventSource)value_;
        events.write(oprot);
        return;
      case ENTITIES:
        EntitySource entities = (EntitySource)value_;
        entities.write(oprot);
        return;
      case JOIN_SOURCE:
        JoinSource joinSource = (JoinSource)value_;
        joinSource.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case EVENTS:
          EventSource events;
          events = new EventSource();
          events.read(iprot);
          return events;
        case ENTITIES:
          EntitySource entities;
          entities = new EntitySource();
          entities.read(iprot);
          return entities;
        case JOIN_SOURCE:
          JoinSource joinSource;
          joinSource = new JoinSource();
          joinSource.read(iprot);
          return joinSource;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EVENTS:
        EventSource events = (EventSource)value_;
        events.write(oprot);
        return;
      case ENTITIES:
        EntitySource entities = (EntitySource)value_;
        entities.write(oprot);
        return;
      case JOIN_SOURCE:
        JoinSource joinSource = (JoinSource)value_;
        joinSource.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case EVENTS:
        return EVENTS_FIELD_DESC;
      case ENTITIES:
        return ENTITIES_FIELD_DESC;
      case JOIN_SOURCE:
        return JOIN_SOURCE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public EventSource getEvents() {
    if (getSetField() == _Fields.EVENTS) {
      return (EventSource)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'events' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEvents(EventSource value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.EVENTS;
    value_ = value;
  }

  public EntitySource getEntities() {
    if (getSetField() == _Fields.ENTITIES) {
      return (EntitySource)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'entities' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEntities(EntitySource value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ENTITIES;
    value_ = value;
  }

  public JoinSource getJoinSource() {
    if (getSetField() == _Fields.JOIN_SOURCE) {
      return (JoinSource)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'joinSource' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setJoinSource(JoinSource value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.JOIN_SOURCE;
    value_ = value;
  }

  public boolean isSetEvents() {
    return setField_ == _Fields.EVENTS;
  }


  public boolean isSetEntities() {
    return setField_ == _Fields.ENTITIES;
  }


  public boolean isSetJoinSource() {
    return setField_ == _Fields.JOIN_SOURCE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof Source) {
      return equals((Source)other);
    } else {
      return false;
    }
  }

  public boolean equals(Source other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Source other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
