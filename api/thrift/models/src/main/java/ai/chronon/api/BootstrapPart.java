/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-31")
public class BootstrapPart implements org.apache.thrift.TBase<BootstrapPart, BootstrapPart._Fields>, java.io.Serializable, Cloneable, Comparable<BootstrapPart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BootstrapPart");

  private static final org.apache.thrift.protocol.TField META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metaData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyColumns", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BootstrapPartStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BootstrapPartTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable MetaData metaData; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table; // optional
  public @org.apache.thrift.annotation.Nullable Query query; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> keyColumns; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    META_DATA((short)1, "metaData"),
    TABLE((short)2, "table"),
    QUERY((short)3, "query"),
    KEY_COLUMNS((short)4, "keyColumns");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // META_DATA
          return META_DATA;
        case 2: // TABLE
          return TABLE;
        case 3: // QUERY
          return QUERY;
        case 4: // KEY_COLUMNS
          return KEY_COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.META_DATA,_Fields.TABLE,_Fields.QUERY,_Fields.KEY_COLUMNS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.META_DATA, new org.apache.thrift.meta_data.FieldMetaData("metaData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetaData.class)));
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class)));
    tmpMap.put(_Fields.KEY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("keyColumns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BootstrapPart.class, metaDataMap);
  }

  public BootstrapPart() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BootstrapPart(BootstrapPart other) {
    if (other.isSetMetaData()) {
      this.metaData = new MetaData(other.metaData);
    }
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetQuery()) {
      this.query = new Query(other.query);
    }
    if (other.isSetKeyColumns()) {
      java.util.List<java.lang.String> __this__keyColumns = new java.util.ArrayList<java.lang.String>(other.keyColumns);
      this.keyColumns = __this__keyColumns;
    }
  }

  public BootstrapPart deepCopy() {
    return new BootstrapPart(this);
  }

  @Override
  public void clear() {
    this.metaData = null;
    this.table = null;
    this.query = null;
    this.keyColumns = null;
  }

  @org.apache.thrift.annotation.Nullable
  public MetaData getMetaData() {
    return this.metaData;
  }

  public BootstrapPart setMetaData(@org.apache.thrift.annotation.Nullable MetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  public void unsetMetaData() {
    this.metaData = null;
  }

  /** Returns true if field metaData is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaData() {
    return this.metaData != null;
  }

  public void setMetaDataIsSet(boolean value) {
    if (!value) {
      this.metaData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable() {
    return this.table;
  }

  public BootstrapPart setTable(@org.apache.thrift.annotation.Nullable java.lang.String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Query getQuery() {
    return this.query;
  }

  public BootstrapPart setQuery(@org.apache.thrift.annotation.Nullable Query query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public int getKeyColumnsSize() {
    return (this.keyColumns == null) ? 0 : this.keyColumns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKeyColumnsIterator() {
    return (this.keyColumns == null) ? null : this.keyColumns.iterator();
  }

  public void addToKeyColumns(java.lang.String elem) {
    if (this.keyColumns == null) {
      this.keyColumns = new java.util.ArrayList<java.lang.String>();
    }
    this.keyColumns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKeyColumns() {
    return this.keyColumns;
  }

  public BootstrapPart setKeyColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> keyColumns) {
    this.keyColumns = keyColumns;
    return this;
  }

  public void unsetKeyColumns() {
    this.keyColumns = null;
  }

  /** Returns true if field keyColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyColumns() {
    return this.keyColumns != null;
  }

  public void setKeyColumnsIsSet(boolean value) {
    if (!value) {
      this.keyColumns = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case META_DATA:
      if (value == null) {
        unsetMetaData();
      } else {
        setMetaData((MetaData)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((java.lang.String)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((Query)value);
      }
      break;

    case KEY_COLUMNS:
      if (value == null) {
        unsetKeyColumns();
      } else {
        setKeyColumns((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case META_DATA:
      return getMetaData();

    case TABLE:
      return getTable();

    case QUERY:
      return getQuery();

    case KEY_COLUMNS:
      return getKeyColumns();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case META_DATA:
      return isSetMetaData();
    case TABLE:
      return isSetTable();
    case QUERY:
      return isSetQuery();
    case KEY_COLUMNS:
      return isSetKeyColumns();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BootstrapPart)
      return this.equals((BootstrapPart)that);
    return false;
  }

  public boolean equals(BootstrapPart that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_metaData = true && this.isSetMetaData();
    boolean that_present_metaData = true && that.isSetMetaData();
    if (this_present_metaData || that_present_metaData) {
      if (!(this_present_metaData && that_present_metaData))
        return false;
      if (!this.metaData.equals(that.metaData))
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_keyColumns = true && this.isSetKeyColumns();
    boolean that_present_keyColumns = true && that.isSetKeyColumns();
    if (this_present_keyColumns || that_present_keyColumns) {
      if (!(this_present_keyColumns && that_present_keyColumns))
        return false;
      if (!this.keyColumns.equals(that.keyColumns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMetaData()) ? 131071 : 524287);
    if (isSetMetaData())
      hashCode = hashCode * 8191 + metaData.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
    if (isSetTable())
      hashCode = hashCode * 8191 + table.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
    if (isSetQuery())
      hashCode = hashCode * 8191 + query.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyColumns()) ? 131071 : 524287);
    if (isSetKeyColumns())
      hashCode = hashCode * 8191 + keyColumns.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BootstrapPart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMetaData()).compareTo(other.isSetMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaData, other.metaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyColumns()).compareTo(other.isSetKeyColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyColumns, other.keyColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BootstrapPart(");
    boolean first = true;

    if (isSetMetaData()) {
      sb.append("metaData:");
      if (this.metaData == null) {
        sb.append("null");
      } else {
        sb.append(this.metaData);
      }
      first = false;
    }
    if (isSetTable()) {
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetKeyColumns()) {
      if (!first) sb.append(", ");
      sb.append("keyColumns:");
      if (this.keyColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.keyColumns);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (metaData != null) {
      metaData.validate();
    }
    if (query != null) {
      query.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BootstrapPartStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BootstrapPartStandardScheme getScheme() {
      return new BootstrapPartStandardScheme();
    }
  }

  private static class BootstrapPartStandardScheme extends org.apache.thrift.scheme.StandardScheme<BootstrapPart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BootstrapPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metaData = new MetaData();
              struct.metaData.read(iprot);
              struct.setMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table = iprot.readString();
              struct.setTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query = new Query();
              struct.query.read(iprot);
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                struct.keyColumns = new java.util.ArrayList<java.lang.String>(_list218.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem219;
                for (int _i220 = 0; _i220 < _list218.size; ++_i220)
                {
                  _elem219 = iprot.readString();
                  struct.keyColumns.add(_elem219);
                }
                iprot.readListEnd();
              }
              struct.setKeyColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BootstrapPart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metaData != null) {
        if (struct.isSetMetaData()) {
          oprot.writeFieldBegin(META_DATA_FIELD_DESC);
          struct.metaData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table != null) {
        if (struct.isSetTable()) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyColumns != null) {
        if (struct.isSetKeyColumns()) {
          oprot.writeFieldBegin(KEY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keyColumns.size()));
            for (java.lang.String _iter221 : struct.keyColumns)
            {
              oprot.writeString(_iter221);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BootstrapPartTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BootstrapPartTupleScheme getScheme() {
      return new BootstrapPartTupleScheme();
    }
  }

  private static class BootstrapPartTupleScheme extends org.apache.thrift.scheme.TupleScheme<BootstrapPart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BootstrapPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMetaData()) {
        optionals.set(0);
      }
      if (struct.isSetTable()) {
        optionals.set(1);
      }
      if (struct.isSetQuery()) {
        optionals.set(2);
      }
      if (struct.isSetKeyColumns()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMetaData()) {
        struct.metaData.write(oprot);
      }
      if (struct.isSetTable()) {
        oprot.writeString(struct.table);
      }
      if (struct.isSetQuery()) {
        struct.query.write(oprot);
      }
      if (struct.isSetKeyColumns()) {
        {
          oprot.writeI32(struct.keyColumns.size());
          for (java.lang.String _iter222 : struct.keyColumns)
          {
            oprot.writeString(_iter222);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BootstrapPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.metaData = new MetaData();
        struct.metaData.read(iprot);
        struct.setMetaDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table = iprot.readString();
        struct.setTableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.query = new Query();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list223 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keyColumns = new java.util.ArrayList<java.lang.String>(_list223.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem224;
          for (int _i225 = 0; _i225 < _list223.size; ++_i225)
          {
            _elem224 = iprot.readString();
            struct.keyColumns.add(_elem224);
          }
        }
        struct.setKeyColumnsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

