/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Output of a Join can be used as input to downstream computations like GroupBy or a Join.
 * Below is a short description of each of the cases we handle.
 * Case #1: a join's source is another join [TODO]
 *   - while serving, we expect the keys for the upstream join to be passed in the request.
 *     we will query upstream first, and use the result to query downstream
 *   - while backfill, we will backfill the upstream first, and use the table as the left of the subsequent join
 *   - this is currently a "to do" because users can achieve this by themselves unlike case 2:
 * Case #2: a join is the source of another GroupBy
 *   - We will support arbitrarily long transformation chains with this.
 *   - for batch (Accuracy.SNAPSHOT), we simply backfill the join first and compute groupBy as usual
 *     - will substitute the joinSource with the resulting table and continue computation
 *     - we will add a "resolve source" step prior to backfills that will compute the parent join and update the source
 *   - for realtime (Accuracy.TEMPORAL), we need to do "stream enrichment"
 *     - we will simply issue "fetchJoin" and create an enriched source. Note the join left should be of type "events".
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-29")
public class JoinSource implements org.apache.thrift.TBase<JoinSource, JoinSource._Fields>, java.io.Serializable, Cloneable, Comparable<JoinSource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JoinSource");

  private static final org.apache.thrift.protocol.TField JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("join", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JoinSourceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JoinSourceTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Join join; // optional
  public @org.apache.thrift.annotation.Nullable Query query; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOIN((short)1, "join"),
    QUERY((short)2, "query");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN
          return JOIN;
        case 2: // QUERY
          return QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.JOIN,_Fields.QUERY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN, new org.apache.thrift.meta_data.FieldMetaData("join", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Join")));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JoinSource.class, metaDataMap);
  }

  public JoinSource() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JoinSource(JoinSource other) {
    if (other.isSetJoin()) {
      this.join = new Join(other.join);
    }
    if (other.isSetQuery()) {
      this.query = new Query(other.query);
    }
  }

  public JoinSource deepCopy() {
    return new JoinSource(this);
  }

  @Override
  public void clear() {
    this.join = null;
    this.query = null;
  }

  @org.apache.thrift.annotation.Nullable
  public Join getJoin() {
    return this.join;
  }

  public JoinSource setJoin(@org.apache.thrift.annotation.Nullable Join join) {
    this.join = join;
    return this;
  }

  public void unsetJoin() {
    this.join = null;
  }

  /** Returns true if field join is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin() {
    return this.join != null;
  }

  public void setJoinIsSet(boolean value) {
    if (!value) {
      this.join = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Query getQuery() {
    return this.query;
  }

  public JoinSource setQuery(@org.apache.thrift.annotation.Nullable Query query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOIN:
      if (value == null) {
        unsetJoin();
      } else {
        setJoin((Join)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((Query)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN:
      return getJoin();

    case QUERY:
      return getQuery();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOIN:
      return isSetJoin();
    case QUERY:
      return isSetQuery();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JoinSource)
      return this.equals((JoinSource)that);
    return false;
  }

  public boolean equals(JoinSource that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_join = true && this.isSetJoin();
    boolean that_present_join = true && that.isSetJoin();
    if (this_present_join || that_present_join) {
      if (!(this_present_join && that_present_join))
        return false;
      if (!this.join.equals(that.join))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJoin()) ? 131071 : 524287);
    if (isSetJoin())
      hashCode = hashCode * 8191 + join.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
    if (isSetQuery())
      hashCode = hashCode * 8191 + query.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JoinSource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJoin()).compareTo(other.isSetJoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join, other.join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JoinSource(");
    boolean first = true;

    if (isSetJoin()) {
      sb.append("join:");
      if (this.join == null) {
        sb.append("null");
      } else {
        sb.append(this.join);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query != null) {
      query.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinSourceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinSourceStandardScheme getScheme() {
      return new JoinSourceStandardScheme();
    }
  }

  private static class JoinSourceStandardScheme extends org.apache.thrift.scheme.StandardScheme<JoinSource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JoinSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.join = new Join();
              struct.join.read(iprot);
              struct.setJoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query = new Query();
              struct.query.read(iprot);
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JoinSource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join != null) {
        if (struct.isSetJoin()) {
          oprot.writeFieldBegin(JOIN_FIELD_DESC);
          struct.join.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinSourceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinSourceTupleScheme getScheme() {
      return new JoinSourceTupleScheme();
    }
  }

  private static class JoinSourceTupleScheme extends org.apache.thrift.scheme.TupleScheme<JoinSource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JoinSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJoin()) {
        optionals.set(0);
      }
      if (struct.isSetQuery()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetJoin()) {
        struct.join.write(oprot);
      }
      if (struct.isSetQuery()) {
        struct.query.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JoinSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.join = new Join();
        struct.join.read(iprot);
        struct.setJoinIsSet(true);
      }
      if (incoming.get(1)) {
        struct.query = new Query();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

