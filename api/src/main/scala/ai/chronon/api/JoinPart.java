/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-29")
public class JoinPart implements org.apache.thrift.TBase<JoinPart, JoinPart._Fields>, java.io.Serializable, Cloneable, Comparable<JoinPart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JoinPart");

  private static final org.apache.thrift.protocol.TField GROUP_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupBy", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("keyMapping", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JoinPartStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JoinPartTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable GroupBy groupBy; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> keyMapping; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String prefix; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_BY((short)1, "groupBy"),
    KEY_MAPPING((short)2, "keyMapping"),
    PREFIX((short)4, "prefix");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_BY
          return GROUP_BY;
        case 2: // KEY_MAPPING
          return KEY_MAPPING;
        case 4: // PREFIX
          return PREFIX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.GROUP_BY,_Fields.KEY_MAPPING,_Fields.PREFIX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_BY, new org.apache.thrift.meta_data.FieldMetaData("groupBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupBy.class)));
    tmpMap.put(_Fields.KEY_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("keyMapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JoinPart.class, metaDataMap);
  }

  public JoinPart() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JoinPart(JoinPart other) {
    if (other.isSetGroupBy()) {
      this.groupBy = new GroupBy(other.groupBy);
    }
    if (other.isSetKeyMapping()) {
      java.util.Map<java.lang.String,java.lang.String> __this__keyMapping = new java.util.HashMap<java.lang.String,java.lang.String>(other.keyMapping);
      this.keyMapping = __this__keyMapping;
    }
    if (other.isSetPrefix()) {
      this.prefix = other.prefix;
    }
  }

  public JoinPart deepCopy() {
    return new JoinPart(this);
  }

  @Override
  public void clear() {
    this.groupBy = null;
    this.keyMapping = null;
    this.prefix = null;
  }

  @org.apache.thrift.annotation.Nullable
  public GroupBy getGroupBy() {
    return this.groupBy;
  }

  public JoinPart setGroupBy(@org.apache.thrift.annotation.Nullable GroupBy groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  public void unsetGroupBy() {
    this.groupBy = null;
  }

  /** Returns true if field groupBy is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupBy() {
    return this.groupBy != null;
  }

  public void setGroupByIsSet(boolean value) {
    if (!value) {
      this.groupBy = null;
    }
  }

  public int getKeyMappingSize() {
    return (this.keyMapping == null) ? 0 : this.keyMapping.size();
  }

  public void putToKeyMapping(java.lang.String key, java.lang.String val) {
    if (this.keyMapping == null) {
      this.keyMapping = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.keyMapping.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getKeyMapping() {
    return this.keyMapping;
  }

  public JoinPart setKeyMapping(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> keyMapping) {
    this.keyMapping = keyMapping;
    return this;
  }

  public void unsetKeyMapping() {
    this.keyMapping = null;
  }

  /** Returns true if field keyMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyMapping() {
    return this.keyMapping != null;
  }

  public void setKeyMappingIsSet(boolean value) {
    if (!value) {
      this.keyMapping = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrefix() {
    return this.prefix;
  }

  public JoinPart setPrefix(@org.apache.thrift.annotation.Nullable java.lang.String prefix) {
    this.prefix = prefix;
    return this;
  }

  public void unsetPrefix() {
    this.prefix = null;
  }

  /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefix() {
    return this.prefix != null;
  }

  public void setPrefixIsSet(boolean value) {
    if (!value) {
      this.prefix = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GROUP_BY:
      if (value == null) {
        unsetGroupBy();
      } else {
        setGroupBy((GroupBy)value);
      }
      break;

    case KEY_MAPPING:
      if (value == null) {
        unsetKeyMapping();
      } else {
        setKeyMapping((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case PREFIX:
      if (value == null) {
        unsetPrefix();
      } else {
        setPrefix((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_BY:
      return getGroupBy();

    case KEY_MAPPING:
      return getKeyMapping();

    case PREFIX:
      return getPrefix();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GROUP_BY:
      return isSetGroupBy();
    case KEY_MAPPING:
      return isSetKeyMapping();
    case PREFIX:
      return isSetPrefix();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JoinPart)
      return this.equals((JoinPart)that);
    return false;
  }

  public boolean equals(JoinPart that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_groupBy = true && this.isSetGroupBy();
    boolean that_present_groupBy = true && that.isSetGroupBy();
    if (this_present_groupBy || that_present_groupBy) {
      if (!(this_present_groupBy && that_present_groupBy))
        return false;
      if (!this.groupBy.equals(that.groupBy))
        return false;
    }

    boolean this_present_keyMapping = true && this.isSetKeyMapping();
    boolean that_present_keyMapping = true && that.isSetKeyMapping();
    if (this_present_keyMapping || that_present_keyMapping) {
      if (!(this_present_keyMapping && that_present_keyMapping))
        return false;
      if (!this.keyMapping.equals(that.keyMapping))
        return false;
    }

    boolean this_present_prefix = true && this.isSetPrefix();
    boolean that_present_prefix = true && that.isSetPrefix();
    if (this_present_prefix || that_present_prefix) {
      if (!(this_present_prefix && that_present_prefix))
        return false;
      if (!this.prefix.equals(that.prefix))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGroupBy()) ? 131071 : 524287);
    if (isSetGroupBy())
      hashCode = hashCode * 8191 + groupBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyMapping()) ? 131071 : 524287);
    if (isSetKeyMapping())
      hashCode = hashCode * 8191 + keyMapping.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrefix()) ? 131071 : 524287);
    if (isSetPrefix())
      hashCode = hashCode * 8191 + prefix.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JoinPart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGroupBy()).compareTo(other.isSetGroupBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupBy, other.groupBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyMapping()).compareTo(other.isSetKeyMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyMapping, other.keyMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrefix()).compareTo(other.isSetPrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, other.prefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JoinPart(");
    boolean first = true;

    if (isSetGroupBy()) {
      sb.append("groupBy:");
      if (this.groupBy == null) {
        sb.append("null");
      } else {
        sb.append(this.groupBy);
      }
      first = false;
    }
    if (isSetKeyMapping()) {
      if (!first) sb.append(", ");
      sb.append("keyMapping:");
      if (this.keyMapping == null) {
        sb.append("null");
      } else {
        sb.append(this.keyMapping);
      }
      first = false;
    }
    if (isSetPrefix()) {
      if (!first) sb.append(", ");
      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (groupBy != null) {
      groupBy.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinPartStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinPartStandardScheme getScheme() {
      return new JoinPartStandardScheme();
    }
  }

  private static class JoinPartStandardScheme extends org.apache.thrift.scheme.StandardScheme<JoinPart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JoinPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupBy = new GroupBy();
              struct.groupBy.read(iprot);
              struct.setGroupByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
                struct.keyMapping = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map140.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key141;
                @org.apache.thrift.annotation.Nullable java.lang.String _val142;
                for (int _i143 = 0; _i143 < _map140.size; ++_i143)
                {
                  _key141 = iprot.readString();
                  _val142 = iprot.readString();
                  struct.keyMapping.put(_key141, _val142);
                }
                iprot.readMapEnd();
              }
              struct.setKeyMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prefix = iprot.readString();
              struct.setPrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JoinPart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupBy != null) {
        if (struct.isSetGroupBy()) {
          oprot.writeFieldBegin(GROUP_BY_FIELD_DESC);
          struct.groupBy.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyMapping != null) {
        if (struct.isSetKeyMapping()) {
          oprot.writeFieldBegin(KEY_MAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.keyMapping.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter144 : struct.keyMapping.entrySet())
            {
              oprot.writeString(_iter144.getKey());
              oprot.writeString(_iter144.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.prefix != null) {
        if (struct.isSetPrefix()) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinPartTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinPartTupleScheme getScheme() {
      return new JoinPartTupleScheme();
    }
  }

  private static class JoinPartTupleScheme extends org.apache.thrift.scheme.TupleScheme<JoinPart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JoinPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroupBy()) {
        optionals.set(0);
      }
      if (struct.isSetKeyMapping()) {
        optionals.set(1);
      }
      if (struct.isSetPrefix()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGroupBy()) {
        struct.groupBy.write(oprot);
      }
      if (struct.isSetKeyMapping()) {
        {
          oprot.writeI32(struct.keyMapping.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter145 : struct.keyMapping.entrySet())
          {
            oprot.writeString(_iter145.getKey());
            oprot.writeString(_iter145.getValue());
          }
        }
      }
      if (struct.isSetPrefix()) {
        oprot.writeString(struct.prefix);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JoinPart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.groupBy = new GroupBy();
        struct.groupBy.read(iprot);
        struct.setGroupByIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map146 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keyMapping = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map146.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key147;
          @org.apache.thrift.annotation.Nullable java.lang.String _val148;
          for (int _i149 = 0; _i149 < _map146.size; ++_i149)
          {
            _key147 = iprot.readString();
            _val148 = iprot.readString();
            struct.keyMapping.put(_key147, _val148);
          }
        }
        struct.setKeyMappingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.prefix = iprot.readString();
        struct.setPrefixIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

