/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-29")
public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, java.io.Serializable, Cloneable, Comparable<Query> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Query");

  private static final org.apache.thrift.protocol.TField SELECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selects", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField WHERES_FIELD_DESC = new org.apache.thrift.protocol.TField("wheres", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField START_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("startPartition", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("endPartition", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("timeColumn", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SETUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("setups", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MUTATION_TIME_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("mutationTimeColumn", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REVERSAL_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("reversalColumn", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> selects; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> wheres; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String startPartition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String endPartition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String timeColumn; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> setups; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String mutationTimeColumn; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String reversalColumn; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SELECTS((short)1, "selects"),
    WHERES((short)2, "wheres"),
    START_PARTITION((short)3, "startPartition"),
    END_PARTITION((short)4, "endPartition"),
    TIME_COLUMN((short)5, "timeColumn"),
    SETUPS((short)6, "setups"),
    MUTATION_TIME_COLUMN((short)7, "mutationTimeColumn"),
    REVERSAL_COLUMN((short)8, "reversalColumn");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELECTS
          return SELECTS;
        case 2: // WHERES
          return WHERES;
        case 3: // START_PARTITION
          return START_PARTITION;
        case 4: // END_PARTITION
          return END_PARTITION;
        case 5: // TIME_COLUMN
          return TIME_COLUMN;
        case 6: // SETUPS
          return SETUPS;
        case 7: // MUTATION_TIME_COLUMN
          return MUTATION_TIME_COLUMN;
        case 8: // REVERSAL_COLUMN
          return REVERSAL_COLUMN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SELECTS,_Fields.WHERES,_Fields.START_PARTITION,_Fields.END_PARTITION,_Fields.TIME_COLUMN,_Fields.SETUPS,_Fields.MUTATION_TIME_COLUMN,_Fields.REVERSAL_COLUMN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELECTS, new org.apache.thrift.meta_data.FieldMetaData("selects", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WHERES, new org.apache.thrift.meta_data.FieldMetaData("wheres", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("startPartition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("endPartition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("timeColumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETUPS, new org.apache.thrift.meta_data.FieldMetaData("setups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MUTATION_TIME_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("mutationTimeColumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVERSAL_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("reversalColumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Query.class, metaDataMap);
  }

  public Query() {
    this.setups = new java.util.ArrayList<java.lang.String>();

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Query(Query other) {
    if (other.isSetSelects()) {
      java.util.Map<java.lang.String,java.lang.String> __this__selects = new java.util.HashMap<java.lang.String,java.lang.String>(other.selects);
      this.selects = __this__selects;
    }
    if (other.isSetWheres()) {
      java.util.List<java.lang.String> __this__wheres = new java.util.ArrayList<java.lang.String>(other.wheres);
      this.wheres = __this__wheres;
    }
    if (other.isSetStartPartition()) {
      this.startPartition = other.startPartition;
    }
    if (other.isSetEndPartition()) {
      this.endPartition = other.endPartition;
    }
    if (other.isSetTimeColumn()) {
      this.timeColumn = other.timeColumn;
    }
    if (other.isSetSetups()) {
      java.util.List<java.lang.String> __this__setups = new java.util.ArrayList<java.lang.String>(other.setups);
      this.setups = __this__setups;
    }
    if (other.isSetMutationTimeColumn()) {
      this.mutationTimeColumn = other.mutationTimeColumn;
    }
    if (other.isSetReversalColumn()) {
      this.reversalColumn = other.reversalColumn;
    }
  }

  public Query deepCopy() {
    return new Query(this);
  }

  @Override
  public void clear() {
    this.selects = null;
    this.wheres = null;
    this.startPartition = null;
    this.endPartition = null;
    this.timeColumn = null;
    this.setups = new java.util.ArrayList<java.lang.String>();

    this.mutationTimeColumn = null;
    this.reversalColumn = null;
  }

  public int getSelectsSize() {
    return (this.selects == null) ? 0 : this.selects.size();
  }

  public void putToSelects(java.lang.String key, java.lang.String val) {
    if (this.selects == null) {
      this.selects = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.selects.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getSelects() {
    return this.selects;
  }

  public Query setSelects(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> selects) {
    this.selects = selects;
    return this;
  }

  public void unsetSelects() {
    this.selects = null;
  }

  /** Returns true if field selects is set (has been assigned a value) and false otherwise */
  public boolean isSetSelects() {
    return this.selects != null;
  }

  public void setSelectsIsSet(boolean value) {
    if (!value) {
      this.selects = null;
    }
  }

  public int getWheresSize() {
    return (this.wheres == null) ? 0 : this.wheres.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getWheresIterator() {
    return (this.wheres == null) ? null : this.wheres.iterator();
  }

  public void addToWheres(java.lang.String elem) {
    if (this.wheres == null) {
      this.wheres = new java.util.ArrayList<java.lang.String>();
    }
    this.wheres.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getWheres() {
    return this.wheres;
  }

  public Query setWheres(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> wheres) {
    this.wheres = wheres;
    return this;
  }

  public void unsetWheres() {
    this.wheres = null;
  }

  /** Returns true if field wheres is set (has been assigned a value) and false otherwise */
  public boolean isSetWheres() {
    return this.wheres != null;
  }

  public void setWheresIsSet(boolean value) {
    if (!value) {
      this.wheres = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStartPartition() {
    return this.startPartition;
  }

  public Query setStartPartition(@org.apache.thrift.annotation.Nullable java.lang.String startPartition) {
    this.startPartition = startPartition;
    return this;
  }

  public void unsetStartPartition() {
    this.startPartition = null;
  }

  /** Returns true if field startPartition is set (has been assigned a value) and false otherwise */
  public boolean isSetStartPartition() {
    return this.startPartition != null;
  }

  public void setStartPartitionIsSet(boolean value) {
    if (!value) {
      this.startPartition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEndPartition() {
    return this.endPartition;
  }

  public Query setEndPartition(@org.apache.thrift.annotation.Nullable java.lang.String endPartition) {
    this.endPartition = endPartition;
    return this;
  }

  public void unsetEndPartition() {
    this.endPartition = null;
  }

  /** Returns true if field endPartition is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPartition() {
    return this.endPartition != null;
  }

  public void setEndPartitionIsSet(boolean value) {
    if (!value) {
      this.endPartition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimeColumn() {
    return this.timeColumn;
  }

  public Query setTimeColumn(@org.apache.thrift.annotation.Nullable java.lang.String timeColumn) {
    this.timeColumn = timeColumn;
    return this;
  }

  public void unsetTimeColumn() {
    this.timeColumn = null;
  }

  /** Returns true if field timeColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeColumn() {
    return this.timeColumn != null;
  }

  public void setTimeColumnIsSet(boolean value) {
    if (!value) {
      this.timeColumn = null;
    }
  }

  public int getSetupsSize() {
    return (this.setups == null) ? 0 : this.setups.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSetupsIterator() {
    return (this.setups == null) ? null : this.setups.iterator();
  }

  public void addToSetups(java.lang.String elem) {
    if (this.setups == null) {
      this.setups = new java.util.ArrayList<java.lang.String>();
    }
    this.setups.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSetups() {
    return this.setups;
  }

  public Query setSetups(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> setups) {
    this.setups = setups;
    return this;
  }

  public void unsetSetups() {
    this.setups = null;
  }

  /** Returns true if field setups is set (has been assigned a value) and false otherwise */
  public boolean isSetSetups() {
    return this.setups != null;
  }

  public void setSetupsIsSet(boolean value) {
    if (!value) {
      this.setups = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMutationTimeColumn() {
    return this.mutationTimeColumn;
  }

  public Query setMutationTimeColumn(@org.apache.thrift.annotation.Nullable java.lang.String mutationTimeColumn) {
    this.mutationTimeColumn = mutationTimeColumn;
    return this;
  }

  public void unsetMutationTimeColumn() {
    this.mutationTimeColumn = null;
  }

  /** Returns true if field mutationTimeColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetMutationTimeColumn() {
    return this.mutationTimeColumn != null;
  }

  public void setMutationTimeColumnIsSet(boolean value) {
    if (!value) {
      this.mutationTimeColumn = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReversalColumn() {
    return this.reversalColumn;
  }

  public Query setReversalColumn(@org.apache.thrift.annotation.Nullable java.lang.String reversalColumn) {
    this.reversalColumn = reversalColumn;
    return this;
  }

  public void unsetReversalColumn() {
    this.reversalColumn = null;
  }

  /** Returns true if field reversalColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetReversalColumn() {
    return this.reversalColumn != null;
  }

  public void setReversalColumnIsSet(boolean value) {
    if (!value) {
      this.reversalColumn = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SELECTS:
      if (value == null) {
        unsetSelects();
      } else {
        setSelects((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case WHERES:
      if (value == null) {
        unsetWheres();
      } else {
        setWheres((java.util.List<java.lang.String>)value);
      }
      break;

    case START_PARTITION:
      if (value == null) {
        unsetStartPartition();
      } else {
        setStartPartition((java.lang.String)value);
      }
      break;

    case END_PARTITION:
      if (value == null) {
        unsetEndPartition();
      } else {
        setEndPartition((java.lang.String)value);
      }
      break;

    case TIME_COLUMN:
      if (value == null) {
        unsetTimeColumn();
      } else {
        setTimeColumn((java.lang.String)value);
      }
      break;

    case SETUPS:
      if (value == null) {
        unsetSetups();
      } else {
        setSetups((java.util.List<java.lang.String>)value);
      }
      break;

    case MUTATION_TIME_COLUMN:
      if (value == null) {
        unsetMutationTimeColumn();
      } else {
        setMutationTimeColumn((java.lang.String)value);
      }
      break;

    case REVERSAL_COLUMN:
      if (value == null) {
        unsetReversalColumn();
      } else {
        setReversalColumn((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SELECTS:
      return getSelects();

    case WHERES:
      return getWheres();

    case START_PARTITION:
      return getStartPartition();

    case END_PARTITION:
      return getEndPartition();

    case TIME_COLUMN:
      return getTimeColumn();

    case SETUPS:
      return getSetups();

    case MUTATION_TIME_COLUMN:
      return getMutationTimeColumn();

    case REVERSAL_COLUMN:
      return getReversalColumn();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SELECTS:
      return isSetSelects();
    case WHERES:
      return isSetWheres();
    case START_PARTITION:
      return isSetStartPartition();
    case END_PARTITION:
      return isSetEndPartition();
    case TIME_COLUMN:
      return isSetTimeColumn();
    case SETUPS:
      return isSetSetups();
    case MUTATION_TIME_COLUMN:
      return isSetMutationTimeColumn();
    case REVERSAL_COLUMN:
      return isSetReversalColumn();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Query)
      return this.equals((Query)that);
    return false;
  }

  public boolean equals(Query that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_selects = true && this.isSetSelects();
    boolean that_present_selects = true && that.isSetSelects();
    if (this_present_selects || that_present_selects) {
      if (!(this_present_selects && that_present_selects))
        return false;
      if (!this.selects.equals(that.selects))
        return false;
    }

    boolean this_present_wheres = true && this.isSetWheres();
    boolean that_present_wheres = true && that.isSetWheres();
    if (this_present_wheres || that_present_wheres) {
      if (!(this_present_wheres && that_present_wheres))
        return false;
      if (!this.wheres.equals(that.wheres))
        return false;
    }

    boolean this_present_startPartition = true && this.isSetStartPartition();
    boolean that_present_startPartition = true && that.isSetStartPartition();
    if (this_present_startPartition || that_present_startPartition) {
      if (!(this_present_startPartition && that_present_startPartition))
        return false;
      if (!this.startPartition.equals(that.startPartition))
        return false;
    }

    boolean this_present_endPartition = true && this.isSetEndPartition();
    boolean that_present_endPartition = true && that.isSetEndPartition();
    if (this_present_endPartition || that_present_endPartition) {
      if (!(this_present_endPartition && that_present_endPartition))
        return false;
      if (!this.endPartition.equals(that.endPartition))
        return false;
    }

    boolean this_present_timeColumn = true && this.isSetTimeColumn();
    boolean that_present_timeColumn = true && that.isSetTimeColumn();
    if (this_present_timeColumn || that_present_timeColumn) {
      if (!(this_present_timeColumn && that_present_timeColumn))
        return false;
      if (!this.timeColumn.equals(that.timeColumn))
        return false;
    }

    boolean this_present_setups = true && this.isSetSetups();
    boolean that_present_setups = true && that.isSetSetups();
    if (this_present_setups || that_present_setups) {
      if (!(this_present_setups && that_present_setups))
        return false;
      if (!this.setups.equals(that.setups))
        return false;
    }

    boolean this_present_mutationTimeColumn = true && this.isSetMutationTimeColumn();
    boolean that_present_mutationTimeColumn = true && that.isSetMutationTimeColumn();
    if (this_present_mutationTimeColumn || that_present_mutationTimeColumn) {
      if (!(this_present_mutationTimeColumn && that_present_mutationTimeColumn))
        return false;
      if (!this.mutationTimeColumn.equals(that.mutationTimeColumn))
        return false;
    }

    boolean this_present_reversalColumn = true && this.isSetReversalColumn();
    boolean that_present_reversalColumn = true && that.isSetReversalColumn();
    if (this_present_reversalColumn || that_present_reversalColumn) {
      if (!(this_present_reversalColumn && that_present_reversalColumn))
        return false;
      if (!this.reversalColumn.equals(that.reversalColumn))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSelects()) ? 131071 : 524287);
    if (isSetSelects())
      hashCode = hashCode * 8191 + selects.hashCode();

    hashCode = hashCode * 8191 + ((isSetWheres()) ? 131071 : 524287);
    if (isSetWheres())
      hashCode = hashCode * 8191 + wheres.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartPartition()) ? 131071 : 524287);
    if (isSetStartPartition())
      hashCode = hashCode * 8191 + startPartition.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndPartition()) ? 131071 : 524287);
    if (isSetEndPartition())
      hashCode = hashCode * 8191 + endPartition.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeColumn()) ? 131071 : 524287);
    if (isSetTimeColumn())
      hashCode = hashCode * 8191 + timeColumn.hashCode();

    hashCode = hashCode * 8191 + ((isSetSetups()) ? 131071 : 524287);
    if (isSetSetups())
      hashCode = hashCode * 8191 + setups.hashCode();

    hashCode = hashCode * 8191 + ((isSetMutationTimeColumn()) ? 131071 : 524287);
    if (isSetMutationTimeColumn())
      hashCode = hashCode * 8191 + mutationTimeColumn.hashCode();

    hashCode = hashCode * 8191 + ((isSetReversalColumn()) ? 131071 : 524287);
    if (isSetReversalColumn())
      hashCode = hashCode * 8191 + reversalColumn.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Query other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSelects()).compareTo(other.isSetSelects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selects, other.selects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWheres()).compareTo(other.isSetWheres());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWheres()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wheres, other.wheres);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartPartition()).compareTo(other.isSetStartPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startPartition, other.startPartition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndPartition()).compareTo(other.isSetEndPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPartition, other.endPartition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeColumn()).compareTo(other.isSetTimeColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeColumn, other.timeColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSetups()).compareTo(other.isSetSetups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setups, other.setups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMutationTimeColumn()).compareTo(other.isSetMutationTimeColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutationTimeColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutationTimeColumn, other.mutationTimeColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReversalColumn()).compareTo(other.isSetReversalColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReversalColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversalColumn, other.reversalColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Query(");
    boolean first = true;

    if (isSetSelects()) {
      sb.append("selects:");
      if (this.selects == null) {
        sb.append("null");
      } else {
        sb.append(this.selects);
      }
      first = false;
    }
    if (isSetWheres()) {
      if (!first) sb.append(", ");
      sb.append("wheres:");
      if (this.wheres == null) {
        sb.append("null");
      } else {
        sb.append(this.wheres);
      }
      first = false;
    }
    if (isSetStartPartition()) {
      if (!first) sb.append(", ");
      sb.append("startPartition:");
      if (this.startPartition == null) {
        sb.append("null");
      } else {
        sb.append(this.startPartition);
      }
      first = false;
    }
    if (isSetEndPartition()) {
      if (!first) sb.append(", ");
      sb.append("endPartition:");
      if (this.endPartition == null) {
        sb.append("null");
      } else {
        sb.append(this.endPartition);
      }
      first = false;
    }
    if (isSetTimeColumn()) {
      if (!first) sb.append(", ");
      sb.append("timeColumn:");
      if (this.timeColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.timeColumn);
      }
      first = false;
    }
    if (isSetSetups()) {
      if (!first) sb.append(", ");
      sb.append("setups:");
      if (this.setups == null) {
        sb.append("null");
      } else {
        sb.append(this.setups);
      }
      first = false;
    }
    if (isSetMutationTimeColumn()) {
      if (!first) sb.append(", ");
      sb.append("mutationTimeColumn:");
      if (this.mutationTimeColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.mutationTimeColumn);
      }
      first = false;
    }
    if (isSetReversalColumn()) {
      if (!first) sb.append(", ");
      sb.append("reversalColumn:");
      if (this.reversalColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.reversalColumn);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryStandardScheme getScheme() {
      return new QueryStandardScheme();
    }
  }

  private static class QueryStandardScheme extends org.apache.thrift.scheme.StandardScheme<Query> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SELECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.selects = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.selects.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setSelectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WHERES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.wheres = new java.util.ArrayList<java.lang.String>(_list4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readString();
                  struct.wheres.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setWheresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startPartition = iprot.readString();
              struct.setStartPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endPartition = iprot.readString();
              struct.setEndPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeColumn = iprot.readString();
              struct.setTimeColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SETUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.setups = new java.util.ArrayList<java.lang.String>(_list7.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.setups.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setSetupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MUTATION_TIME_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mutationTimeColumn = iprot.readString();
              struct.setMutationTimeColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REVERSAL_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reversalColumn = iprot.readString();
              struct.setReversalColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Query struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.selects != null) {
        if (struct.isSetSelects()) {
          oprot.writeFieldBegin(SELECTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.selects.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter10 : struct.selects.entrySet())
            {
              oprot.writeString(_iter10.getKey());
              oprot.writeString(_iter10.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.wheres != null) {
        if (struct.isSetWheres()) {
          oprot.writeFieldBegin(WHERES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.wheres.size()));
            for (java.lang.String _iter11 : struct.wheres)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.startPartition != null) {
        if (struct.isSetStartPartition()) {
          oprot.writeFieldBegin(START_PARTITION_FIELD_DESC);
          oprot.writeString(struct.startPartition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endPartition != null) {
        if (struct.isSetEndPartition()) {
          oprot.writeFieldBegin(END_PARTITION_FIELD_DESC);
          oprot.writeString(struct.endPartition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeColumn != null) {
        if (struct.isSetTimeColumn()) {
          oprot.writeFieldBegin(TIME_COLUMN_FIELD_DESC);
          oprot.writeString(struct.timeColumn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.setups != null) {
        if (struct.isSetSetups()) {
          oprot.writeFieldBegin(SETUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.setups.size()));
            for (java.lang.String _iter12 : struct.setups)
            {
              oprot.writeString(_iter12);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mutationTimeColumn != null) {
        if (struct.isSetMutationTimeColumn()) {
          oprot.writeFieldBegin(MUTATION_TIME_COLUMN_FIELD_DESC);
          oprot.writeString(struct.mutationTimeColumn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reversalColumn != null) {
        if (struct.isSetReversalColumn()) {
          oprot.writeFieldBegin(REVERSAL_COLUMN_FIELD_DESC);
          oprot.writeString(struct.reversalColumn);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryTupleScheme getScheme() {
      return new QueryTupleScheme();
    }
  }

  private static class QueryTupleScheme extends org.apache.thrift.scheme.TupleScheme<Query> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSelects()) {
        optionals.set(0);
      }
      if (struct.isSetWheres()) {
        optionals.set(1);
      }
      if (struct.isSetStartPartition()) {
        optionals.set(2);
      }
      if (struct.isSetEndPartition()) {
        optionals.set(3);
      }
      if (struct.isSetTimeColumn()) {
        optionals.set(4);
      }
      if (struct.isSetSetups()) {
        optionals.set(5);
      }
      if (struct.isSetMutationTimeColumn()) {
        optionals.set(6);
      }
      if (struct.isSetReversalColumn()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSelects()) {
        {
          oprot.writeI32(struct.selects.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter13 : struct.selects.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetWheres()) {
        {
          oprot.writeI32(struct.wheres.size());
          for (java.lang.String _iter14 : struct.wheres)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetStartPartition()) {
        oprot.writeString(struct.startPartition);
      }
      if (struct.isSetEndPartition()) {
        oprot.writeString(struct.endPartition);
      }
      if (struct.isSetTimeColumn()) {
        oprot.writeString(struct.timeColumn);
      }
      if (struct.isSetSetups()) {
        {
          oprot.writeI32(struct.setups.size());
          for (java.lang.String _iter15 : struct.setups)
          {
            oprot.writeString(_iter15);
          }
        }
      }
      if (struct.isSetMutationTimeColumn()) {
        oprot.writeString(struct.mutationTimeColumn);
      }
      if (struct.isSetReversalColumn()) {
        oprot.writeString(struct.reversalColumn);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.selects = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key17;
          @org.apache.thrift.annotation.Nullable java.lang.String _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readString();
            struct.selects.put(_key17, _val18);
          }
        }
        struct.setSelectsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.wheres = new java.util.ArrayList<java.lang.String>(_list20.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readString();
            struct.wheres.add(_elem21);
          }
        }
        struct.setWheresIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startPartition = iprot.readString();
        struct.setStartPartitionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endPartition = iprot.readString();
        struct.setEndPartitionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timeColumn = iprot.readString();
        struct.setTimeColumnIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.setups = new java.util.ArrayList<java.lang.String>(_list23.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.setups.add(_elem24);
          }
        }
        struct.setSetupsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mutationTimeColumn = iprot.readString();
        struct.setMutationTimeColumnIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reversalColumn = iprot.readString();
        struct.setReversalColumnIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

