/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-29")
public class Join implements org.apache.thrift.TBase<Join, Join._Fields>, java.io.Serializable, Cloneable, Comparable<Join> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Join");

  private static final org.apache.thrift.protocol.TField META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metaData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("left", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField JOIN_PARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("joinParts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SKEW_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("skewKeys", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField ONLINE_EXTERNAL_PARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineExternalParts", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LABEL_PART_FIELD_DESC = new org.apache.thrift.protocol.TField("labelPart", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField BOOTSTRAP_PARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bootstrapParts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ROW_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rowIds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DERIVATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("derivations", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JoinStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JoinTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable MetaData metaData; // optional
  public @org.apache.thrift.annotation.Nullable Source left; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<JoinPart> joinParts; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> skewKeys; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ExternalPart> onlineExternalParts; // optional
  public @org.apache.thrift.annotation.Nullable LabelPart labelPart; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<BootstrapPart> bootstrapParts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> rowIds; // optional
  /**
   * List of a struct with derived column name and the expression based on joinPart / externalPart columns
   * The expression can be any valid Spark SQL select clause without aggregation functions.
   * 
   * joinPart column names are automatically constructed according to the below convention
   *  `{join_part_prefix}_{group_by_name}_{input_column_name}_{aggregation_operation}_{window}_{by_bucket}`
   *  prefix, window and bucket are optional. You can find the type information of columns using the analyzer tool.
   * 
   * externalPart column names are automatically constructed according to the below convention
   *  `ext_{external_source_name}_{value_column}`
   * Types are defined along with the schema by users for external sources.
   * 
   * Including a column with key "*" and value "*", means that every raw column will be included along with the derived
   * columns.
   * 
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<Derivation> derivations; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    META_DATA((short)1, "metaData"),
    LEFT((short)2, "left"),
    JOIN_PARTS((short)3, "joinParts"),
    SKEW_KEYS((short)4, "skewKeys"),
    ONLINE_EXTERNAL_PARTS((short)5, "onlineExternalParts"),
    LABEL_PART((short)6, "labelPart"),
    BOOTSTRAP_PARTS((short)7, "bootstrapParts"),
    ROW_IDS((short)8, "rowIds"),
    /**
     * List of a struct with derived column name and the expression based on joinPart / externalPart columns
     * The expression can be any valid Spark SQL select clause without aggregation functions.
     * 
     * joinPart column names are automatically constructed according to the below convention
     *  `{join_part_prefix}_{group_by_name}_{input_column_name}_{aggregation_operation}_{window}_{by_bucket}`
     *  prefix, window and bucket are optional. You can find the type information of columns using the analyzer tool.
     * 
     * externalPart column names are automatically constructed according to the below convention
     *  `ext_{external_source_name}_{value_column}`
     * Types are defined along with the schema by users for external sources.
     * 
     * Including a column with key "*" and value "*", means that every raw column will be included along with the derived
     * columns.
     * 
     */
    DERIVATIONS((short)9, "derivations");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // META_DATA
          return META_DATA;
        case 2: // LEFT
          return LEFT;
        case 3: // JOIN_PARTS
          return JOIN_PARTS;
        case 4: // SKEW_KEYS
          return SKEW_KEYS;
        case 5: // ONLINE_EXTERNAL_PARTS
          return ONLINE_EXTERNAL_PARTS;
        case 6: // LABEL_PART
          return LABEL_PART;
        case 7: // BOOTSTRAP_PARTS
          return BOOTSTRAP_PARTS;
        case 8: // ROW_IDS
          return ROW_IDS;
        case 9: // DERIVATIONS
          return DERIVATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.META_DATA,_Fields.LEFT,_Fields.SKEW_KEYS,_Fields.ONLINE_EXTERNAL_PARTS,_Fields.LABEL_PART,_Fields.BOOTSTRAP_PARTS,_Fields.ROW_IDS,_Fields.DERIVATIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.META_DATA, new org.apache.thrift.meta_data.FieldMetaData("metaData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetaData.class)));
    tmpMap.put(_Fields.LEFT, new org.apache.thrift.meta_data.FieldMetaData("left", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Source.class)));
    tmpMap.put(_Fields.JOIN_PARTS, new org.apache.thrift.meta_data.FieldMetaData("joinParts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JoinPart.class))));
    tmpMap.put(_Fields.SKEW_KEYS, new org.apache.thrift.meta_data.FieldMetaData("skewKeys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ONLINE_EXTERNAL_PARTS, new org.apache.thrift.meta_data.FieldMetaData("onlineExternalParts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExternalPart.class))));
    tmpMap.put(_Fields.LABEL_PART, new org.apache.thrift.meta_data.FieldMetaData("labelPart", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "LabelPart")));
    tmpMap.put(_Fields.BOOTSTRAP_PARTS, new org.apache.thrift.meta_data.FieldMetaData("bootstrapParts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "BootstrapPart"))));
    tmpMap.put(_Fields.ROW_IDS, new org.apache.thrift.meta_data.FieldMetaData("rowIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DERIVATIONS, new org.apache.thrift.meta_data.FieldMetaData("derivations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Derivation.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Join.class, metaDataMap);
  }

  public Join() {
  }

  public Join(
    java.util.List<JoinPart> joinParts)
  {
    this();
    this.joinParts = joinParts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Join(Join other) {
    if (other.isSetMetaData()) {
      this.metaData = new MetaData(other.metaData);
    }
    if (other.isSetLeft()) {
      this.left = new Source(other.left);
    }
    if (other.isSetJoinParts()) {
      java.util.List<JoinPart> __this__joinParts = new java.util.ArrayList<JoinPart>(other.joinParts.size());
      for (JoinPart other_element : other.joinParts) {
        __this__joinParts.add(new JoinPart(other_element));
      }
      this.joinParts = __this__joinParts;
    }
    if (other.isSetSkewKeys()) {
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__skewKeys = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.skewKeys.size());
      for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.skewKeys.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.List<java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__skewKeys_copy_key = other_element_key;

        java.util.List<java.lang.String> __this__skewKeys_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

        __this__skewKeys.put(__this__skewKeys_copy_key, __this__skewKeys_copy_value);
      }
      this.skewKeys = __this__skewKeys;
    }
    if (other.isSetOnlineExternalParts()) {
      java.util.List<ExternalPart> __this__onlineExternalParts = new java.util.ArrayList<ExternalPart>(other.onlineExternalParts.size());
      for (ExternalPart other_element : other.onlineExternalParts) {
        __this__onlineExternalParts.add(new ExternalPart(other_element));
      }
      this.onlineExternalParts = __this__onlineExternalParts;
    }
    if (other.isSetLabelPart()) {
      this.labelPart = new LabelPart(other.labelPart);
    }
    if (other.isSetBootstrapParts()) {
      java.util.List<BootstrapPart> __this__bootstrapParts = new java.util.ArrayList<BootstrapPart>(other.bootstrapParts.size());
      for (BootstrapPart other_element : other.bootstrapParts) {
        __this__bootstrapParts.add(new BootstrapPart(other_element));
      }
      this.bootstrapParts = __this__bootstrapParts;
    }
    if (other.isSetRowIds()) {
      java.util.List<java.lang.String> __this__rowIds = new java.util.ArrayList<java.lang.String>(other.rowIds);
      this.rowIds = __this__rowIds;
    }
    if (other.isSetDerivations()) {
      java.util.List<Derivation> __this__derivations = new java.util.ArrayList<Derivation>(other.derivations.size());
      for (Derivation other_element : other.derivations) {
        __this__derivations.add(new Derivation(other_element));
      }
      this.derivations = __this__derivations;
    }
  }

  public Join deepCopy() {
    return new Join(this);
  }

  @Override
  public void clear() {
    this.metaData = null;
    this.left = null;
    this.joinParts = null;
    this.skewKeys = null;
    this.onlineExternalParts = null;
    this.labelPart = null;
    this.bootstrapParts = null;
    this.rowIds = null;
    this.derivations = null;
  }

  @org.apache.thrift.annotation.Nullable
  public MetaData getMetaData() {
    return this.metaData;
  }

  public Join setMetaData(@org.apache.thrift.annotation.Nullable MetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  public void unsetMetaData() {
    this.metaData = null;
  }

  /** Returns true if field metaData is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaData() {
    return this.metaData != null;
  }

  public void setMetaDataIsSet(boolean value) {
    if (!value) {
      this.metaData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Source getLeft() {
    return this.left;
  }

  public Join setLeft(@org.apache.thrift.annotation.Nullable Source left) {
    this.left = left;
    return this;
  }

  public void unsetLeft() {
    this.left = null;
  }

  /** Returns true if field left is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft() {
    return this.left != null;
  }

  public void setLeftIsSet(boolean value) {
    if (!value) {
      this.left = null;
    }
  }

  public int getJoinPartsSize() {
    return (this.joinParts == null) ? 0 : this.joinParts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<JoinPart> getJoinPartsIterator() {
    return (this.joinParts == null) ? null : this.joinParts.iterator();
  }

  public void addToJoinParts(JoinPart elem) {
    if (this.joinParts == null) {
      this.joinParts = new java.util.ArrayList<JoinPart>();
    }
    this.joinParts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<JoinPart> getJoinParts() {
    return this.joinParts;
  }

  public Join setJoinParts(@org.apache.thrift.annotation.Nullable java.util.List<JoinPart> joinParts) {
    this.joinParts = joinParts;
    return this;
  }

  public void unsetJoinParts() {
    this.joinParts = null;
  }

  /** Returns true if field joinParts is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinParts() {
    return this.joinParts != null;
  }

  public void setJoinPartsIsSet(boolean value) {
    if (!value) {
      this.joinParts = null;
    }
  }

  public int getSkewKeysSize() {
    return (this.skewKeys == null) ? 0 : this.skewKeys.size();
  }

  public void putToSkewKeys(java.lang.String key, java.util.List<java.lang.String> val) {
    if (this.skewKeys == null) {
      this.skewKeys = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
    }
    this.skewKeys.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getSkewKeys() {
    return this.skewKeys;
  }

  public Join setSkewKeys(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> skewKeys) {
    this.skewKeys = skewKeys;
    return this;
  }

  public void unsetSkewKeys() {
    this.skewKeys = null;
  }

  /** Returns true if field skewKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetSkewKeys() {
    return this.skewKeys != null;
  }

  public void setSkewKeysIsSet(boolean value) {
    if (!value) {
      this.skewKeys = null;
    }
  }

  public int getOnlineExternalPartsSize() {
    return (this.onlineExternalParts == null) ? 0 : this.onlineExternalParts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ExternalPart> getOnlineExternalPartsIterator() {
    return (this.onlineExternalParts == null) ? null : this.onlineExternalParts.iterator();
  }

  public void addToOnlineExternalParts(ExternalPart elem) {
    if (this.onlineExternalParts == null) {
      this.onlineExternalParts = new java.util.ArrayList<ExternalPart>();
    }
    this.onlineExternalParts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ExternalPart> getOnlineExternalParts() {
    return this.onlineExternalParts;
  }

  public Join setOnlineExternalParts(@org.apache.thrift.annotation.Nullable java.util.List<ExternalPart> onlineExternalParts) {
    this.onlineExternalParts = onlineExternalParts;
    return this;
  }

  public void unsetOnlineExternalParts() {
    this.onlineExternalParts = null;
  }

  /** Returns true if field onlineExternalParts is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineExternalParts() {
    return this.onlineExternalParts != null;
  }

  public void setOnlineExternalPartsIsSet(boolean value) {
    if (!value) {
      this.onlineExternalParts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public LabelPart getLabelPart() {
    return this.labelPart;
  }

  public Join setLabelPart(@org.apache.thrift.annotation.Nullable LabelPart labelPart) {
    this.labelPart = labelPart;
    return this;
  }

  public void unsetLabelPart() {
    this.labelPart = null;
  }

  /** Returns true if field labelPart is set (has been assigned a value) and false otherwise */
  public boolean isSetLabelPart() {
    return this.labelPart != null;
  }

  public void setLabelPartIsSet(boolean value) {
    if (!value) {
      this.labelPart = null;
    }
  }

  public int getBootstrapPartsSize() {
    return (this.bootstrapParts == null) ? 0 : this.bootstrapParts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<BootstrapPart> getBootstrapPartsIterator() {
    return (this.bootstrapParts == null) ? null : this.bootstrapParts.iterator();
  }

  public void addToBootstrapParts(BootstrapPart elem) {
    if (this.bootstrapParts == null) {
      this.bootstrapParts = new java.util.ArrayList<BootstrapPart>();
    }
    this.bootstrapParts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<BootstrapPart> getBootstrapParts() {
    return this.bootstrapParts;
  }

  public Join setBootstrapParts(@org.apache.thrift.annotation.Nullable java.util.List<BootstrapPart> bootstrapParts) {
    this.bootstrapParts = bootstrapParts;
    return this;
  }

  public void unsetBootstrapParts() {
    this.bootstrapParts = null;
  }

  /** Returns true if field bootstrapParts is set (has been assigned a value) and false otherwise */
  public boolean isSetBootstrapParts() {
    return this.bootstrapParts != null;
  }

  public void setBootstrapPartsIsSet(boolean value) {
    if (!value) {
      this.bootstrapParts = null;
    }
  }

  public int getRowIdsSize() {
    return (this.rowIds == null) ? 0 : this.rowIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRowIdsIterator() {
    return (this.rowIds == null) ? null : this.rowIds.iterator();
  }

  public void addToRowIds(java.lang.String elem) {
    if (this.rowIds == null) {
      this.rowIds = new java.util.ArrayList<java.lang.String>();
    }
    this.rowIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRowIds() {
    return this.rowIds;
  }

  public Join setRowIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> rowIds) {
    this.rowIds = rowIds;
    return this;
  }

  public void unsetRowIds() {
    this.rowIds = null;
  }

  /** Returns true if field rowIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRowIds() {
    return this.rowIds != null;
  }

  public void setRowIdsIsSet(boolean value) {
    if (!value) {
      this.rowIds = null;
    }
  }

  public int getDerivationsSize() {
    return (this.derivations == null) ? 0 : this.derivations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Derivation> getDerivationsIterator() {
    return (this.derivations == null) ? null : this.derivations.iterator();
  }

  public void addToDerivations(Derivation elem) {
    if (this.derivations == null) {
      this.derivations = new java.util.ArrayList<Derivation>();
    }
    this.derivations.add(elem);
  }

  /**
   * List of a struct with derived column name and the expression based on joinPart / externalPart columns
   * The expression can be any valid Spark SQL select clause without aggregation functions.
   * 
   * joinPart column names are automatically constructed according to the below convention
   *  `{join_part_prefix}_{group_by_name}_{input_column_name}_{aggregation_operation}_{window}_{by_bucket}`
   *  prefix, window and bucket are optional. You can find the type information of columns using the analyzer tool.
   * 
   * externalPart column names are automatically constructed according to the below convention
   *  `ext_{external_source_name}_{value_column}`
   * Types are defined along with the schema by users for external sources.
   * 
   * Including a column with key "*" and value "*", means that every raw column will be included along with the derived
   * columns.
   * 
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<Derivation> getDerivations() {
    return this.derivations;
  }

  /**
   * List of a struct with derived column name and the expression based on joinPart / externalPart columns
   * The expression can be any valid Spark SQL select clause without aggregation functions.
   * 
   * joinPart column names are automatically constructed according to the below convention
   *  `{join_part_prefix}_{group_by_name}_{input_column_name}_{aggregation_operation}_{window}_{by_bucket}`
   *  prefix, window and bucket are optional. You can find the type information of columns using the analyzer tool.
   * 
   * externalPart column names are automatically constructed according to the below convention
   *  `ext_{external_source_name}_{value_column}`
   * Types are defined along with the schema by users for external sources.
   * 
   * Including a column with key "*" and value "*", means that every raw column will be included along with the derived
   * columns.
   * 
   */
  public Join setDerivations(@org.apache.thrift.annotation.Nullable java.util.List<Derivation> derivations) {
    this.derivations = derivations;
    return this;
  }

  public void unsetDerivations() {
    this.derivations = null;
  }

  /** Returns true if field derivations is set (has been assigned a value) and false otherwise */
  public boolean isSetDerivations() {
    return this.derivations != null;
  }

  public void setDerivationsIsSet(boolean value) {
    if (!value) {
      this.derivations = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case META_DATA:
      if (value == null) {
        unsetMetaData();
      } else {
        setMetaData((MetaData)value);
      }
      break;

    case LEFT:
      if (value == null) {
        unsetLeft();
      } else {
        setLeft((Source)value);
      }
      break;

    case JOIN_PARTS:
      if (value == null) {
        unsetJoinParts();
      } else {
        setJoinParts((java.util.List<JoinPart>)value);
      }
      break;

    case SKEW_KEYS:
      if (value == null) {
        unsetSkewKeys();
      } else {
        setSkewKeys((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
      }
      break;

    case ONLINE_EXTERNAL_PARTS:
      if (value == null) {
        unsetOnlineExternalParts();
      } else {
        setOnlineExternalParts((java.util.List<ExternalPart>)value);
      }
      break;

    case LABEL_PART:
      if (value == null) {
        unsetLabelPart();
      } else {
        setLabelPart((LabelPart)value);
      }
      break;

    case BOOTSTRAP_PARTS:
      if (value == null) {
        unsetBootstrapParts();
      } else {
        setBootstrapParts((java.util.List<BootstrapPart>)value);
      }
      break;

    case ROW_IDS:
      if (value == null) {
        unsetRowIds();
      } else {
        setRowIds((java.util.List<java.lang.String>)value);
      }
      break;

    case DERIVATIONS:
      if (value == null) {
        unsetDerivations();
      } else {
        setDerivations((java.util.List<Derivation>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case META_DATA:
      return getMetaData();

    case LEFT:
      return getLeft();

    case JOIN_PARTS:
      return getJoinParts();

    case SKEW_KEYS:
      return getSkewKeys();

    case ONLINE_EXTERNAL_PARTS:
      return getOnlineExternalParts();

    case LABEL_PART:
      return getLabelPart();

    case BOOTSTRAP_PARTS:
      return getBootstrapParts();

    case ROW_IDS:
      return getRowIds();

    case DERIVATIONS:
      return getDerivations();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case META_DATA:
      return isSetMetaData();
    case LEFT:
      return isSetLeft();
    case JOIN_PARTS:
      return isSetJoinParts();
    case SKEW_KEYS:
      return isSetSkewKeys();
    case ONLINE_EXTERNAL_PARTS:
      return isSetOnlineExternalParts();
    case LABEL_PART:
      return isSetLabelPart();
    case BOOTSTRAP_PARTS:
      return isSetBootstrapParts();
    case ROW_IDS:
      return isSetRowIds();
    case DERIVATIONS:
      return isSetDerivations();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Join)
      return this.equals((Join)that);
    return false;
  }

  public boolean equals(Join that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_metaData = true && this.isSetMetaData();
    boolean that_present_metaData = true && that.isSetMetaData();
    if (this_present_metaData || that_present_metaData) {
      if (!(this_present_metaData && that_present_metaData))
        return false;
      if (!this.metaData.equals(that.metaData))
        return false;
    }

    boolean this_present_left = true && this.isSetLeft();
    boolean that_present_left = true && that.isSetLeft();
    if (this_present_left || that_present_left) {
      if (!(this_present_left && that_present_left))
        return false;
      if (!this.left.equals(that.left))
        return false;
    }

    boolean this_present_joinParts = true && this.isSetJoinParts();
    boolean that_present_joinParts = true && that.isSetJoinParts();
    if (this_present_joinParts || that_present_joinParts) {
      if (!(this_present_joinParts && that_present_joinParts))
        return false;
      if (!this.joinParts.equals(that.joinParts))
        return false;
    }

    boolean this_present_skewKeys = true && this.isSetSkewKeys();
    boolean that_present_skewKeys = true && that.isSetSkewKeys();
    if (this_present_skewKeys || that_present_skewKeys) {
      if (!(this_present_skewKeys && that_present_skewKeys))
        return false;
      if (!this.skewKeys.equals(that.skewKeys))
        return false;
    }

    boolean this_present_onlineExternalParts = true && this.isSetOnlineExternalParts();
    boolean that_present_onlineExternalParts = true && that.isSetOnlineExternalParts();
    if (this_present_onlineExternalParts || that_present_onlineExternalParts) {
      if (!(this_present_onlineExternalParts && that_present_onlineExternalParts))
        return false;
      if (!this.onlineExternalParts.equals(that.onlineExternalParts))
        return false;
    }

    boolean this_present_labelPart = true && this.isSetLabelPart();
    boolean that_present_labelPart = true && that.isSetLabelPart();
    if (this_present_labelPart || that_present_labelPart) {
      if (!(this_present_labelPart && that_present_labelPart))
        return false;
      if (!this.labelPart.equals(that.labelPart))
        return false;
    }

    boolean this_present_bootstrapParts = true && this.isSetBootstrapParts();
    boolean that_present_bootstrapParts = true && that.isSetBootstrapParts();
    if (this_present_bootstrapParts || that_present_bootstrapParts) {
      if (!(this_present_bootstrapParts && that_present_bootstrapParts))
        return false;
      if (!this.bootstrapParts.equals(that.bootstrapParts))
        return false;
    }

    boolean this_present_rowIds = true && this.isSetRowIds();
    boolean that_present_rowIds = true && that.isSetRowIds();
    if (this_present_rowIds || that_present_rowIds) {
      if (!(this_present_rowIds && that_present_rowIds))
        return false;
      if (!this.rowIds.equals(that.rowIds))
        return false;
    }

    boolean this_present_derivations = true && this.isSetDerivations();
    boolean that_present_derivations = true && that.isSetDerivations();
    if (this_present_derivations || that_present_derivations) {
      if (!(this_present_derivations && that_present_derivations))
        return false;
      if (!this.derivations.equals(that.derivations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMetaData()) ? 131071 : 524287);
    if (isSetMetaData())
      hashCode = hashCode * 8191 + metaData.hashCode();

    hashCode = hashCode * 8191 + ((isSetLeft()) ? 131071 : 524287);
    if (isSetLeft())
      hashCode = hashCode * 8191 + left.hashCode();

    hashCode = hashCode * 8191 + ((isSetJoinParts()) ? 131071 : 524287);
    if (isSetJoinParts())
      hashCode = hashCode * 8191 + joinParts.hashCode();

    hashCode = hashCode * 8191 + ((isSetSkewKeys()) ? 131071 : 524287);
    if (isSetSkewKeys())
      hashCode = hashCode * 8191 + skewKeys.hashCode();

    hashCode = hashCode * 8191 + ((isSetOnlineExternalParts()) ? 131071 : 524287);
    if (isSetOnlineExternalParts())
      hashCode = hashCode * 8191 + onlineExternalParts.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabelPart()) ? 131071 : 524287);
    if (isSetLabelPart())
      hashCode = hashCode * 8191 + labelPart.hashCode();

    hashCode = hashCode * 8191 + ((isSetBootstrapParts()) ? 131071 : 524287);
    if (isSetBootstrapParts())
      hashCode = hashCode * 8191 + bootstrapParts.hashCode();

    hashCode = hashCode * 8191 + ((isSetRowIds()) ? 131071 : 524287);
    if (isSetRowIds())
      hashCode = hashCode * 8191 + rowIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetDerivations()) ? 131071 : 524287);
    if (isSetDerivations())
      hashCode = hashCode * 8191 + derivations.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Join other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMetaData()).compareTo(other.isSetMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaData, other.metaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLeft()).compareTo(other.isSetLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left, other.left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJoinParts()).compareTo(other.isSetJoinParts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinParts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinParts, other.joinParts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSkewKeys()).compareTo(other.isSetSkewKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkewKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skewKeys, other.skewKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOnlineExternalParts()).compareTo(other.isSetOnlineExternalParts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineExternalParts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineExternalParts, other.onlineExternalParts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLabelPart()).compareTo(other.isSetLabelPart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabelPart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelPart, other.labelPart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBootstrapParts()).compareTo(other.isSetBootstrapParts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBootstrapParts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bootstrapParts, other.bootstrapParts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRowIds()).compareTo(other.isSetRowIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowIds, other.rowIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDerivations()).compareTo(other.isSetDerivations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerivations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derivations, other.derivations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Join(");
    boolean first = true;

    if (isSetMetaData()) {
      sb.append("metaData:");
      if (this.metaData == null) {
        sb.append("null");
      } else {
        sb.append(this.metaData);
      }
      first = false;
    }
    if (isSetLeft()) {
      if (!first) sb.append(", ");
      sb.append("left:");
      if (this.left == null) {
        sb.append("null");
      } else {
        sb.append(this.left);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("joinParts:");
    if (this.joinParts == null) {
      sb.append("null");
    } else {
      sb.append(this.joinParts);
    }
    first = false;
    if (isSetSkewKeys()) {
      if (!first) sb.append(", ");
      sb.append("skewKeys:");
      if (this.skewKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.skewKeys);
      }
      first = false;
    }
    if (isSetOnlineExternalParts()) {
      if (!first) sb.append(", ");
      sb.append("onlineExternalParts:");
      if (this.onlineExternalParts == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineExternalParts);
      }
      first = false;
    }
    if (isSetLabelPart()) {
      if (!first) sb.append(", ");
      sb.append("labelPart:");
      if (this.labelPart == null) {
        sb.append("null");
      } else {
        sb.append(this.labelPart);
      }
      first = false;
    }
    if (isSetBootstrapParts()) {
      if (!first) sb.append(", ");
      sb.append("bootstrapParts:");
      if (this.bootstrapParts == null) {
        sb.append("null");
      } else {
        sb.append(this.bootstrapParts);
      }
      first = false;
    }
    if (isSetRowIds()) {
      if (!first) sb.append(", ");
      sb.append("rowIds:");
      if (this.rowIds == null) {
        sb.append("null");
      } else {
        sb.append(this.rowIds);
      }
      first = false;
    }
    if (isSetDerivations()) {
      if (!first) sb.append(", ");
      sb.append("derivations:");
      if (this.derivations == null) {
        sb.append("null");
      } else {
        sb.append(this.derivations);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (metaData != null) {
      metaData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinStandardScheme getScheme() {
      return new JoinStandardScheme();
    }
  }

  private static class JoinStandardScheme extends org.apache.thrift.scheme.StandardScheme<Join> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Join struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metaData = new MetaData();
              struct.metaData.read(iprot);
              struct.setMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.left = new Source();
              struct.left.read(iprot);
              struct.setLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOIN_PARTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.joinParts = new java.util.ArrayList<JoinPart>(_list160.size);
                @org.apache.thrift.annotation.Nullable JoinPart _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = new JoinPart();
                  _elem161.read(iprot);
                  struct.joinParts.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setJoinPartsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SKEW_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map163 = iprot.readMapBegin();
                struct.skewKeys = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map163.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key164;
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val165;
                for (int _i166 = 0; _i166 < _map163.size; ++_i166)
                {
                  _key164 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list167 = iprot.readListBegin();
                    _val165 = new java.util.ArrayList<java.lang.String>(_list167.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem168;
                    for (int _i169 = 0; _i169 < _list167.size; ++_i169)
                    {
                      _elem168 = iprot.readString();
                      _val165.add(_elem168);
                    }
                    iprot.readListEnd();
                  }
                  struct.skewKeys.put(_key164, _val165);
                }
                iprot.readMapEnd();
              }
              struct.setSkewKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ONLINE_EXTERNAL_PARTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                struct.onlineExternalParts = new java.util.ArrayList<ExternalPart>(_list170.size);
                @org.apache.thrift.annotation.Nullable ExternalPart _elem171;
                for (int _i172 = 0; _i172 < _list170.size; ++_i172)
                {
                  _elem171 = new ExternalPart();
                  _elem171.read(iprot);
                  struct.onlineExternalParts.add(_elem171);
                }
                iprot.readListEnd();
              }
              struct.setOnlineExternalPartsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LABEL_PART
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.labelPart = new LabelPart();
              struct.labelPart.read(iprot);
              struct.setLabelPartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BOOTSTRAP_PARTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list173 = iprot.readListBegin();
                struct.bootstrapParts = new java.util.ArrayList<BootstrapPart>(_list173.size);
                @org.apache.thrift.annotation.Nullable BootstrapPart _elem174;
                for (int _i175 = 0; _i175 < _list173.size; ++_i175)
                {
                  _elem174 = new BootstrapPart();
                  _elem174.read(iprot);
                  struct.bootstrapParts.add(_elem174);
                }
                iprot.readListEnd();
              }
              struct.setBootstrapPartsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROW_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                struct.rowIds = new java.util.ArrayList<java.lang.String>(_list176.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem177;
                for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                {
                  _elem177 = iprot.readString();
                  struct.rowIds.add(_elem177);
                }
                iprot.readListEnd();
              }
              struct.setRowIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DERIVATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                struct.derivations = new java.util.ArrayList<Derivation>(_list179.size);
                @org.apache.thrift.annotation.Nullable Derivation _elem180;
                for (int _i181 = 0; _i181 < _list179.size; ++_i181)
                {
                  _elem180 = new Derivation();
                  _elem180.read(iprot);
                  struct.derivations.add(_elem180);
                }
                iprot.readListEnd();
              }
              struct.setDerivationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Join struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metaData != null) {
        if (struct.isSetMetaData()) {
          oprot.writeFieldBegin(META_DATA_FIELD_DESC);
          struct.metaData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.left != null) {
        if (struct.isSetLeft()) {
          oprot.writeFieldBegin(LEFT_FIELD_DESC);
          struct.left.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.joinParts != null) {
        oprot.writeFieldBegin(JOIN_PARTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.joinParts.size()));
          for (JoinPart _iter182 : struct.joinParts)
          {
            _iter182.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.skewKeys != null) {
        if (struct.isSetSkewKeys()) {
          oprot.writeFieldBegin(SKEW_KEYS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.skewKeys.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter183 : struct.skewKeys.entrySet())
            {
              oprot.writeString(_iter183.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter183.getValue().size()));
                for (java.lang.String _iter184 : _iter183.getValue())
                {
                  oprot.writeString(_iter184);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineExternalParts != null) {
        if (struct.isSetOnlineExternalParts()) {
          oprot.writeFieldBegin(ONLINE_EXTERNAL_PARTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.onlineExternalParts.size()));
            for (ExternalPart _iter185 : struct.onlineExternalParts)
            {
              _iter185.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.labelPart != null) {
        if (struct.isSetLabelPart()) {
          oprot.writeFieldBegin(LABEL_PART_FIELD_DESC);
          struct.labelPart.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bootstrapParts != null) {
        if (struct.isSetBootstrapParts()) {
          oprot.writeFieldBegin(BOOTSTRAP_PARTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bootstrapParts.size()));
            for (BootstrapPart _iter186 : struct.bootstrapParts)
            {
              _iter186.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rowIds != null) {
        if (struct.isSetRowIds()) {
          oprot.writeFieldBegin(ROW_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rowIds.size()));
            for (java.lang.String _iter187 : struct.rowIds)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.derivations != null) {
        if (struct.isSetDerivations()) {
          oprot.writeFieldBegin(DERIVATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.derivations.size()));
            for (Derivation _iter188 : struct.derivations)
            {
              _iter188.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinTupleScheme getScheme() {
      return new JoinTupleScheme();
    }
  }

  private static class JoinTupleScheme extends org.apache.thrift.scheme.TupleScheme<Join> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Join struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMetaData()) {
        optionals.set(0);
      }
      if (struct.isSetLeft()) {
        optionals.set(1);
      }
      if (struct.isSetJoinParts()) {
        optionals.set(2);
      }
      if (struct.isSetSkewKeys()) {
        optionals.set(3);
      }
      if (struct.isSetOnlineExternalParts()) {
        optionals.set(4);
      }
      if (struct.isSetLabelPart()) {
        optionals.set(5);
      }
      if (struct.isSetBootstrapParts()) {
        optionals.set(6);
      }
      if (struct.isSetRowIds()) {
        optionals.set(7);
      }
      if (struct.isSetDerivations()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMetaData()) {
        struct.metaData.write(oprot);
      }
      if (struct.isSetLeft()) {
        struct.left.write(oprot);
      }
      if (struct.isSetJoinParts()) {
        {
          oprot.writeI32(struct.joinParts.size());
          for (JoinPart _iter189 : struct.joinParts)
          {
            _iter189.write(oprot);
          }
        }
      }
      if (struct.isSetSkewKeys()) {
        {
          oprot.writeI32(struct.skewKeys.size());
          for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter190 : struct.skewKeys.entrySet())
          {
            oprot.writeString(_iter190.getKey());
            {
              oprot.writeI32(_iter190.getValue().size());
              for (java.lang.String _iter191 : _iter190.getValue())
              {
                oprot.writeString(_iter191);
              }
            }
          }
        }
      }
      if (struct.isSetOnlineExternalParts()) {
        {
          oprot.writeI32(struct.onlineExternalParts.size());
          for (ExternalPart _iter192 : struct.onlineExternalParts)
          {
            _iter192.write(oprot);
          }
        }
      }
      if (struct.isSetLabelPart()) {
        struct.labelPart.write(oprot);
      }
      if (struct.isSetBootstrapParts()) {
        {
          oprot.writeI32(struct.bootstrapParts.size());
          for (BootstrapPart _iter193 : struct.bootstrapParts)
          {
            _iter193.write(oprot);
          }
        }
      }
      if (struct.isSetRowIds()) {
        {
          oprot.writeI32(struct.rowIds.size());
          for (java.lang.String _iter194 : struct.rowIds)
          {
            oprot.writeString(_iter194);
          }
        }
      }
      if (struct.isSetDerivations()) {
        {
          oprot.writeI32(struct.derivations.size());
          for (Derivation _iter195 : struct.derivations)
          {
            _iter195.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Join struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.metaData = new MetaData();
        struct.metaData.read(iprot);
        struct.setMetaDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.left = new Source();
        struct.left.read(iprot);
        struct.setLeftIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list196 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.joinParts = new java.util.ArrayList<JoinPart>(_list196.size);
          @org.apache.thrift.annotation.Nullable JoinPart _elem197;
          for (int _i198 = 0; _i198 < _list196.size; ++_i198)
          {
            _elem197 = new JoinPart();
            _elem197.read(iprot);
            struct.joinParts.add(_elem197);
          }
        }
        struct.setJoinPartsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map199 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.skewKeys = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map199.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key200;
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val201;
          for (int _i202 = 0; _i202 < _map199.size; ++_i202)
          {
            _key200 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val201 = new java.util.ArrayList<java.lang.String>(_list203.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem204;
              for (int _i205 = 0; _i205 < _list203.size; ++_i205)
              {
                _elem204 = iprot.readString();
                _val201.add(_elem204);
              }
            }
            struct.skewKeys.put(_key200, _val201);
          }
        }
        struct.setSkewKeysIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list206 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.onlineExternalParts = new java.util.ArrayList<ExternalPart>(_list206.size);
          @org.apache.thrift.annotation.Nullable ExternalPart _elem207;
          for (int _i208 = 0; _i208 < _list206.size; ++_i208)
          {
            _elem207 = new ExternalPart();
            _elem207.read(iprot);
            struct.onlineExternalParts.add(_elem207);
          }
        }
        struct.setOnlineExternalPartsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.labelPart = new LabelPart();
        struct.labelPart.read(iprot);
        struct.setLabelPartIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bootstrapParts = new java.util.ArrayList<BootstrapPart>(_list209.size);
          @org.apache.thrift.annotation.Nullable BootstrapPart _elem210;
          for (int _i211 = 0; _i211 < _list209.size; ++_i211)
          {
            _elem210 = new BootstrapPart();
            _elem210.read(iprot);
            struct.bootstrapParts.add(_elem210);
          }
        }
        struct.setBootstrapPartsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list212 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.rowIds = new java.util.ArrayList<java.lang.String>(_list212.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem213;
          for (int _i214 = 0; _i214 < _list212.size; ++_i214)
          {
            _elem213 = iprot.readString();
            struct.rowIds.add(_elem213);
          }
        }
        struct.setRowIdsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list215 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.derivations = new java.util.ArrayList<Derivation>(_list215.size);
          @org.apache.thrift.annotation.Nullable Derivation _elem216;
          for (int _i217 = 0; _i217 < _list215.size; ++_i217)
          {
            _elem216 = new Derivation();
            _elem216.read(iprot);
            struct.derivations.add(_elem216);
          }
        }
        struct.setDerivationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

