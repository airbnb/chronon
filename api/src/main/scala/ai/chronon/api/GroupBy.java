/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-29")
public class GroupBy implements org.apache.thrift.TBase<GroupBy, GroupBy._Fields>, java.io.Serializable, Cloneable, Comparable<GroupBy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupBy");

  private static final org.apache.thrift.protocol.TField META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metaData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("sources", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyColumns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField AGGREGATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregations", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ACCURACY_FIELD_DESC = new org.apache.thrift.protocol.TField("accuracy", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BACKFILL_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("backfillStartDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DERIVATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("derivations", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GroupByStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GroupByTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable MetaData metaData; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Source> sources; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> keyColumns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Aggregation> aggregations; // optional
  /**
   * 
   * @see Accuracy
   */
  public @org.apache.thrift.annotation.Nullable Accuracy accuracy; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String backfillStartDate; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Derivation> derivations; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    META_DATA((short)1, "metaData"),
    SOURCES((short)2, "sources"),
    KEY_COLUMNS((short)3, "keyColumns"),
    AGGREGATIONS((short)4, "aggregations"),
    /**
     * 
     * @see Accuracy
     */
    ACCURACY((short)5, "accuracy"),
    BACKFILL_START_DATE((short)6, "backfillStartDate"),
    DERIVATIONS((short)7, "derivations");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // META_DATA
          return META_DATA;
        case 2: // SOURCES
          return SOURCES;
        case 3: // KEY_COLUMNS
          return KEY_COLUMNS;
        case 4: // AGGREGATIONS
          return AGGREGATIONS;
        case 5: // ACCURACY
          return ACCURACY;
        case 6: // BACKFILL_START_DATE
          return BACKFILL_START_DATE;
        case 7: // DERIVATIONS
          return DERIVATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.META_DATA,_Fields.SOURCES,_Fields.KEY_COLUMNS,_Fields.AGGREGATIONS,_Fields.ACCURACY,_Fields.BACKFILL_START_DATE,_Fields.DERIVATIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.META_DATA, new org.apache.thrift.meta_data.FieldMetaData("metaData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetaData.class)));
    tmpMap.put(_Fields.SOURCES, new org.apache.thrift.meta_data.FieldMetaData("sources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Source.class))));
    tmpMap.put(_Fields.KEY_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("keyColumns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AGGREGATIONS, new org.apache.thrift.meta_data.FieldMetaData("aggregations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aggregation.class))));
    tmpMap.put(_Fields.ACCURACY, new org.apache.thrift.meta_data.FieldMetaData("accuracy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Accuracy.class)));
    tmpMap.put(_Fields.BACKFILL_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("backfillStartDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DERIVATIONS, new org.apache.thrift.meta_data.FieldMetaData("derivations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Derivation"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupBy.class, metaDataMap);
  }

  public GroupBy() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupBy(GroupBy other) {
    if (other.isSetMetaData()) {
      this.metaData = new MetaData(other.metaData);
    }
    if (other.isSetSources()) {
      java.util.List<Source> __this__sources = new java.util.ArrayList<Source>(other.sources.size());
      for (Source other_element : other.sources) {
        __this__sources.add(new Source(other_element));
      }
      this.sources = __this__sources;
    }
    if (other.isSetKeyColumns()) {
      java.util.List<java.lang.String> __this__keyColumns = new java.util.ArrayList<java.lang.String>(other.keyColumns);
      this.keyColumns = __this__keyColumns;
    }
    if (other.isSetAggregations()) {
      java.util.List<Aggregation> __this__aggregations = new java.util.ArrayList<Aggregation>(other.aggregations.size());
      for (Aggregation other_element : other.aggregations) {
        __this__aggregations.add(new Aggregation(other_element));
      }
      this.aggregations = __this__aggregations;
    }
    if (other.isSetAccuracy()) {
      this.accuracy = other.accuracy;
    }
    if (other.isSetBackfillStartDate()) {
      this.backfillStartDate = other.backfillStartDate;
    }
    if (other.isSetDerivations()) {
      java.util.List<Derivation> __this__derivations = new java.util.ArrayList<Derivation>(other.derivations.size());
      for (Derivation other_element : other.derivations) {
        __this__derivations.add(new Derivation(other_element));
      }
      this.derivations = __this__derivations;
    }
  }

  public GroupBy deepCopy() {
    return new GroupBy(this);
  }

  @Override
  public void clear() {
    this.metaData = null;
    this.sources = null;
    this.keyColumns = null;
    this.aggregations = null;
    this.accuracy = null;
    this.backfillStartDate = null;
    this.derivations = null;
  }

  @org.apache.thrift.annotation.Nullable
  public MetaData getMetaData() {
    return this.metaData;
  }

  public GroupBy setMetaData(@org.apache.thrift.annotation.Nullable MetaData metaData) {
    this.metaData = metaData;
    return this;
  }

  public void unsetMetaData() {
    this.metaData = null;
  }

  /** Returns true if field metaData is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaData() {
    return this.metaData != null;
  }

  public void setMetaDataIsSet(boolean value) {
    if (!value) {
      this.metaData = null;
    }
  }

  public int getSourcesSize() {
    return (this.sources == null) ? 0 : this.sources.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Source> getSourcesIterator() {
    return (this.sources == null) ? null : this.sources.iterator();
  }

  public void addToSources(Source elem) {
    if (this.sources == null) {
      this.sources = new java.util.ArrayList<Source>();
    }
    this.sources.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Source> getSources() {
    return this.sources;
  }

  public GroupBy setSources(@org.apache.thrift.annotation.Nullable java.util.List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public void unsetSources() {
    this.sources = null;
  }

  /** Returns true if field sources is set (has been assigned a value) and false otherwise */
  public boolean isSetSources() {
    return this.sources != null;
  }

  public void setSourcesIsSet(boolean value) {
    if (!value) {
      this.sources = null;
    }
  }

  public int getKeyColumnsSize() {
    return (this.keyColumns == null) ? 0 : this.keyColumns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKeyColumnsIterator() {
    return (this.keyColumns == null) ? null : this.keyColumns.iterator();
  }

  public void addToKeyColumns(java.lang.String elem) {
    if (this.keyColumns == null) {
      this.keyColumns = new java.util.ArrayList<java.lang.String>();
    }
    this.keyColumns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKeyColumns() {
    return this.keyColumns;
  }

  public GroupBy setKeyColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> keyColumns) {
    this.keyColumns = keyColumns;
    return this;
  }

  public void unsetKeyColumns() {
    this.keyColumns = null;
  }

  /** Returns true if field keyColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyColumns() {
    return this.keyColumns != null;
  }

  public void setKeyColumnsIsSet(boolean value) {
    if (!value) {
      this.keyColumns = null;
    }
  }

  public int getAggregationsSize() {
    return (this.aggregations == null) ? 0 : this.aggregations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Aggregation> getAggregationsIterator() {
    return (this.aggregations == null) ? null : this.aggregations.iterator();
  }

  public void addToAggregations(Aggregation elem) {
    if (this.aggregations == null) {
      this.aggregations = new java.util.ArrayList<Aggregation>();
    }
    this.aggregations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Aggregation> getAggregations() {
    return this.aggregations;
  }

  public GroupBy setAggregations(@org.apache.thrift.annotation.Nullable java.util.List<Aggregation> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public void unsetAggregations() {
    this.aggregations = null;
  }

  /** Returns true if field aggregations is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregations() {
    return this.aggregations != null;
  }

  public void setAggregationsIsSet(boolean value) {
    if (!value) {
      this.aggregations = null;
    }
  }

  /**
   * 
   * @see Accuracy
   */
  @org.apache.thrift.annotation.Nullable
  public Accuracy getAccuracy() {
    return this.accuracy;
  }

  /**
   * 
   * @see Accuracy
   */
  public GroupBy setAccuracy(@org.apache.thrift.annotation.Nullable Accuracy accuracy) {
    this.accuracy = accuracy;
    return this;
  }

  public void unsetAccuracy() {
    this.accuracy = null;
  }

  /** Returns true if field accuracy is set (has been assigned a value) and false otherwise */
  public boolean isSetAccuracy() {
    return this.accuracy != null;
  }

  public void setAccuracyIsSet(boolean value) {
    if (!value) {
      this.accuracy = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBackfillStartDate() {
    return this.backfillStartDate;
  }

  public GroupBy setBackfillStartDate(@org.apache.thrift.annotation.Nullable java.lang.String backfillStartDate) {
    this.backfillStartDate = backfillStartDate;
    return this;
  }

  public void unsetBackfillStartDate() {
    this.backfillStartDate = null;
  }

  /** Returns true if field backfillStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBackfillStartDate() {
    return this.backfillStartDate != null;
  }

  public void setBackfillStartDateIsSet(boolean value) {
    if (!value) {
      this.backfillStartDate = null;
    }
  }

  public int getDerivationsSize() {
    return (this.derivations == null) ? 0 : this.derivations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Derivation> getDerivationsIterator() {
    return (this.derivations == null) ? null : this.derivations.iterator();
  }

  public void addToDerivations(Derivation elem) {
    if (this.derivations == null) {
      this.derivations = new java.util.ArrayList<Derivation>();
    }
    this.derivations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Derivation> getDerivations() {
    return this.derivations;
  }

  public GroupBy setDerivations(@org.apache.thrift.annotation.Nullable java.util.List<Derivation> derivations) {
    this.derivations = derivations;
    return this;
  }

  public void unsetDerivations() {
    this.derivations = null;
  }

  /** Returns true if field derivations is set (has been assigned a value) and false otherwise */
  public boolean isSetDerivations() {
    return this.derivations != null;
  }

  public void setDerivationsIsSet(boolean value) {
    if (!value) {
      this.derivations = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case META_DATA:
      if (value == null) {
        unsetMetaData();
      } else {
        setMetaData((MetaData)value);
      }
      break;

    case SOURCES:
      if (value == null) {
        unsetSources();
      } else {
        setSources((java.util.List<Source>)value);
      }
      break;

    case KEY_COLUMNS:
      if (value == null) {
        unsetKeyColumns();
      } else {
        setKeyColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case AGGREGATIONS:
      if (value == null) {
        unsetAggregations();
      } else {
        setAggregations((java.util.List<Aggregation>)value);
      }
      break;

    case ACCURACY:
      if (value == null) {
        unsetAccuracy();
      } else {
        setAccuracy((Accuracy)value);
      }
      break;

    case BACKFILL_START_DATE:
      if (value == null) {
        unsetBackfillStartDate();
      } else {
        setBackfillStartDate((java.lang.String)value);
      }
      break;

    case DERIVATIONS:
      if (value == null) {
        unsetDerivations();
      } else {
        setDerivations((java.util.List<Derivation>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case META_DATA:
      return getMetaData();

    case SOURCES:
      return getSources();

    case KEY_COLUMNS:
      return getKeyColumns();

    case AGGREGATIONS:
      return getAggregations();

    case ACCURACY:
      return getAccuracy();

    case BACKFILL_START_DATE:
      return getBackfillStartDate();

    case DERIVATIONS:
      return getDerivations();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case META_DATA:
      return isSetMetaData();
    case SOURCES:
      return isSetSources();
    case KEY_COLUMNS:
      return isSetKeyColumns();
    case AGGREGATIONS:
      return isSetAggregations();
    case ACCURACY:
      return isSetAccuracy();
    case BACKFILL_START_DATE:
      return isSetBackfillStartDate();
    case DERIVATIONS:
      return isSetDerivations();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupBy)
      return this.equals((GroupBy)that);
    return false;
  }

  public boolean equals(GroupBy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_metaData = true && this.isSetMetaData();
    boolean that_present_metaData = true && that.isSetMetaData();
    if (this_present_metaData || that_present_metaData) {
      if (!(this_present_metaData && that_present_metaData))
        return false;
      if (!this.metaData.equals(that.metaData))
        return false;
    }

    boolean this_present_sources = true && this.isSetSources();
    boolean that_present_sources = true && that.isSetSources();
    if (this_present_sources || that_present_sources) {
      if (!(this_present_sources && that_present_sources))
        return false;
      if (!this.sources.equals(that.sources))
        return false;
    }

    boolean this_present_keyColumns = true && this.isSetKeyColumns();
    boolean that_present_keyColumns = true && that.isSetKeyColumns();
    if (this_present_keyColumns || that_present_keyColumns) {
      if (!(this_present_keyColumns && that_present_keyColumns))
        return false;
      if (!this.keyColumns.equals(that.keyColumns))
        return false;
    }

    boolean this_present_aggregations = true && this.isSetAggregations();
    boolean that_present_aggregations = true && that.isSetAggregations();
    if (this_present_aggregations || that_present_aggregations) {
      if (!(this_present_aggregations && that_present_aggregations))
        return false;
      if (!this.aggregations.equals(that.aggregations))
        return false;
    }

    boolean this_present_accuracy = true && this.isSetAccuracy();
    boolean that_present_accuracy = true && that.isSetAccuracy();
    if (this_present_accuracy || that_present_accuracy) {
      if (!(this_present_accuracy && that_present_accuracy))
        return false;
      if (!this.accuracy.equals(that.accuracy))
        return false;
    }

    boolean this_present_backfillStartDate = true && this.isSetBackfillStartDate();
    boolean that_present_backfillStartDate = true && that.isSetBackfillStartDate();
    if (this_present_backfillStartDate || that_present_backfillStartDate) {
      if (!(this_present_backfillStartDate && that_present_backfillStartDate))
        return false;
      if (!this.backfillStartDate.equals(that.backfillStartDate))
        return false;
    }

    boolean this_present_derivations = true && this.isSetDerivations();
    boolean that_present_derivations = true && that.isSetDerivations();
    if (this_present_derivations || that_present_derivations) {
      if (!(this_present_derivations && that_present_derivations))
        return false;
      if (!this.derivations.equals(that.derivations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMetaData()) ? 131071 : 524287);
    if (isSetMetaData())
      hashCode = hashCode * 8191 + metaData.hashCode();

    hashCode = hashCode * 8191 + ((isSetSources()) ? 131071 : 524287);
    if (isSetSources())
      hashCode = hashCode * 8191 + sources.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyColumns()) ? 131071 : 524287);
    if (isSetKeyColumns())
      hashCode = hashCode * 8191 + keyColumns.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregations()) ? 131071 : 524287);
    if (isSetAggregations())
      hashCode = hashCode * 8191 + aggregations.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccuracy()) ? 131071 : 524287);
    if (isSetAccuracy())
      hashCode = hashCode * 8191 + accuracy.getValue();

    hashCode = hashCode * 8191 + ((isSetBackfillStartDate()) ? 131071 : 524287);
    if (isSetBackfillStartDate())
      hashCode = hashCode * 8191 + backfillStartDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetDerivations()) ? 131071 : 524287);
    if (isSetDerivations())
      hashCode = hashCode * 8191 + derivations.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GroupBy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMetaData()).compareTo(other.isSetMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaData, other.metaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSources()).compareTo(other.isSetSources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sources, other.sources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyColumns()).compareTo(other.isSetKeyColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyColumns, other.keyColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAggregations()).compareTo(other.isSetAggregations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregations, other.aggregations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccuracy()).compareTo(other.isSetAccuracy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccuracy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accuracy, other.accuracy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBackfillStartDate()).compareTo(other.isSetBackfillStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackfillStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backfillStartDate, other.backfillStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDerivations()).compareTo(other.isSetDerivations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDerivations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.derivations, other.derivations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GroupBy(");
    boolean first = true;

    if (isSetMetaData()) {
      sb.append("metaData:");
      if (this.metaData == null) {
        sb.append("null");
      } else {
        sb.append(this.metaData);
      }
      first = false;
    }
    if (isSetSources()) {
      if (!first) sb.append(", ");
      sb.append("sources:");
      if (this.sources == null) {
        sb.append("null");
      } else {
        sb.append(this.sources);
      }
      first = false;
    }
    if (isSetKeyColumns()) {
      if (!first) sb.append(", ");
      sb.append("keyColumns:");
      if (this.keyColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.keyColumns);
      }
      first = false;
    }
    if (isSetAggregations()) {
      if (!first) sb.append(", ");
      sb.append("aggregations:");
      if (this.aggregations == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregations);
      }
      first = false;
    }
    if (isSetAccuracy()) {
      if (!first) sb.append(", ");
      sb.append("accuracy:");
      if (this.accuracy == null) {
        sb.append("null");
      } else {
        sb.append(this.accuracy);
      }
      first = false;
    }
    if (isSetBackfillStartDate()) {
      if (!first) sb.append(", ");
      sb.append("backfillStartDate:");
      if (this.backfillStartDate == null) {
        sb.append("null");
      } else {
        sb.append(this.backfillStartDate);
      }
      first = false;
    }
    if (isSetDerivations()) {
      if (!first) sb.append(", ");
      sb.append("derivations:");
      if (this.derivations == null) {
        sb.append("null");
      } else {
        sb.append(this.derivations);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (metaData != null) {
      metaData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupByStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GroupByStandardScheme getScheme() {
      return new GroupByStandardScheme();
    }
  }

  private static class GroupByStandardScheme extends org.apache.thrift.scheme.StandardScheme<GroupBy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupBy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metaData = new MetaData();
              struct.metaData.read(iprot);
              struct.setMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                struct.sources = new java.util.ArrayList<Source>(_list108.size);
                @org.apache.thrift.annotation.Nullable Source _elem109;
                for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                {
                  _elem109 = new Source();
                  _elem109.read(iprot);
                  struct.sources.add(_elem109);
                }
                iprot.readListEnd();
              }
              struct.setSourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list111 = iprot.readListBegin();
                struct.keyColumns = new java.util.ArrayList<java.lang.String>(_list111.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem112;
                for (int _i113 = 0; _i113 < _list111.size; ++_i113)
                {
                  _elem112 = iprot.readString();
                  struct.keyColumns.add(_elem112);
                }
                iprot.readListEnd();
              }
              struct.setKeyColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AGGREGATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                struct.aggregations = new java.util.ArrayList<Aggregation>(_list114.size);
                @org.apache.thrift.annotation.Nullable Aggregation _elem115;
                for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                {
                  _elem115 = new Aggregation();
                  _elem115.read(iprot);
                  struct.aggregations.add(_elem115);
                }
                iprot.readListEnd();
              }
              struct.setAggregationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCURACY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accuracy = ai.chronon.api.Accuracy.findByValue(iprot.readI32());
              struct.setAccuracyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BACKFILL_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backfillStartDate = iprot.readString();
              struct.setBackfillStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DERIVATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list117 = iprot.readListBegin();
                struct.derivations = new java.util.ArrayList<Derivation>(_list117.size);
                @org.apache.thrift.annotation.Nullable Derivation _elem118;
                for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                {
                  _elem118 = new Derivation();
                  _elem118.read(iprot);
                  struct.derivations.add(_elem118);
                }
                iprot.readListEnd();
              }
              struct.setDerivationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupBy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metaData != null) {
        if (struct.isSetMetaData()) {
          oprot.writeFieldBegin(META_DATA_FIELD_DESC);
          struct.metaData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sources != null) {
        if (struct.isSetSources()) {
          oprot.writeFieldBegin(SOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sources.size()));
            for (Source _iter120 : struct.sources)
            {
              _iter120.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyColumns != null) {
        if (struct.isSetKeyColumns()) {
          oprot.writeFieldBegin(KEY_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keyColumns.size()));
            for (java.lang.String _iter121 : struct.keyColumns)
            {
              oprot.writeString(_iter121);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregations != null) {
        if (struct.isSetAggregations()) {
          oprot.writeFieldBegin(AGGREGATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregations.size()));
            for (Aggregation _iter122 : struct.aggregations)
            {
              _iter122.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.accuracy != null) {
        if (struct.isSetAccuracy()) {
          oprot.writeFieldBegin(ACCURACY_FIELD_DESC);
          oprot.writeI32(struct.accuracy.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.backfillStartDate != null) {
        if (struct.isSetBackfillStartDate()) {
          oprot.writeFieldBegin(BACKFILL_START_DATE_FIELD_DESC);
          oprot.writeString(struct.backfillStartDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.derivations != null) {
        if (struct.isSetDerivations()) {
          oprot.writeFieldBegin(DERIVATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.derivations.size()));
            for (Derivation _iter123 : struct.derivations)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupByTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GroupByTupleScheme getScheme() {
      return new GroupByTupleScheme();
    }
  }

  private static class GroupByTupleScheme extends org.apache.thrift.scheme.TupleScheme<GroupBy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupBy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMetaData()) {
        optionals.set(0);
      }
      if (struct.isSetSources()) {
        optionals.set(1);
      }
      if (struct.isSetKeyColumns()) {
        optionals.set(2);
      }
      if (struct.isSetAggregations()) {
        optionals.set(3);
      }
      if (struct.isSetAccuracy()) {
        optionals.set(4);
      }
      if (struct.isSetBackfillStartDate()) {
        optionals.set(5);
      }
      if (struct.isSetDerivations()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMetaData()) {
        struct.metaData.write(oprot);
      }
      if (struct.isSetSources()) {
        {
          oprot.writeI32(struct.sources.size());
          for (Source _iter124 : struct.sources)
          {
            _iter124.write(oprot);
          }
        }
      }
      if (struct.isSetKeyColumns()) {
        {
          oprot.writeI32(struct.keyColumns.size());
          for (java.lang.String _iter125 : struct.keyColumns)
          {
            oprot.writeString(_iter125);
          }
        }
      }
      if (struct.isSetAggregations()) {
        {
          oprot.writeI32(struct.aggregations.size());
          for (Aggregation _iter126 : struct.aggregations)
          {
            _iter126.write(oprot);
          }
        }
      }
      if (struct.isSetAccuracy()) {
        oprot.writeI32(struct.accuracy.getValue());
      }
      if (struct.isSetBackfillStartDate()) {
        oprot.writeString(struct.backfillStartDate);
      }
      if (struct.isSetDerivations()) {
        {
          oprot.writeI32(struct.derivations.size());
          for (Derivation _iter127 : struct.derivations)
          {
            _iter127.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupBy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.metaData = new MetaData();
        struct.metaData.read(iprot);
        struct.setMetaDataIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list128 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sources = new java.util.ArrayList<Source>(_list128.size);
          @org.apache.thrift.annotation.Nullable Source _elem129;
          for (int _i130 = 0; _i130 < _list128.size; ++_i130)
          {
            _elem129 = new Source();
            _elem129.read(iprot);
            struct.sources.add(_elem129);
          }
        }
        struct.setSourcesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keyColumns = new java.util.ArrayList<java.lang.String>(_list131.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = iprot.readString();
            struct.keyColumns.add(_elem132);
          }
        }
        struct.setKeyColumnsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.aggregations = new java.util.ArrayList<Aggregation>(_list134.size);
          @org.apache.thrift.annotation.Nullable Aggregation _elem135;
          for (int _i136 = 0; _i136 < _list134.size; ++_i136)
          {
            _elem135 = new Aggregation();
            _elem135.read(iprot);
            struct.aggregations.add(_elem135);
          }
        }
        struct.setAggregationsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accuracy = ai.chronon.api.Accuracy.findByValue(iprot.readI32());
        struct.setAccuracyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.backfillStartDate = iprot.readString();
        struct.setBackfillStartDateIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.derivations = new java.util.ArrayList<Derivation>(_list137.size);
          @org.apache.thrift.annotation.Nullable Derivation _elem138;
          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
          {
            _elem138 = new Derivation();
            _elem138.read(iprot);
            struct.derivations.add(_elem138);
          }
        }
        struct.setDerivationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

