/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.chronon.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Entity Sources represent data that gets mutated over-time - at row-level. This is a group of three data elements.
 * snapshotTable, mutationTable and mutationTopic. mutationTable and mutationTopic are only necessary if we are trying
 * to create realtime or point-in-time aggregations over these sources. Entity sources usually map 1:1 with a database
 * tables in your OLTP store that typically serves live application traffic. When mutation data is absent they map 1:1
 * to `dim` tables in star schema.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2024-12-29")
public class EntitySource implements org.apache.thrift.TBase<EntitySource, EntitySource._Fields>, java.io.Serializable, Cloneable, Comparable<EntitySource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EntitySource");

  private static final org.apache.thrift.protocol.TField SNAPSHOT_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotTable", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MUTATION_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mutationTable", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MUTATION_TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutationTopic", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EntitySourceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EntitySourceTupleSchemeFactory();

  /**
   * Snapshot table currently needs to be a 'ds' (date string - yyyy-MM-dd) partitioned hive table.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String snapshotTable; // optional
  /**
   * Topic is a kafka table. The table contains all the events that historically came through this topic.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String mutationTable; // optional
  /**
   * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String mutationTopic; // optional
  /**
   * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
   */
  public @org.apache.thrift.annotation.Nullable Query query; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Snapshot table currently needs to be a 'ds' (date string - yyyy-MM-dd) partitioned hive table.
     */
    SNAPSHOT_TABLE((short)1, "snapshotTable"),
    /**
     * Topic is a kafka table. The table contains all the events that historically came through this topic.
     */
    MUTATION_TABLE((short)2, "mutationTable"),
    /**
     * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
     */
    MUTATION_TOPIC((short)3, "mutationTopic"),
    /**
     * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
     */
    QUERY((short)4, "query");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SNAPSHOT_TABLE
          return SNAPSHOT_TABLE;
        case 2: // MUTATION_TABLE
          return MUTATION_TABLE;
        case 3: // MUTATION_TOPIC
          return MUTATION_TOPIC;
        case 4: // QUERY
          return QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SNAPSHOT_TABLE,_Fields.MUTATION_TABLE,_Fields.MUTATION_TOPIC,_Fields.QUERY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SNAPSHOT_TABLE, new org.apache.thrift.meta_data.FieldMetaData("snapshotTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUTATION_TABLE, new org.apache.thrift.meta_data.FieldMetaData("mutationTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUTATION_TOPIC, new org.apache.thrift.meta_data.FieldMetaData("mutationTopic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EntitySource.class, metaDataMap);
  }

  public EntitySource() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EntitySource(EntitySource other) {
    if (other.isSetSnapshotTable()) {
      this.snapshotTable = other.snapshotTable;
    }
    if (other.isSetMutationTable()) {
      this.mutationTable = other.mutationTable;
    }
    if (other.isSetMutationTopic()) {
      this.mutationTopic = other.mutationTopic;
    }
    if (other.isSetQuery()) {
      this.query = new Query(other.query);
    }
  }

  public EntitySource deepCopy() {
    return new EntitySource(this);
  }

  @Override
  public void clear() {
    this.snapshotTable = null;
    this.mutationTable = null;
    this.mutationTopic = null;
    this.query = null;
  }

  /**
   * Snapshot table currently needs to be a 'ds' (date string - yyyy-MM-dd) partitioned hive table.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSnapshotTable() {
    return this.snapshotTable;
  }

  /**
   * Snapshot table currently needs to be a 'ds' (date string - yyyy-MM-dd) partitioned hive table.
   */
  public EntitySource setSnapshotTable(@org.apache.thrift.annotation.Nullable java.lang.String snapshotTable) {
    this.snapshotTable = snapshotTable;
    return this;
  }

  public void unsetSnapshotTable() {
    this.snapshotTable = null;
  }

  /** Returns true if field snapshotTable is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotTable() {
    return this.snapshotTable != null;
  }

  public void setSnapshotTableIsSet(boolean value) {
    if (!value) {
      this.snapshotTable = null;
    }
  }

  /**
   * Topic is a kafka table. The table contains all the events that historically came through this topic.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMutationTable() {
    return this.mutationTable;
  }

  /**
   * Topic is a kafka table. The table contains all the events that historically came through this topic.
   */
  public EntitySource setMutationTable(@org.apache.thrift.annotation.Nullable java.lang.String mutationTable) {
    this.mutationTable = mutationTable;
    return this;
  }

  public void unsetMutationTable() {
    this.mutationTable = null;
  }

  /** Returns true if field mutationTable is set (has been assigned a value) and false otherwise */
  public boolean isSetMutationTable() {
    return this.mutationTable != null;
  }

  public void setMutationTableIsSet(boolean value) {
    if (!value) {
      this.mutationTable = null;
    }
  }

  /**
   * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMutationTopic() {
    return this.mutationTopic;
  }

  /**
   * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
   */
  public EntitySource setMutationTopic(@org.apache.thrift.annotation.Nullable java.lang.String mutationTopic) {
    this.mutationTopic = mutationTopic;
    return this;
  }

  public void unsetMutationTopic() {
    this.mutationTopic = null;
  }

  /** Returns true if field mutationTopic is set (has been assigned a value) and false otherwise */
  public boolean isSetMutationTopic() {
    return this.mutationTopic != null;
  }

  public void setMutationTopicIsSet(boolean value) {
    if (!value) {
      this.mutationTopic = null;
    }
  }

  /**
   * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
   */
  @org.apache.thrift.annotation.Nullable
  public Query getQuery() {
    return this.query;
  }

  /**
   * The logic used to scan both the table and the topic. Contains row level transformations and filtering expressed as Spark SQL statements.
   */
  public EntitySource setQuery(@org.apache.thrift.annotation.Nullable Query query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SNAPSHOT_TABLE:
      if (value == null) {
        unsetSnapshotTable();
      } else {
        setSnapshotTable((java.lang.String)value);
      }
      break;

    case MUTATION_TABLE:
      if (value == null) {
        unsetMutationTable();
      } else {
        setMutationTable((java.lang.String)value);
      }
      break;

    case MUTATION_TOPIC:
      if (value == null) {
        unsetMutationTopic();
      } else {
        setMutationTopic((java.lang.String)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((Query)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SNAPSHOT_TABLE:
      return getSnapshotTable();

    case MUTATION_TABLE:
      return getMutationTable();

    case MUTATION_TOPIC:
      return getMutationTopic();

    case QUERY:
      return getQuery();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SNAPSHOT_TABLE:
      return isSetSnapshotTable();
    case MUTATION_TABLE:
      return isSetMutationTable();
    case MUTATION_TOPIC:
      return isSetMutationTopic();
    case QUERY:
      return isSetQuery();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof EntitySource)
      return this.equals((EntitySource)that);
    return false;
  }

  public boolean equals(EntitySource that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_snapshotTable = true && this.isSetSnapshotTable();
    boolean that_present_snapshotTable = true && that.isSetSnapshotTable();
    if (this_present_snapshotTable || that_present_snapshotTable) {
      if (!(this_present_snapshotTable && that_present_snapshotTable))
        return false;
      if (!this.snapshotTable.equals(that.snapshotTable))
        return false;
    }

    boolean this_present_mutationTable = true && this.isSetMutationTable();
    boolean that_present_mutationTable = true && that.isSetMutationTable();
    if (this_present_mutationTable || that_present_mutationTable) {
      if (!(this_present_mutationTable && that_present_mutationTable))
        return false;
      if (!this.mutationTable.equals(that.mutationTable))
        return false;
    }

    boolean this_present_mutationTopic = true && this.isSetMutationTopic();
    boolean that_present_mutationTopic = true && that.isSetMutationTopic();
    if (this_present_mutationTopic || that_present_mutationTopic) {
      if (!(this_present_mutationTopic && that_present_mutationTopic))
        return false;
      if (!this.mutationTopic.equals(that.mutationTopic))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSnapshotTable()) ? 131071 : 524287);
    if (isSetSnapshotTable())
      hashCode = hashCode * 8191 + snapshotTable.hashCode();

    hashCode = hashCode * 8191 + ((isSetMutationTable()) ? 131071 : 524287);
    if (isSetMutationTable())
      hashCode = hashCode * 8191 + mutationTable.hashCode();

    hashCode = hashCode * 8191 + ((isSetMutationTopic()) ? 131071 : 524287);
    if (isSetMutationTopic())
      hashCode = hashCode * 8191 + mutationTopic.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
    if (isSetQuery())
      hashCode = hashCode * 8191 + query.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EntitySource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSnapshotTable()).compareTo(other.isSetSnapshotTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotTable, other.snapshotTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMutationTable()).compareTo(other.isSetMutationTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutationTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutationTable, other.mutationTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMutationTopic()).compareTo(other.isSetMutationTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutationTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutationTopic, other.mutationTopic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EntitySource(");
    boolean first = true;

    if (isSetSnapshotTable()) {
      sb.append("snapshotTable:");
      if (this.snapshotTable == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshotTable);
      }
      first = false;
    }
    if (isSetMutationTable()) {
      if (!first) sb.append(", ");
      sb.append("mutationTable:");
      if (this.mutationTable == null) {
        sb.append("null");
      } else {
        sb.append(this.mutationTable);
      }
      first = false;
    }
    if (isSetMutationTopic()) {
      if (!first) sb.append(", ");
      sb.append("mutationTopic:");
      if (this.mutationTopic == null) {
        sb.append("null");
      } else {
        sb.append(this.mutationTopic);
      }
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query != null) {
      query.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntitySourceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntitySourceStandardScheme getScheme() {
      return new EntitySourceStandardScheme();
    }
  }

  private static class EntitySourceStandardScheme extends org.apache.thrift.scheme.StandardScheme<EntitySource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EntitySource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SNAPSHOT_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshotTable = iprot.readString();
              struct.setSnapshotTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MUTATION_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mutationTable = iprot.readString();
              struct.setMutationTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MUTATION_TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mutationTopic = iprot.readString();
              struct.setMutationTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query = new Query();
              struct.query.read(iprot);
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EntitySource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.snapshotTable != null) {
        if (struct.isSetSnapshotTable()) {
          oprot.writeFieldBegin(SNAPSHOT_TABLE_FIELD_DESC);
          oprot.writeString(struct.snapshotTable);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mutationTable != null) {
        if (struct.isSetMutationTable()) {
          oprot.writeFieldBegin(MUTATION_TABLE_FIELD_DESC);
          oprot.writeString(struct.mutationTable);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mutationTopic != null) {
        if (struct.isSetMutationTopic()) {
          oprot.writeFieldBegin(MUTATION_TOPIC_FIELD_DESC);
          oprot.writeString(struct.mutationTopic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntitySourceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntitySourceTupleScheme getScheme() {
      return new EntitySourceTupleScheme();
    }
  }

  private static class EntitySourceTupleScheme extends org.apache.thrift.scheme.TupleScheme<EntitySource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EntitySource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSnapshotTable()) {
        optionals.set(0);
      }
      if (struct.isSetMutationTable()) {
        optionals.set(1);
      }
      if (struct.isSetMutationTopic()) {
        optionals.set(2);
      }
      if (struct.isSetQuery()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSnapshotTable()) {
        oprot.writeString(struct.snapshotTable);
      }
      if (struct.isSetMutationTable()) {
        oprot.writeString(struct.mutationTable);
      }
      if (struct.isSetMutationTopic()) {
        oprot.writeString(struct.mutationTopic);
      }
      if (struct.isSetQuery()) {
        struct.query.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EntitySource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.snapshotTable = iprot.readString();
        struct.setSnapshotTableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mutationTable = iprot.readString();
        struct.setMutationTableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mutationTopic = iprot.readString();
        struct.setMutationTopicIsSet(true);
      }
      if (incoming.get(3)) {
        struct.query = new Query();
        struct.query.read(iprot);
        struct.setQueryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

