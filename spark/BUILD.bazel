load("@io_bazel_rules_scala//scala:scala_cross_version_select.bzl", "select_for_scala_version")

scala_library(
    name = "spark",
    srcs = glob(["src/main/scala/ai/chronon/spark/**/*.scala"]) +
           select({
               "//tools/flags/spark:spark_3_5": [
                   "//spark/src/main/35plus/ai/chronon/spark:EncoderUtil.scala",
               ],
               "//conditions:default": [
                   "//spark/src/main/default/ai/chronon/spark:EncoderUtil.scala",
               ],
           }),
    resources = [
        "src/main/resources/log4j.properties",
    ],
    deps = [
        "//aggregator",
        "//api:api-lib",
        "//api:api-models",
        "//online",
        "//third_party/java/spark:spark-exec",
        maven_artifact("com.esotericsoftware:kryo"),
        maven_artifact("com.fasterxml.jackson.core:jackson-core"),
        maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("com.github.jnr:jnr-ffi"),
        maven_artifact("com.google.guava:guava"),
        maven_artifact("com.yahoo.datasketches:sketches-core"),
        maven_artifact("com.yahoo.datasketches:memory"),
        maven_artifact("commons.io:commons-io"),
        maven_artifact("commons.lang:commons-lang"),
        scala_artifact("io.delta:delta-core"),
        maven_artifact("org.apache.kafka:kafka-clients"),
        maven_artifact("org.apache.thrift:libthrift"),
        scala_artifact("org.json4s:json4s-core"),
        scala_artifact("org.json4s:json4s-jackson"),
        scala_artifact("org.json4s:json4s-ast"),
        scala_artifact("org.rogach:scallop"),
        scala_artifact("org.scala-lang.modules:scala-collection-compat"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.slf4j:slf4j-log4j12"),
        maven_artifact("com.google.code.gson:gson"),
    ],
)

scala_library(
    name = "test-lib",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/**/*.scala"]),
    visibility = ["//visibility:public"],
    deps = [
        "spark",
        "//aggregator",
        "//aggregator:test-lib",
        "//api:api-lib",
        "//api:api-models",
        "//online",
        "//third_party/java/spark:spark-exec",
        maven_artifact("com.google.code.gson:gson"),
        maven_artifact("org.apache.thrift:libthrift"),
        maven_artifact("com.google.guava:guava"),
        maven_artifact("junit:junit"),
        maven_artifact("com.novocode:junit-interface"),
        scala_artifact("org.rogach:scallop"),
        maven_artifact("commons.io:commons-io"),
        maven_artifact("commons.lang:commons-lang"),
        scala_artifact("org.scalatest:scalatest-matchers-core"),
        scala_artifact("org.scalatest:scalatest-core"),
        maven_artifact("org.scalatest:scalatest-compatible"),
        scala_artifact("org.scalatest:scalatest-shouldmatchers"),
        scala_artifact("org.scalactic:scalactic"),
        scala_artifact("org.scala-lang.modules:scala-java8-compat"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.slf4j:slf4j-log4j12"),
        scala_artifact("org.scalatestplus:mockito-3-4"),
        maven_artifact("org.mockito:mockito-core"),
    ],
)

scala_test_suite(
    name = "test",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/**/*.scala"]),
    visibility = ["//visibility:public"],
    deps = [
        ":spark",
        ":test-lib",
        "//aggregator",
        "//aggregator:test-lib",
        "//api:api-lib",
        "//api:api-models",
        "//online",
        "//third_party/java/spark:spark-exec",
        scala_artifact("org.scala-lang.modules:scala-java8-compat"),
        maven_artifact("junit:junit"),
        maven_artifact("com.novocode:junit-interface"),
        maven_artifact("commons.io:commons-io"),
        maven_artifact("com.google.guava:guava"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("com.google.code.gson:gson"),
        scala_artifact("org.rogach:scallop"),
        scala_artifact("org.scalatestplus:mockito-3-4"),
        maven_artifact("org.mockito:mockito-core"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.slf4j:slf4j-log4j12"),
    ],
)

jvm_binary(
    name = "spark-assembly",
    deploy_env = ["//third_party/java/spark:spark"],
    main_class = "ai.chronon.spark.Driver",
    runtime_deps = [":spark"],
)
